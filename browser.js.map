{"version":3,"file":"browser.js","sources":["../node_modules/@stdlib/utils-define-property/lib/define_property.js","../node_modules/@stdlib/utils-define-property/lib/builtin.js","../node_modules/@stdlib/string-base-format-interpolate/lib/is_number.js","../node_modules/@stdlib/string-base-format-interpolate/lib/zero_pad.js","../node_modules/@stdlib/string-base-format-interpolate/lib/format_integer.js","../node_modules/@stdlib/string-base-format-interpolate/lib/format_double.js","../node_modules/@stdlib/string-base-format-interpolate/lib/space_pad.js","../node_modules/@stdlib/string-base-format-interpolate/lib/main.js","../node_modules/@stdlib/string-base-format-interpolate/lib/is_string.js","../node_modules/@stdlib/string-base-format-tokenize/lib/main.js","../node_modules/@stdlib/string-format/lib/main.js","../node_modules/@stdlib/string-format/lib/is_string.js","../node_modules/@stdlib/utils-define-property/lib/polyfill.js","../node_modules/@stdlib/utils-define-property/lib/index.js","../node_modules/@stdlib/utils-define-property/lib/has_define_property_support.js","../node_modules/@stdlib/utils-define-read-only-property/lib/main.js","../node_modules/@stdlib/ndarray-base-normalize-index/lib/main.js","../node_modules/@stdlib/ndarray-base-ndims/lib/main.js","../node_modules/@stdlib/array-base-copy-indexed/lib/main.js","../node_modules/@stdlib/ndarray-base-numel-dimension/lib/main.js","../node_modules/@stdlib/ndarray-base-shape/lib/main.js","../node_modules/@stdlib/utils-define-nonenumerable-read-only-property/lib/main.js","../node_modules/@stdlib/ndarray-base-shape2strides/lib/main.js","../node_modules/@stdlib/ndarray-base-shape2strides/lib/index.js","../node_modules/@stdlib/ndarray-base-shape2strides/lib/assign.js","../node_modules/@stdlib/ndarray-base-strides/lib/main.js","../node_modules/@stdlib/ndarray-base-stride/lib/main.js","../node_modules/@stdlib/ndarray-base-offset/lib/main.js","../node_modules/@stdlib/ndarray-base-strides2offset/lib/main.js","../node_modules/@stdlib/ndarray-base-data-buffer/lib/main.js","../node_modules/@stdlib/math-base-assert-is-nan/lib/main.js","../node_modules/@stdlib/constants-float64-pinf/lib/index.js","../node_modules/@stdlib/math-base-assert-is-positive-zero/lib/main.js","../node_modules/@stdlib/stats-base-cumax/lib/cumax.js","../node_modules/@stdlib/stats-base-cumax/lib/main.js","../node_modules/@stdlib/stats-base-cumax/lib/ndarray.js","../node_modules/@stdlib/number-ctor/lib/main.js","../node_modules/@stdlib/constants-float64-ninf/lib/index.js","../node_modules/@stdlib/math-base-assert-is-negative-zero/lib/main.js","../node_modules/@stdlib/stats-base-cumin/lib/cumin.js","../node_modules/@stdlib/stats-base-cumin/lib/main.js","../node_modules/@stdlib/stats-base-cumin/lib/ndarray.js","../node_modules/@stdlib/strided-base-stride2offset/lib/main.js","../node_modules/@stdlib/stats-strided-dcumax/lib/ndarray.js","../node_modules/@stdlib/stats-strided-dcumin/lib/ndarray.js","../node_modules/@stdlib/stats-strided-dmax/lib/ndarray.js","../node_modules/@stdlib/stats-strided-dmin/lib/ndarray.js","../node_modules/@stdlib/stats-strided-drange/lib/ndarray.js","../node_modules/@stdlib/stats-strided-dcumax/lib/main.js","../node_modules/@stdlib/stats-strided-dcumax/lib/dcumax.js","../node_modules/@stdlib/stats-strided-dcumin/lib/main.js","../node_modules/@stdlib/stats-strided-dcumin/lib/dcumin.js","../node_modules/@stdlib/stats-strided-dmax/lib/main.js","../node_modules/@stdlib/stats-strided-dmax/lib/dmax.js","../node_modules/@stdlib/stats-strided-dmin/lib/main.js","../node_modules/@stdlib/stats-strided-dmin/lib/dmin.js","../node_modules/@stdlib/stats-strided-drange/lib/main.js","../node_modules/@stdlib/stats-strided-drange/lib/drange.js","../node_modules/@stdlib/array-base-assert-is-accessor-array/lib/main.js","../node_modules/@stdlib/array-base-accessor-getter/lib/main.js","../node_modules/@stdlib/array-base-getter/lib/main.js","../node_modules/@stdlib/assert-has-tostringtag-support/lib/main.js","../node_modules/@stdlib/assert-has-symbol-support/lib/main.js","../node_modules/@stdlib/utils-native-class/lib/tostring.js","../node_modules/@stdlib/assert-has-own-property/lib/main.js","../node_modules/@stdlib/symbol-ctor/lib/main.js","../node_modules/@stdlib/utils-native-class/lib/index.js","../node_modules/@stdlib/utils-native-class/lib/tostringtag.js","../node_modules/@stdlib/utils-native-class/lib/polyfill.js","../node_modules/@stdlib/utils-native-class/lib/main.js","../node_modules/@stdlib/assert-is-array/lib/main.js","../node_modules/@stdlib/assert-is-object-like/lib/main.js","../node_modules/@stdlib/assert-is-buffer/lib/main.js","../node_modules/@stdlib/regexp-function-name/lib/main.js","../node_modules/@stdlib/assert-is-object-like/lib/index.js","../node_modules/@stdlib/assert-tools-array-function/lib/main.js","../node_modules/@stdlib/regexp-function-name/lib/regexp.js","../node_modules/@stdlib/utils-constructor-name/lib/main.js","../node_modules/@stdlib/regexp-function-name/lib/index.js","../node_modules/@stdlib/array-dtype/lib/ctor2dtype.js","../node_modules/@stdlib/array-float64/lib/index.js","../node_modules/@stdlib/assert-is-float64array/lib/main.js","../node_modules/@stdlib/assert-has-float64array-support/lib/float64array.js","../node_modules/@stdlib/array-float64/lib/main.js","../node_modules/@stdlib/assert-has-float64array-support/lib/main.js","../node_modules/@stdlib/array-float64/lib/polyfill.js","../node_modules/@stdlib/array-float32/lib/index.js","../node_modules/@stdlib/assert-is-float32array/lib/main.js","../node_modules/@stdlib/assert-has-float32array-support/lib/float32array.js","../node_modules/@stdlib/array-float32/lib/main.js","../node_modules/@stdlib/assert-has-float32array-support/lib/main.js","../node_modules/@stdlib/array-float32/lib/polyfill.js","../node_modules/@stdlib/array-uint32/lib/index.js","../node_modules/@stdlib/assert-is-uint32array/lib/main.js","../node_modules/@stdlib/constants-uint32-max/lib/index.js","../node_modules/@stdlib/assert-has-uint32array-support/lib/uint32array.js","../node_modules/@stdlib/array-uint32/lib/main.js","../node_modules/@stdlib/assert-has-uint32array-support/lib/main.js","../node_modules/@stdlib/array-uint32/lib/polyfill.js","../node_modules/@stdlib/array-int32/lib/index.js","../node_modules/@stdlib/assert-is-int32array/lib/main.js","../node_modules/@stdlib/assert-has-int32array-support/lib/int32array.js","../node_modules/@stdlib/array-int32/lib/main.js","../node_modules/@stdlib/assert-has-int32array-support/lib/main.js","../node_modules/@stdlib/constants-int32-min/lib/index.js","../node_modules/@stdlib/array-int32/lib/polyfill.js","../node_modules/@stdlib/array-uint16/lib/index.js","../node_modules/@stdlib/assert-is-uint16array/lib/main.js","../node_modules/@stdlib/assert-has-uint16array-support/lib/uint16array.js","../node_modules/@stdlib/array-uint16/lib/main.js","../node_modules/@stdlib/assert-has-uint16array-support/lib/main.js","../node_modules/@stdlib/array-uint16/lib/polyfill.js","../node_modules/@stdlib/array-int16/lib/index.js","../node_modules/@stdlib/assert-is-int16array/lib/main.js","../node_modules/@stdlib/assert-has-int16array-support/lib/int16array.js","../node_modules/@stdlib/array-int16/lib/main.js","../node_modules/@stdlib/assert-has-int16array-support/lib/main.js","../node_modules/@stdlib/constants-int16-min/lib/index.js","../node_modules/@stdlib/array-int16/lib/polyfill.js","../node_modules/@stdlib/array-uint8/lib/index.js","../node_modules/@stdlib/assert-is-uint8array/lib/main.js","../node_modules/@stdlib/assert-has-uint8array-support/lib/uint8array.js","../node_modules/@stdlib/array-uint8/lib/main.js","../node_modules/@stdlib/assert-has-uint8array-support/lib/main.js","../node_modules/@stdlib/array-uint8/lib/polyfill.js","../node_modules/@stdlib/array-uint8c/lib/index.js","../node_modules/@stdlib/assert-is-uint8clampedarray/lib/main.js","../node_modules/@stdlib/assert-has-uint8clampedarray-support/lib/uint8clampedarray.js","../node_modules/@stdlib/array-uint8c/lib/main.js","../node_modules/@stdlib/assert-has-uint8clampedarray-support/lib/main.js","../node_modules/@stdlib/array-uint8c/lib/polyfill.js","../node_modules/@stdlib/array-int8/lib/index.js","../node_modules/@stdlib/assert-is-int8array/lib/main.js","../node_modules/@stdlib/assert-has-int8array-support/lib/int8array.js","../node_modules/@stdlib/array-int8/lib/main.js","../node_modules/@stdlib/assert-has-int8array-support/lib/main.js","../node_modules/@stdlib/constants-int8-min/lib/index.js","../node_modules/@stdlib/array-int8/lib/polyfill.js","../node_modules/@stdlib/assert-is-number/lib/primitive.js","../node_modules/@stdlib/assert-is-number/lib/tostring.js","../node_modules/@stdlib/assert-is-number/lib/object.js","../node_modules/@stdlib/assert-is-number/lib/try2serialize.js","../node_modules/@stdlib/assert-is-number/lib/main.js","../node_modules/@stdlib/assert-is-number/lib/index.js","../node_modules/@stdlib/math-base-special-floor/lib/main.js","../node_modules/@stdlib/math-base-assert-is-integer/lib/main.js","../node_modules/@stdlib/assert-is-integer/lib/integer.js","../node_modules/@stdlib/assert-is-integer/lib/primitive.js","../node_modules/@stdlib/assert-is-integer/lib/object.js","../node_modules/@stdlib/assert-is-integer/lib/main.js","../node_modules/@stdlib/assert-is-nonnegative-integer/lib/primitive.js","../node_modules/@stdlib/assert-is-nonnegative-integer/lib/object.js","../node_modules/@stdlib/assert-is-nonnegative-integer/lib/main.js","../node_modules/@stdlib/assert-is-integer/lib/index.js","../node_modules/@stdlib/assert-is-nonnegative-integer/lib/index.js","../node_modules/@stdlib/constants-array-max-array-length/lib/index.js","../node_modules/@stdlib/assert-is-array-like-object/lib/main.js","../node_modules/@stdlib/constants-array-max-typed-array-length/lib/index.js","../node_modules/@stdlib/assert-is-collection/lib/main.js","../node_modules/@stdlib/assert-is-arraybuffer/lib/main.js","../node_modules/@stdlib/assert-is-object/lib/main.js","../node_modules/@stdlib/assert-is-string/lib/primitive.js","../node_modules/@stdlib/assert-is-string/lib/valueof.js","../node_modules/@stdlib/assert-is-string/lib/object.js","../node_modules/@stdlib/assert-is-string/lib/try2valueof.js","../node_modules/@stdlib/assert-is-string/lib/main.js","../node_modules/@stdlib/assert-is-string/lib/index.js","../node_modules/@stdlib/utils-type-of/lib/fixtures/re.js","../node_modules/@stdlib/assert-is-boolean/lib/primitive.js","../node_modules/@stdlib/boolean-ctor/lib/main.js","../node_modules/@stdlib/assert-is-boolean/lib/tostring.js","../node_modules/@stdlib/assert-is-boolean/lib/object.js","../node_modules/@stdlib/assert-is-boolean/lib/try2serialize.js","../node_modules/@stdlib/assert-is-boolean/lib/main.js","../node_modules/@stdlib/assert-is-boolean/lib/index.js","../node_modules/@stdlib/utils-global/lib/self.js","../node_modules/@stdlib/utils-global/lib/window.js","../node_modules/@stdlib/utils-global/lib/global_this.js","../node_modules/@stdlib/utils-type-of/lib/fixtures/nodelist.js","../node_modules/@stdlib/utils-global/lib/browser.js","../node_modules/@stdlib/utils-global/lib/codegen.js","../node_modules/@stdlib/utils-type-of/lib/fixtures/typedarray.js","../node_modules/@stdlib/utils-type-of/lib/index.js","../node_modules/@stdlib/utils-type-of/lib/check.js","../node_modules/@stdlib/utils-type-of/lib/polyfill.js","../node_modules/@stdlib/utils-type-of/lib/main.js","../node_modules/@stdlib/assert-is-function/lib/main.js","../node_modules/@stdlib/complex-float64-ctor/lib/main.js","../node_modules/@stdlib/complex-float64-ctor/lib/tostring.js","../node_modules/@stdlib/complex-float64-ctor/lib/tojson.js","../node_modules/@stdlib/number-float64-base-to-float32/lib/main.js","../node_modules/@stdlib/number-float64-base-to-float32/lib/polyfill.js","../node_modules/@stdlib/number-float64-base-to-float32/lib/index.js","../node_modules/@stdlib/complex-float32-ctor/lib/main.js","../node_modules/@stdlib/assert-is-complex-like/lib/main.js","../node_modules/@stdlib/math-base-assert-is-even/lib/main.js","../node_modules/@stdlib/complex-float32-ctor/lib/tostring.js","../node_modules/@stdlib/complex-float32-ctor/lib/tojson.js","../node_modules/@stdlib/array-base-assert-is-complex64array/lib/main.js","../node_modules/@stdlib/array-base-assert-is-complex128array/lib/main.js","../node_modules/@stdlib/assert-has-iterator-symbol-support/lib/main.js","../node_modules/@stdlib/symbol-iterator/lib/main.js","../node_modules/@stdlib/utils-define-nonenumerable-read-only-accessor/lib/main.js","../node_modules/@stdlib/complex-float32/lib/main.js","../node_modules/@stdlib/complex-realf/lib/main.js","../node_modules/@stdlib/complex-imagf/lib/main.js","../node_modules/@stdlib/strided-base-reinterpret-complex64/lib/main.js","../node_modules/@stdlib/strided-base-reinterpret-complex128/lib/main.js","../node_modules/@stdlib/array-complex64/lib/from_iterator.js","../node_modules/@stdlib/complex-float32/lib/tostring.js","../node_modules/@stdlib/complex-float32/lib/tojson.js","../node_modules/@stdlib/array-complex64/lib/main.js","../node_modules/@stdlib/array-complex64/lib/from_array.js","../node_modules/@stdlib/complex-float64/lib/main.js","../node_modules/@stdlib/complex-real/lib/main.js","../node_modules/@stdlib/complex-imag/lib/main.js","../node_modules/@stdlib/array-complex128/lib/from_iterator.js","../node_modules/@stdlib/array-complex64/lib/from_iterator_map.js","../node_modules/@stdlib/complex-float64/lib/tostring.js","../node_modules/@stdlib/complex-float64/lib/tojson.js","../node_modules/@stdlib/array-complex128/lib/main.js","../node_modules/@stdlib/array-complex128/lib/from_array.js","../node_modules/@stdlib/array-complex128/lib/from_iterator_map.js","../node_modules/@stdlib/array-dtype/lib/ctors.js","../node_modules/@stdlib/array-dtype/lib/dtypes.js","../node_modules/@stdlib/array-dtype/lib/main.js","../node_modules/@stdlib/ndarray-base-ndarraylike2scalar/lib/main.js","../node_modules/@stdlib/array-base-resolve-getter/lib/main.js","../node_modules/@stdlib/utils-keys/lib/builtin.js","../node_modules/@stdlib/utils-keys/lib/has_builtin.js","../node_modules/@stdlib/assert-is-arguments/lib/detect.js","../node_modules/@stdlib/assert-is-arguments/lib/main.js","../node_modules/@stdlib/assert-is-nan/lib/primitive.js","../node_modules/@stdlib/assert-is-nan/lib/object.js","../node_modules/@stdlib/assert-is-nan/lib/main.js","../node_modules/@stdlib/assert-is-nan/lib/index.js","../node_modules/@stdlib/assert-is-enumerable-property/lib/native.js","../node_modules/@stdlib/assert-is-enumerable-property/lib/has_string_enumerability_bug.js","../node_modules/@stdlib/assert-is-enumerable-property/lib/main.js","../node_modules/@stdlib/assert-is-arguments/lib/index.js","../node_modules/@stdlib/assert-is-arguments/lib/polyfill.js","../node_modules/@stdlib/utils-keys/lib/builtin_wrapper.js","../node_modules/@stdlib/utils-keys/lib/has_enumerable_prototype_bug.js","../node_modules/@stdlib/utils-noop/lib/main.js","../node_modules/@stdlib/utils-keys/lib/has_non_enumerable_properties_bug.js","../node_modules/@stdlib/utils-index-of/lib/main.js","../node_modules/@stdlib/utils-keys/lib/is_constructor_prototype.js","../node_modules/@stdlib/utils-keys/lib/main.js","../node_modules/@stdlib/utils-keys/lib/window.js","../node_modules/@stdlib/utils-keys/lib/has_automation_equality_bug.js","../node_modules/@stdlib/utils-keys/lib/has_window.js","../node_modules/@stdlib/utils-keys/lib/has_arguments_bug.js","../node_modules/@stdlib/utils-keys/lib/polyfill.js","../node_modules/@stdlib/utils-keys/lib/is_constructor_prototype_wrapper.js","../node_modules/@stdlib/utils-get-prototype-of/lib/detect.js","../node_modules/@stdlib/object-ctor/lib/main.js","../node_modules/@stdlib/utils-get-prototype-of/lib/native.js","../node_modules/@stdlib/utils-get-prototype-of/lib/polyfill.js","../node_modules/@stdlib/utils-get-prototype-of/lib/proto.js","../node_modules/@stdlib/assert-is-plain-object/lib/main.js","../node_modules/@stdlib/utils-get-prototype-of/lib/main.js","../node_modules/@stdlib/stats-base-ztest-alternatives/lib/enum.js","../node_modules/@stdlib/stats-base-ztest-alternatives/lib/index.js","../node_modules/@stdlib/stats-base-ztest-alternatives/lib/main.js","../node_modules/@stdlib/stats-base-ztest-alternative-enum2str/lib/main.js","../node_modules/@stdlib/utils-object-inverse/lib/main.js","../node_modules/@stdlib/stats-base-ztest-alternative-str2enum/lib/main.js","../node_modules/@stdlib/stats-base-ztest-alternative-resolve-str/lib/main.js","../node_modules/@stdlib/math-base-special-sqrt/lib/main.js","../node_modules/@stdlib/assert-is-little-endian/lib/main.js","../node_modules/@stdlib/assert-is-little-endian/lib/ctors.js","../node_modules/@stdlib/number-float64-base-get-high-word/lib/high.js","../node_modules/@stdlib/number-float64-base-get-high-word/lib/main.js","../node_modules/@stdlib/number-float64-base-set-high-word/lib/high.js","../node_modules/@stdlib/number-float64-base-set-high-word/lib/main.js","../node_modules/@stdlib/constants-float64-exponent-bias/lib/index.js","../node_modules/@stdlib/math-base-special-ln/lib/main.js","../node_modules/@stdlib/math-base-special-ln/lib/polyval_p.js","../node_modules/@stdlib/math-base-special-ln/lib/polyval_q.js","../node_modules/@stdlib/math-base-special-erfinv/lib/main.js","../node_modules/@stdlib/math-base-special-erfinv/lib/rational_p1q1.js","../node_modules/@stdlib/math-base-special-erfinv/lib/rational_p2q2.js","../node_modules/@stdlib/math-base-special-erfinv/lib/rational_p3q3.js","../node_modules/@stdlib/math-base-special-erfinv/lib/rational_p4q4.js","../node_modules/@stdlib/math-base-special-erfinv/lib/rational_p5q5.js","../node_modules/@stdlib/utils-constant-function/lib/main.js","../node_modules/@stdlib/stats-base-dists-normal-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-degenerate-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-degenerate-quantile/lib/main.js","../node_modules/@stdlib/stats-base-dists-degenerate-quantile/lib/factory.js","../node_modules/@stdlib/stats-base-dists-normal-quantile/lib/index.js","../node_modules/@stdlib/stats-base-dists-normal-quantile/lib/main.js","../node_modules/@stdlib/math-base-special-ceil/lib/main.js","../node_modules/@stdlib/math-base-special-trunc/lib/main.js","../node_modules/@stdlib/constants-float64-max-base2-exponent/lib/index.js","../node_modules/@stdlib/constants-float64-max-base2-exponent-subnormal/lib/index.js","../node_modules/@stdlib/constants-float64-min-base2-exponent-subnormal/lib/index.js","../node_modules/@stdlib/math-base-assert-is-infinite/lib/main.js","../node_modules/@stdlib/constants-float64-high-word-sign-mask/lib/index.js","../node_modules/@stdlib/number-float64-base-to-words/lib/indices.js","../node_modules/@stdlib/constants-float64-high-word-abs-mask/lib/index.js","../node_modules/@stdlib/number-float64-base-from-words/lib/indices.js","../node_modules/@stdlib/number-float64-base-to-words/lib/assign.js","../node_modules/@stdlib/number-float64-base-to-words/lib/main.js","../node_modules/@stdlib/number-float64-base-to-words/lib/index.js","../node_modules/@stdlib/number-float64-base-from-words/lib/main.js","../node_modules/@stdlib/math-base-special-copysign/lib/main.js","../node_modules/@stdlib/constants-float64-smallest-normal/lib/index.js","../node_modules/@stdlib/math-base-special-abs/lib/main.js","../node_modules/@stdlib/number-float64-base-normalize/lib/assign.js","../node_modules/@stdlib/number-float64-base-normalize/lib/index.js","../node_modules/@stdlib/number-float64-base-normalize/lib/main.js","../node_modules/@stdlib/constants-float64-high-word-exponent-mask/lib/index.js","../node_modules/@stdlib/math-base-special-ldexp/lib/main.js","../node_modules/@stdlib/number-float64-base-exponent/lib/main.js","../node_modules/@stdlib/math-base-special-exp/lib/main.js","../node_modules/@stdlib/math-base-special-exp/lib/expmulti.js","../node_modules/@stdlib/math-base-special-exp/lib/polyval_p.js","../node_modules/@stdlib/number-float64-base-set-low-word/lib/low.js","../node_modules/@stdlib/number-float64-base-set-low-word/lib/main.js","../node_modules/@stdlib/math-base-special-erfc/lib/main.js","../node_modules/@stdlib/math-base-special-erfc/lib/polyval_pp.js","../node_modules/@stdlib/math-base-special-erfc/lib/polyval_qq.js","../node_modules/@stdlib/math-base-special-erfc/lib/polyval_pa.js","../node_modules/@stdlib/math-base-special-erfc/lib/polyval_qa.js","../node_modules/@stdlib/math-base-special-erfc/lib/polyval_ra.js","../node_modules/@stdlib/math-base-special-erfc/lib/polyval_sa.js","../node_modules/@stdlib/math-base-special-erfc/lib/polyval_rb.js","../node_modules/@stdlib/math-base-special-erfc/lib/polyval_sb.js","../node_modules/@stdlib/stats-base-dists-degenerate-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-normal-cdf/lib/factory.js","../node_modules/@stdlib/stats-base-dists-degenerate-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-degenerate-cdf/lib/main.js","../node_modules/@stdlib/stats-base-dists-normal-cdf/lib/index.js","../node_modules/@stdlib/stats-base-dists-normal-cdf/lib/main.js","../node_modules/@stdlib/blas-ext-base-dsumpw/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dsumpw/lib/main.js","../node_modules/@stdlib/blas-ext-base-dsumpw/lib/dsumpw.js","../node_modules/@stdlib/blas-ext-base-dapxsumpw/lib/ndarray.js","../node_modules/@stdlib/stats-strided-dmeanpn/lib/ndarray.js","../node_modules/@stdlib/stats-strided-dmeanpn/lib/dmeanpn.js","../node_modules/@stdlib/stats-strided-dmean/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-dapxsumpw/lib/main.js","../node_modules/@stdlib/blas-ext-base-dapxsumpw/lib/dapxsumpw.js","../node_modules/@stdlib/stats-strided-dmeanpn/lib/main.js","../node_modules/@stdlib/stats-strided-dmean/lib/main.js","../node_modules/@stdlib/stats-strided-dmean/lib/dmean.js","../node_modules/@stdlib/stats-strided-dztest/lib/ndarray.js","../node_modules/@stdlib/stats-strided-dztest/lib/main.js","../node_modules/@stdlib/stats-strided-dztest/lib/dztest.js","../node_modules/@stdlib/stats-strided-dztest2/lib/ndarray.js","../node_modules/@stdlib/stats-strided-dztest2/lib/main.js","../node_modules/@stdlib/stats-strided-dztest2/lib/dztest2.js","../node_modules/@stdlib/array-base-setter/lib/main.js","../node_modules/@stdlib/array-base-accessor-setter/lib/main.js","../node_modules/@stdlib/array-base-arraylike2object/lib/main.js","../node_modules/@stdlib/stats-strided-max/lib/ndarray.js","../node_modules/@stdlib/stats-strided-max/lib/accessors.js","../node_modules/@stdlib/stats-strided-max-by/lib/ndarray.js","../node_modules/@stdlib/stats-strided-max-by/lib/accessors.js","../node_modules/@stdlib/stats-strided-min/lib/ndarray.js","../node_modules/@stdlib/stats-strided-min/lib/accessors.js","../node_modules/@stdlib/stats-strided-min-by/lib/ndarray.js","../node_modules/@stdlib/stats-strided-min-by/lib/accessors.js","../node_modules/@stdlib/stats-strided-range/lib/ndarray.js","../node_modules/@stdlib/stats-strided-range/lib/accessors.js","../node_modules/@stdlib/math-base-assert-is-nanf/lib/main.js","../node_modules/@stdlib/stats-strided-max/lib/index.js","../node_modules/@stdlib/stats-strided-max/lib/main.js","../node_modules/@stdlib/stats-strided-max-by/lib/index.js","../node_modules/@stdlib/stats-strided-max-by/lib/main.js","../node_modules/@stdlib/stats-strided-min/lib/index.js","../node_modules/@stdlib/stats-strided-min/lib/main.js","../node_modules/@stdlib/stats-strided-min-by/lib/index.js","../node_modules/@stdlib/stats-strided-min-by/lib/main.js","../node_modules/@stdlib/stats-strided-range/lib/index.js","../node_modules/@stdlib/stats-strided-range/lib/main.js","../node_modules/@stdlib/constants-float32-pinf/lib/index.js","../node_modules/@stdlib/math-base-assert-is-positive-zerof/lib/main.js","../node_modules/@stdlib/stats-strided-scumax/lib/ndarray.js","../node_modules/@stdlib/stats-strided-scumax/lib/main.js","../node_modules/@stdlib/stats-strided-scumax/lib/scumax.js","../node_modules/@stdlib/constants-float32-ninf/lib/index.js","../node_modules/@stdlib/math-base-assert-is-negative-zerof/lib/main.js","../node_modules/@stdlib/stats-strided-scumin/lib/ndarray.js","../node_modules/@stdlib/stats-strided-smax/lib/ndarray.js","../node_modules/@stdlib/stats-strided-smin/lib/ndarray.js","../node_modules/@stdlib/stats-strided-srange/lib/ndarray.js","../node_modules/@stdlib/stats-strided-scumin/lib/main.js","../node_modules/@stdlib/stats-strided-scumin/lib/scumin.js","../node_modules/@stdlib/stats-strided-smax/lib/main.js","../node_modules/@stdlib/stats-strided-smax/lib/smax.js","../node_modules/@stdlib/stats-strided-smin/lib/main.js","../node_modules/@stdlib/stats-strided-smin/lib/smin.js","../node_modules/@stdlib/stats-strided-srange/lib/main.js","../node_modules/@stdlib/stats-strided-srange/lib/srange.js","../node_modules/@stdlib/blas-ext-base-ssumpw/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-ssumpw/lib/main.js","../node_modules/@stdlib/blas-ext-base-ssumpw/lib/ssumpw.js","../node_modules/@stdlib/blas-ext-base-sapxsumpw/lib/ndarray.js","../node_modules/@stdlib/stats-strided-smeanpn/lib/ndarray.js","../node_modules/@stdlib/stats-strided-smeanpn/lib/smeanpn.js","../node_modules/@stdlib/stats-strided-smean/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-sapxsumpw/lib/main.js","../node_modules/@stdlib/blas-ext-base-sapxsumpw/lib/sapxsumpw.js","../node_modules/@stdlib/stats-strided-smeanpn/lib/main.js","../node_modules/@stdlib/stats-strided-smean/lib/main.js","../node_modules/@stdlib/stats-strided-smean/lib/smean.js","../node_modules/@stdlib/stats-strided-sztest/lib/ndarray.js","../node_modules/@stdlib/stats-strided-sztest/lib/main.js","../node_modules/@stdlib/stats-strided-sztest/lib/sztest.js","../node_modules/@stdlib/stats-strided-sztest2/lib/ndarray.js","../node_modules/@stdlib/stats-strided-sztest2/lib/main.js","../node_modules/@stdlib/stats-strided-sztest2/lib/sztest2.js","../node_modules/@stdlib/blas-ext-base-gsumpw/lib/ndarray.js","../node_modules/@stdlib/blas-ext-base-gsumpw/lib/index.js","../node_modules/@stdlib/blas-ext-base-gsumpw/lib/main.js","../node_modules/@stdlib/blas-ext-base-gapxsumpw/lib/ndarray.js","../node_modules/@stdlib/stats-strided-meanpn/lib/ndarray.js","../node_modules/@stdlib/stats-strided-meanpn/lib/accessors.js","../node_modules/@stdlib/stats-strided-meanpn/lib/meanpn.js","../node_modules/@stdlib/blas-ext-base-gapxsumpw/lib/index.js","../node_modules/@stdlib/blas-ext-base-gapxsumpw/lib/main.js","../node_modules/@stdlib/stats-strided-meanpn/lib/main.js","../node_modules/@stdlib/stats-strided-mean/lib/mean.js","../node_modules/@stdlib/stats-strided-mean/lib/main.js","../node_modules/@stdlib/stats-strided-mean/lib/ndarray.js","../node_modules/@stdlib/stats-strided-ztest/lib/ndarray.js","../node_modules/@stdlib/stats-strided-ztest/lib/index.js","../node_modules/@stdlib/stats-strided-ztest/lib/main.js","../node_modules/@stdlib/stats-strided-ztest2/lib/ndarray.js","../node_modules/@stdlib/stats-strided-ztest2/lib/index.js","../node_modules/@stdlib/stats-strided-ztest2/lib/main.js","../lib/index.js","../node_modules/@stdlib/stats-base-ndarray-cumax/lib/main.js","../node_modules/@stdlib/stats-base-ndarray-cumin/lib/main.js","../node_modules/@stdlib/stats-base-ndarray-dcumax/lib/main.js","../node_modules/@stdlib/stats-base-ndarray-dcumin/lib/main.js","../node_modules/@stdlib/stats-base-ndarray-dmax/lib/main.js","../node_modules/@stdlib/stats-base-ndarray-dmin/lib/main.js","../node_modules/@stdlib/stats-base-ndarray-drange/lib/main.js","../node_modules/@stdlib/stats-base-ndarray-dztest/lib/main.js","../node_modules/@stdlib/stats-base-ndarray-dztest2/lib/main.js","../node_modules/@stdlib/stats-base-ndarray-max/lib/main.js","../node_modules/@stdlib/stats-base-ndarray-max-by/lib/main.js","../node_modules/@stdlib/stats-base-ndarray-min/lib/main.js","../node_modules/@stdlib/stats-base-ndarray-min-by/lib/main.js","../node_modules/@stdlib/stats-base-ndarray-range/lib/main.js","../node_modules/@stdlib/stats-base-ndarray-scumax/lib/main.js","../node_modules/@stdlib/stats-base-ndarray-scumin/lib/main.js","../node_modules/@stdlib/stats-base-ndarray-smax/lib/main.js","../node_modules/@stdlib/stats-base-ndarray-smin/lib/main.js","../node_modules/@stdlib/stats-base-ndarray-srange/lib/main.js","../node_modules/@stdlib/stats-base-ndarray-sztest/lib/main.js","../node_modules/@stdlib/stats-base-ndarray-sztest2/lib/main.js","../node_modules/@stdlib/stats-base-ndarray-ztest/lib/main.js","../node_modules/@stdlib/stats-base-ndarray-ztest2/lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Object.defineProperty === 'function' ) ? Object.defineProperty : null;\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Defines (or modifies) an object property.\n*\n* ## Notes\n*\n* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.\n*\n* @name defineProperty\n* @type {Function}\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {Object} descriptor - property descriptor\n* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object\n* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties\n* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator\n* @param {*} [descriptor.value] - property value\n* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.\n* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} third argument must be an object\n* @throws {Error} property descriptor cannot have both a value and a setter and/or getter\n* @returns {Object} object with added property\n*\n* @example\n* var obj = {};\n*\n* defineProperty( obj, 'foo', {\n*     'value': 'bar'\n* });\n*\n* var str = obj.foo;\n* // returns 'bar'\n*/\nvar defineProperty = Object.defineProperty;\n\n\n// EXPORTS //\n\nexport default defineProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a number primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* @example\n* var bool = isNumber( NaN );\n* // returns true\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns false\n*/\nfunction isNumber( value ) {\n\treturn ( typeof value === 'number' );  // NOTE: we inline the `isNumber.isPrimitive` function from `@stdlib/assert/is-number` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Tests if a string starts with a minus sign (`-`).\n*\n* @private\n* @param {string} str - input string\n* @returns {boolean} boolean indicating if a string starts with a minus sign (`-`)\n*/\nfunction startsWithMinus( str ) {\n\treturn str[ 0 ] === '-';\n}\n\n/**\n* Returns a string of `n` zeros.\n*\n* @private\n* @param {number} n - number of zeros\n* @returns {string} string of zeros\n*/\nfunction zeros( n ) {\n\tvar out = '';\n\tvar i;\n\tfor ( i = 0; i < n; i++ ) {\n\t\tout += '0';\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Pads a token with zeros to the specified width.\n*\n* @private\n* @param {string} str - token argument\n* @param {number} width - token width\n* @param {boolean} [right=false] - boolean indicating whether to pad to the right\n* @returns {string} padded token argument\n*/\nfunction zeroPad( str, width, right ) {\n\tvar negative = false;\n\tvar pad = width - str.length;\n\tif ( pad < 0 ) {\n\t\treturn str;\n\t}\n\tif ( startsWithMinus( str ) ) {\n\t\tnegative = true;\n\t\tstr = str.substr( 1 );\n\t}\n\tstr = ( right ) ?\n\t\tstr + zeros( pad ) :\n\t\tzeros( pad ) + str;\n\tif ( negative ) {\n\t\tstr = '-' + str;\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default zeroPad;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNumber from './is_number.js';\nimport zeroPad from './zero_pad.js';\n\n// NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.\nvar lowercase = String.prototype.toLowerCase;\nvar uppercase = String.prototype.toUpperCase;\n\n\n// MAIN //\n\n/**\n* Formats a token object argument as an integer.\n*\n* @private\n* @param {Object} token - token object\n* @throws {Error} must provide a valid integer\n* @returns {string} formatted token argument\n*/\nfunction formatInteger( token ) {\n\tvar base;\n\tvar out;\n\tvar i;\n\n\tswitch ( token.specifier ) {\n\tcase 'b':\n\t\t// Case: %b (binary)\n\t\tbase = 2;\n\t\tbreak;\n\tcase 'o':\n\t\t// Case: %o (octal)\n\t\tbase = 8;\n\t\tbreak;\n\tcase 'x':\n\tcase 'X':\n\t\t// Case: %x, %X (hexadecimal)\n\t\tbase = 16;\n\t\tbreak;\n\tcase 'd':\n\tcase 'i':\n\tcase 'u':\n\tdefault:\n\t\t// Case: %d, %i, %u (decimal)\n\t\tbase = 10;\n\t\tbreak;\n\t}\n\tout = token.arg;\n\ti = parseInt( out, 10 );\n\tif ( !isFinite( i ) ) { // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.\n\t\tif ( !isNumber( out ) ) {\n\t\t\tthrow new Error( 'invalid integer. Value: ' + out );\n\t\t}\n\t\ti = 0;\n\t}\n\tif ( i < 0 && ( token.specifier === 'u' || base !== 10 ) ) {\n\t\ti = 0xffffffff + i + 1;\n\t}\n\tif ( i < 0 ) {\n\t\tout = ( -i ).toString( base );\n\t\tif ( token.precision ) {\n\t\t\tout = zeroPad( out, token.precision, token.padRight );\n\t\t}\n\t\tout = '-' + out;\n\t} else {\n\t\tout = i.toString( base );\n\t\tif ( !i && !token.precision ) {\n\t\t\tout = '';\n\t\t} else if ( token.precision ) {\n\t\t\tout = zeroPad( out, token.precision, token.padRight );\n\t\t}\n\t\tif ( token.sign ) {\n\t\t\tout = token.sign + out;\n\t\t}\n\t}\n\tif ( base === 16 ) {\n\t\tif ( token.alternate ) {\n\t\t\tout = '0x' + out;\n\t\t}\n\t\tout = ( token.specifier === uppercase.call( token.specifier ) ) ?\n\t\t\tuppercase.call( out ) :\n\t\t\tlowercase.call( out );\n\t}\n\tif ( base === 8 ) {\n\t\tif ( token.alternate && out.charAt( 0 ) !== '0' ) {\n\t\t\tout = '0' + out;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNumber from './is_number.js';\n\n// NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.\nvar abs = Math.abs; // eslint-disable-line stdlib/no-builtin-math\nvar lowercase = String.prototype.toLowerCase;\nvar uppercase = String.prototype.toUpperCase;\nvar replace = String.prototype.replace;\n\n\n// VARIABLES //\n\nvar RE_EXP_POS_DIGITS = /e\\+(\\d)$/;\nvar RE_EXP_NEG_DIGITS = /e-(\\d)$/;\nvar RE_ONLY_DIGITS = /^(\\d+)$/;\nvar RE_DIGITS_BEFORE_EXP = /^(\\d+)e/;\nvar RE_TRAILING_PERIOD_ZERO = /\\.0$/;\nvar RE_PERIOD_ZERO_EXP = /\\.0*e/;\nvar RE_ZERO_BEFORE_EXP = /(\\..*[^0])0*e/;\n\n\n// MAIN //\n\n/**\n* Formats a token object argument as a floating-point number.\n*\n* @private\n* @param {Object} token - token object\n* @throws {Error} must provide a valid floating-point number\n* @returns {string} formatted token argument\n*/\nfunction formatDouble( token ) {\n\tvar digits;\n\tvar out;\n\tvar f = parseFloat( token.arg );\n\tif ( !isFinite( f ) ) { // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.\n\t\tif ( !isNumber( token.arg ) ) {\n\t\t\tthrow new Error( 'invalid floating-point number. Value: ' + out );\n\t\t}\n\t\t// Case: NaN, Infinity, or -Infinity\n\t\tf = token.arg;\n\t}\n\tswitch ( token.specifier ) {\n\tcase 'e':\n\tcase 'E':\n\t\tout = f.toExponential( token.precision );\n\t\tbreak;\n\tcase 'f':\n\tcase 'F':\n\t\tout = f.toFixed( token.precision );\n\t\tbreak;\n\tcase 'g':\n\tcase 'G':\n\t\tif ( abs( f ) < 0.0001 ) {\n\t\t\tdigits = token.precision;\n\t\t\tif ( digits > 0 ) {\n\t\t\t\tdigits -= 1;\n\t\t\t}\n\t\t\tout = f.toExponential( digits );\n\t\t} else {\n\t\t\tout = f.toPrecision( token.precision );\n\t\t}\n\t\tif ( !token.alternate ) {\n\t\t\tout = replace.call( out, RE_ZERO_BEFORE_EXP, '$1e' );\n\t\t\tout = replace.call( out, RE_PERIOD_ZERO_EXP, 'e' );\n\t\t\tout = replace.call( out, RE_TRAILING_PERIOD_ZERO, '' );\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( 'invalid double notation. Value: ' + token.specifier );\n\t}\n\tout = replace.call( out, RE_EXP_POS_DIGITS, 'e+0$1' );\n\tout = replace.call( out, RE_EXP_NEG_DIGITS, 'e-0$1' );\n\tif ( token.alternate ) {\n\t\tout = replace.call( out, RE_ONLY_DIGITS, '$1.' );\n\t\tout = replace.call( out, RE_DIGITS_BEFORE_EXP, '$1.e' );\n\t}\n\tif ( f >= 0 && token.sign ) {\n\t\tout = token.sign + out;\n\t}\n\tout = ( token.specifier === uppercase.call( token.specifier ) ) ?\n\t\tuppercase.call( out ) :\n\t\tlowercase.call( out );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatDouble;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Returns `n` spaces.\n*\n* @private\n* @param {number} n - number of spaces\n* @returns {string} string of spaces\n*/\nfunction spaces( n ) {\n\tvar out = '';\n\tvar i;\n\tfor ( i = 0; i < n; i++ ) {\n\t\tout += ' ';\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Pads a token with spaces to the specified width.\n*\n* @private\n* @param {string} str - token argument\n* @param {number} width - token width\n* @param {boolean} [right=false] - boolean indicating whether to pad to the right\n* @returns {string} padded token argument\n*/\nfunction spacePad( str, width, right ) {\n\tvar pad = width - str.length;\n\tif ( pad < 0 ) {\n\t\treturn str;\n\t}\n\tstr = ( right ) ?\n\t\tstr + spaces( pad ) :\n\t\tspaces( pad ) + str;\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default spacePad;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport formatInteger from './format_integer.js';\nimport isString from './is_string.js';\nimport formatDouble from './format_double.js';\nimport spacePad from './space_pad.js';\nimport zeroPad from './zero_pad.js';\n\n\n// VARIABLES //\n\nvar fromCharCode = String.fromCharCode;\nvar isArray = Array.isArray; // NOTE: We use the global `Array.isArray` function here instead of `@stdlib/assert/is-array` to avoid circular dependencies.\n\n\n// FUNCTIONS //\n\n/**\n* Returns a boolean indicating whether a value is `NaN`.\n*\n* @private\n* @param {*} value - input value\n* @returns {boolean} boolean indicating whether a value is `NaN`\n*\n* @example\n* var bool = isnan( NaN );\n* // returns true\n*\n* @example\n* var bool = isnan( 4 );\n* // returns false\n*/\nfunction isnan( value ) { // explicitly define a function here instead of `@stdlib/math/base/assert/is-nan` in order to avoid circular dependencies\n\treturn ( value !== value );\n}\n\n/**\n* Initializes token object with properties of supplied format identifier object or default values if not present.\n*\n* @private\n* @param {Object} token - format identifier object\n* @returns {Object} token object\n*/\nfunction initialize( token ) {\n\tvar out = {};\n\tout.specifier = token.specifier;\n\tout.precision = ( token.precision === void 0 ) ? 1 : token.precision;\n\tout.width = token.width;\n\tout.flags = token.flags || '';\n\tout.mapping = token.mapping;\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Generates string from a token array by interpolating values.\n*\n* @param {Array} tokens - string parts and format identifier objects\n* @param {Array} ...args - variable values\n* @throws {TypeError} first argument must be an array\n* @throws {Error} invalid flags\n* @returns {string} formatted string\n*\n* @example\n* var tokens = [ 'beep ', { 'specifier': 's' } ];\n* var out = formatInterpolate( tokens, 'boop' );\n* // returns 'beep boop'\n*/\nfunction formatInterpolate( tokens ) {\n\tvar hasPeriod;\n\tvar flags;\n\tvar token;\n\tvar flag;\n\tvar num;\n\tvar out;\n\tvar pos;\n\tvar i;\n\tvar j;\n\n\tif ( !isArray( tokens ) ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an array. Value: `' + tokens + '`.' );\n\t}\n\tout = '';\n\tpos = 1;\n\tfor ( i = 0; i < tokens.length; i++ ) {\n\t\ttoken = tokens[ i ];\n\t\tif ( isString( token ) ) {\n\t\t\tout += token;\n\t\t} else {\n\t\t\thasPeriod = token.precision !== void 0;\n\t\t\ttoken = initialize( token );\n\t\t\tif ( !token.specifier ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Token is missing `specifier` property. Index: `'+ i +'`. Value: `' + token + '`.' );\n\t\t\t}\n\t\t\tif ( token.mapping ) {\n\t\t\t\tpos = token.mapping;\n\t\t\t}\n\t\t\tflags = token.flags;\n\t\t\tfor ( j = 0; j < flags.length; j++ ) {\n\t\t\t\tflag = flags.charAt( j );\n\t\t\t\tswitch ( flag ) {\n\t\t\t\tcase ' ':\n\t\t\t\t\ttoken.sign = ' ';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '+':\n\t\t\t\t\ttoken.sign = '+';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '-':\n\t\t\t\t\ttoken.padRight = true;\n\t\t\t\t\ttoken.padZeros = false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '0':\n\t\t\t\t\ttoken.padZeros = flags.indexOf( '-' ) < 0; // NOTE: We use built-in `Array.prototype.indexOf` here instead of `@stdlib/assert/contains` in order to avoid circular dependencies.\n\t\t\t\t\tbreak;\n\t\t\t\tcase '#':\n\t\t\t\t\ttoken.alternate = true;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'invalid flag: ' + flag );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( token.width === '*' ) {\n\t\t\t\ttoken.width = parseInt( arguments[ pos ], 10 );\n\t\t\t\tpos += 1;\n\t\t\t\tif ( isnan( token.width ) ) {\n\t\t\t\t\tthrow new TypeError( 'the argument for * width at position ' + pos + ' is not a number. Value: `' + token.width + '`.' );\n\t\t\t\t}\n\t\t\t\tif ( token.width < 0 ) {\n\t\t\t\t\ttoken.padRight = true;\n\t\t\t\t\ttoken.width = -token.width;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( hasPeriod ) {\n\t\t\t\tif ( token.precision === '*' ) {\n\t\t\t\t\ttoken.precision = parseInt( arguments[ pos ], 10 );\n\t\t\t\t\tpos += 1;\n\t\t\t\t\tif ( isnan( token.precision ) ) {\n\t\t\t\t\t\tthrow new TypeError( 'the argument for * precision at position ' + pos + ' is not a number. Value: `' + token.precision + '`.' );\n\t\t\t\t\t}\n\t\t\t\t\tif ( token.precision < 0 ) {\n\t\t\t\t\t\ttoken.precision = 1;\n\t\t\t\t\t\thasPeriod = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ttoken.arg = arguments[ pos ];\n\t\t\tswitch ( token.specifier ) {\n\t\t\tcase 'b':\n\t\t\tcase 'o':\n\t\t\tcase 'x':\n\t\t\tcase 'X':\n\t\t\tcase 'd':\n\t\t\tcase 'i':\n\t\t\tcase 'u':\n\t\t\t\t// Case: %b (binary), %o (octal), %x, %X (hexadecimal), %d, %i (decimal), %u (unsigned decimal)\n\t\t\t\tif ( hasPeriod ) {\n\t\t\t\t\ttoken.padZeros = false;\n\t\t\t\t}\n\t\t\t\ttoken.arg = formatInteger( token );\n\t\t\t\tbreak;\n\t\t\tcase 's':\n\t\t\t\t// Case: %s (string)\n\t\t\t\ttoken.maxWidth = ( hasPeriod ) ? token.precision : -1;\n\t\t\t\ttoken.arg = String( token.arg );\n\t\t\t\tbreak;\n\t\t\tcase 'c':\n\t\t\t\t// Case: %c (character)\n\t\t\t\tif ( !isnan( token.arg ) ) {\n\t\t\t\t\tnum = parseInt( token.arg, 10 );\n\t\t\t\t\tif ( num < 0 || num > 127 ) {\n\t\t\t\t\t\tthrow new Error( 'invalid character code. Value: ' + token.arg );\n\t\t\t\t\t}\n\t\t\t\t\ttoken.arg = ( isnan( num ) ) ? String( token.arg ) : fromCharCode( num ); // eslint-disable-line max-len\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'e':\n\t\t\tcase 'E':\n\t\t\tcase 'f':\n\t\t\tcase 'F':\n\t\t\tcase 'g':\n\t\t\tcase 'G':\n\t\t\t\t// Case: %e, %E (scientific notation), %f, %F (decimal floating point), %g, %G (uses the shorter of %e/E or %f/F)\n\t\t\t\tif ( !hasPeriod ) {\n\t\t\t\t\ttoken.precision = 6;\n\t\t\t\t}\n\t\t\t\ttoken.arg = formatDouble( token );\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'invalid specifier: ' + token.specifier );\n\t\t\t}\n\t\t\t// Fit argument into field width...\n\t\t\tif ( token.maxWidth >= 0 && token.arg.length > token.maxWidth ) {\n\t\t\t\ttoken.arg = token.arg.substring( 0, token.maxWidth );\n\t\t\t}\n\t\t\tif ( token.padZeros ) {\n\t\t\t\ttoken.arg = zeroPad( token.arg, token.width || token.precision, token.padRight ); // eslint-disable-line max-len\n\t\t\t} else if ( token.width ) {\n\t\t\t\ttoken.arg = spacePad( token.arg, token.width, token.padRight );\n\t\t\t}\n\t\t\tout += token.arg || '';\n\t\t\tpos += 1;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default formatInterpolate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a string primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a string primitive\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns true\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns false\n*/\nfunction isString( value ) {\n\treturn ( typeof value === 'string' ); // NOTE: we inline the `isString.isPrimitive` function from `@stdlib/assert/is-string` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar RE = /%(?:([1-9]\\d*)\\$)?([0 +\\-#]*)(\\*|\\d+)?(?:(\\.)(\\*|\\d+)?)?[hlL]?([%A-Za-z])/g;\n\n\n// FUNCTIONS //\n\n/**\n* Parses a delimiter.\n*\n* @private\n* @param {Array} match - regular expression match\n* @returns {Object} delimiter token object\n*/\nfunction parse( match ) {\n\tvar token = {\n\t\t'mapping': ( match[ 1 ] ) ? parseInt( match[ 1 ], 10 ) : void 0,\n\t\t'flags': match[ 2 ],\n\t\t'width': match[ 3 ],\n\t\t'precision': match[ 5 ],\n\t\t'specifier': match[ 6 ]\n\t};\n\tif ( match[ 4 ] === '.' && match[ 5 ] === void 0 ) {\n\t\ttoken.precision = '1';\n\t}\n\treturn token;\n}\n\n\n// MAIN //\n\n/**\n* Tokenizes a string into an array of string parts and format identifier objects.\n*\n* @param {string} str - input string\n* @returns {Array} tokens\n*\n* @example\n* var tokens = formatTokenize( 'Hello %s!' );\n* // returns [ 'Hello ', {...}, '!' ]\n*/\nfunction formatTokenize( str ) {\n\tvar content;\n\tvar tokens;\n\tvar match;\n\tvar prev;\n\n\ttokens = [];\n\tprev = 0;\n\tmatch = RE.exec( str );\n\twhile ( match ) {\n\t\tcontent = str.slice( prev, RE.lastIndex - match[ 0 ].length );\n\t\tif ( content.length ) {\n\t\t\ttokens.push( content );\n\t\t}\n\t\ttokens.push( parse( match ) );\n\t\tprev = RE.lastIndex;\n\t\tmatch = RE.exec( str );\n\t}\n\tcontent = str.slice( prev );\n\tif ( content.length ) {\n\t\ttokens.push( content );\n\t}\n\treturn tokens;\n}\n\n\n// EXPORTS //\n\nexport default formatTokenize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport interpolate from '@stdlib/string-base-format-interpolate';\nimport tokenize from '@stdlib/string-base-format-tokenize';\nimport isString from './is_string.js';\n\n\n// MAIN //\n\n/**\n* Inserts supplied variable values into a format string.\n*\n* @param {string} str - input string\n* @param {Array} ...args - variable values\n* @throws {TypeError} first argument must be a string\n* @throws {Error} invalid flags\n* @returns {string} formatted string\n*\n* @example\n* var str = format( 'Hello %s!', 'world' );\n* // returns 'Hello world!'\n*\n* @example\n* var str = format( 'Pi: ~%.2f', 3.141592653589793 );\n* // returns 'Pi: ~3.14'\n*/\nfunction format( str ) {\n\tvar args;\n\tvar i;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\targs = [ tokenize( str ) ];\n\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\targs.push( arguments[ i ] );\n\t}\n\treturn interpolate.apply( null, args );\n}\n\n\n// EXPORTS //\n\nexport default format;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a string primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a string primitive\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns true\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns false\n*/\nfunction isString( value ) {\n\treturn ( typeof value === 'string' ); // NOTE: we inline the `isString.isPrimitive` function from `@stdlib/assert/is-string` in order to avoid circular dependencies.\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle, no-proto */\n\n'use strict';\n\n// MODULES //\n\nimport format from '@stdlib/string-format';\n\n\n// VARIABLES //\n\nvar objectProtoype = Object.prototype;\nvar toStr = objectProtoype.toString;\nvar defineGetter = objectProtoype.__defineGetter__;\nvar defineSetter = objectProtoype.__defineSetter__;\nvar lookupGetter = objectProtoype.__lookupGetter__;\nvar lookupSetter = objectProtoype.__lookupSetter__;\n\n\n// MAIN //\n\n/**\n* Defines (or modifies) an object property.\n*\n* ## Notes\n*\n* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.\n*\n* @param {Object} obj - object on which to define the property\n* @param {string} prop - property name\n* @param {Object} descriptor - property descriptor\n* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object\n* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties\n* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator\n* @param {*} [descriptor.value] - property value\n* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.\n* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} third argument must be an object\n* @throws {Error} property descriptor cannot have both a value and a setter and/or getter\n* @returns {Object} object with added property\n*\n* @example\n* var obj = {};\n*\n* defineProperty( obj, 'foo', {\n*     'value': 'bar'\n* });\n*\n* var str = obj.foo;\n* // returns 'bar'\n*/\nfunction defineProperty( obj, prop, descriptor ) {\n\tvar prototype;\n\tvar hasValue;\n\tvar hasGet;\n\tvar hasSet;\n\n\tif ( typeof obj !== 'object' || obj === null || toStr.call( obj ) === '[object Array]' ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object. Value: `%s`.', obj ) );\n\t}\n\tif ( typeof descriptor !== 'object' || descriptor === null || toStr.call( descriptor ) === '[object Array]' ) {\n\t\tthrow new TypeError( format( 'invalid argument. Property descriptor must be an object. Value: `%s`.', descriptor ) );\n\t}\n\thasValue = ( 'value' in descriptor );\n\tif ( hasValue ) {\n\t\tif (\n\t\t\tlookupGetter.call( obj, prop ) ||\n\t\t\tlookupSetter.call( obj, prop )\n\t\t) {\n\t\t\t// Override `__proto__` to avoid touching inherited accessors:\n\t\t\tprototype = obj.__proto__;\n\t\t\tobj.__proto__ = objectProtoype;\n\n\t\t\t// Delete property as existing getters/setters prevent assigning value to specified property:\n\t\t\tdelete obj[ prop ];\n\t\t\tobj[ prop ] = descriptor.value;\n\n\t\t\t// Restore original prototype:\n\t\t\tobj.__proto__ = prototype;\n\t\t} else {\n\t\t\tobj[ prop ] = descriptor.value;\n\t\t}\n\t}\n\thasGet = ( 'get' in descriptor );\n\thasSet = ( 'set' in descriptor );\n\n\tif ( hasValue && ( hasGet || hasSet ) ) {\n\t\tthrow new Error( 'invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.' );\n\t}\n\n\tif ( hasGet && defineGetter ) {\n\t\tdefineGetter.call( obj, prop, descriptor.get );\n\t}\n\tif ( hasSet && defineSetter ) {\n\t\tdefineSetter.call( obj, prop, descriptor.set );\n\t}\n\treturn obj;\n}\n\n\n// EXPORTS //\n\nexport default defineProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Define (or modify) an object property.\n*\n* @module @stdlib/utils-define-property\n*\n* @example\n* import defineProperty from '@stdlib/utils-define-property';\n*\n* var obj = {};\n* defineProperty( obj, 'foo', {\n*     'value': 'bar',\n*     'writable': false,\n*     'configurable': false,\n*     'enumerable': false\n* });\n* obj.foo = 'boop'; // => throws\n*/\n\n// MODULES //\n\nimport hasDefinePropertySupport from './has_define_property_support.js';\nimport builtin from './builtin.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar defineProperty;\nif ( hasDefinePropertySupport() ) {\n\tdefineProperty = builtin;\n} else {\n\tdefineProperty = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default defineProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from './define_property.js';\n\n\n// MAIN //\n\n/**\n* Tests for `Object.defineProperty` support.\n*\n* @private\n* @returns {boolean} boolean indicating if an environment has `Object.defineProperty` support\n*\n* @example\n* var bool = hasDefinePropertySupport();\n* // returns <boolean>\n*/\nfunction hasDefinePropertySupport() {\n\t// Test basic support...\n\ttry {\n\t\tdefineProperty( {}, 'x', {} );\n\t\treturn true;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default hasDefinePropertySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\n\n\n// MAIN //\n\n/**\n* Defines a read-only property.\n*\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {*} value - value to set\n*\n* @example\n* var obj = {};\n*\n* setReadOnly( obj, 'foo', 'bar' );\n*\n* try {\n*     obj.foo = 'boop';\n* } catch ( err ) {\n*     console.error( err.message );\n* }\n*/\nfunction setReadOnly( obj, prop, value ) {\n\tdefineProperty( obj, prop, {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': value\n\t});\n}\n\n\n// EXPORTS //\n\nexport default setReadOnly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Normalizes an index to the interval `[0,max]`.\n*\n* @param {integer} idx - index\n* @param {NonNegativeInteger} max - maximum index\n* @returns {integer} index\n*\n* @example\n* var idx = normalizeIndex( -2, 10 );\n* // returns 9\n*\n* idx = normalizeIndex( 15, 10 );\n* // returns -1\n*\n* idx = normalizeIndex( 5, 10 );\n* // returns 5\n*/\nfunction normalizeIndex( idx, max ) {\n\tif ( idx < 0 ) {\n\t\tidx += max + 1;\n\t\tif ( idx < 0 ) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn idx;\n\t}\n\tif ( idx > max ) {\n\t\treturn -1;\n\t}\n\treturn idx;\n}\n\n\n// EXPORTS //\n\nexport default normalizeIndex;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the number of ndarray dimensions.\n*\n* @param {ndarrayLike} x - input ndarray\n* @returns {NonNegativeInteger} number of dimensions\n*\n* @example\n* import zeros from '@stdlib/ndarray-zeros';\n*\n* var n = ndims( zeros( [ 3, 3, 3 ] ) );\n* // returns 3\n*/\nfunction ndims( x ) {\n\tvar n = x.ndims; // Note: intentionally cache in case `ndims` is lazily resolved via accessor\n\tif ( typeof n === 'number' ) {\n\t\treturn n;\n\t}\n\treturn x.shape.length;\n}\n\n\n// EXPORTS //\n\nexport default ndims;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Copies the elements of an indexed array-like object to a new \"generic\" array.\n*\n* @param {Collection} x - input array\n* @returns {Array} output array\n*\n* @example\n* var out = copy( [ 1, 2, 3 ] );\n* // returns [ 1, 2, 3 ]\n*/\nfunction copy( x ) {\n\tvar out;\n\tvar len;\n\tvar i;\n\n\tlen = x.length;\n\tout = [];\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout.push( x[ i ] ); // use `Array#push` to ensure \"fast\" elements\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default copy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport normalizeIndex from '@stdlib/ndarray-base-normalize-index';\nimport ndims from '@stdlib/ndarray-base-ndims';\nimport getShape from '@stdlib/ndarray-base-shape';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Returns the size (i.e., number of elements) of a specified dimension for a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @param {integer} dim - dimension index\n* @throws {TypeError} first argument must be an ndarray having one or more dimensions\n* @throws {RangeError} dimension index exceeds the number of dimensions\n* @returns {NonNegativeInteger} dimension size\n*\n* @example\n* import zeros from '@stdlib/ndarray-zeros';\n*\n* var out = numelDimension( zeros( [ 4, 2, 3 ] ), 0 );\n* // returns 4\n*/\nfunction numelDimension( x, dim ) {\n\tvar N;\n\tvar d;\n\n\t// Retrieve array meta data:\n\tN = ndims( x );\n\n\t// Check whether we were provided a zero-dimensional array...\n\tif ( N === 0 ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray having one or more dimensions. Number of dimensions: %d.', N ) );\n\t}\n\t// Normalize the dimension index:\n\td = normalizeIndex( dim, N-1 );\n\tif ( d === -1 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Dimension index exceeds the number of dimensions. Number of dimensions: %d. Value: `%d`.', N, dim ) );\n\t}\n\t// Return the dimension size:\n\treturn getShape( x, false )[ d ];\n}\n\n\n// EXPORTS //\n\nexport default numelDimension;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\n\n\n// MAIN //\n\n/**\n* Returns the shape of a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @param {boolean} copy - boolean indicating whether to explicitly copy the value assigned to the input ndarray's `shape` property\n* @returns {NonNegativeIntegerArray} shape\n*\n* @example\n* import zeros from '@stdlib/ndarray-zeros';\n*\n* var out = shape( zeros( [ 3, 3, 3 ] ), false );\n* // returns [ 3, 3, 3 ]\n*/\nfunction shape( x, copy ) {\n\tvar sh = x.shape;\n\tif ( copy ) {\n\t\treturn copyIndexed( sh );\n\t}\n\treturn sh;\n}\n\n\n// EXPORTS //\n\nexport default shape;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\n\n\n// MAIN //\n\n/**\n* Defines a non-enumerable read-only property.\n*\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {*} value - value to set\n*\n* @example\n* var obj = {};\n*\n* setNonEnumerableReadOnly( obj, 'foo', 'bar' );\n*\n* try {\n*     obj.foo = 'boop';\n* } catch ( err ) {\n*     console.error( err.message );\n* }\n*/\nfunction setNonEnumerableReadOnly( obj, prop, value ) {\n\tdefineProperty( obj, prop, {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': false,\n\t\t'value': value\n\t});\n}\n\n\n// EXPORTS //\n\nexport default setNonEnumerableReadOnly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Generates a stride array from an array shape (row-major).\n*\n* @private\n* @param {NonNegativeIntegerArray} shape - array shape\n* @returns {Array} array strides\n*/\nfunction rowmajor( shape ) {\n\tvar ndims;\n\tvar out;\n\tvar s;\n\tvar i;\n\n\tndims = shape.length;\n\tout = [];\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tout.push( 0 );\n\t}\n\ts = 1;\n\tfor ( i = ndims-1; i >= 0; i-- ) {\n\t\tout[ i ] = s;\n\t\ts *= shape[ i ];\n\t}\n\treturn out;\n}\n\n/**\n* Generates a stride array from an array shape (column-major).\n*\n* @private\n* @param {NonNegativeIntegerArray} shape - array shape\n* @returns {Array} array strides\n*/\nfunction columnmajor( shape ) {\n\tvar out;\n\tvar s;\n\tvar i;\n\n\tout = [];\n\ts = 1;\n\tfor ( i = 0; i < shape.length; i++ ) {\n\t\tout.push( s );\n\t\ts *= shape[ i ];\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Generates a stride array from an array shape.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @returns {Array} array strides\n*\n* @example\n* var s = shape2strides( [ 3, 2 ], 'row-major' );\n* // returns [ 2, 1 ]\n*\n* s = shape2strides( [ 3, 2 ], 'column-major' );\n* // returns [ 1, 3 ]\n*/\nfunction shape2strides( shape, order ) {\n\tif ( order === 'column-major' ) {\n\t\treturn columnmajor( shape );\n\t}\n\treturn rowmajor( shape );\n}\n\n\n// EXPORTS //\n\nexport default shape2strides;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Generate a stride array from an array shape.\n*\n* @module @stdlib/ndarray-base-shape2strides\n*\n* @example\n* import shape2strides from '@stdlib/ndarray-base-shape2strides';\n*\n* var strides = shape2strides( [ 3, 2 ], 'row-major' );\n* // returns [ 2, 1 ]\n*\n* strides = shape2strides( [ 3, 2 ], 'column-major' );\n* // returns [ 1, 3 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Generates a stride array from an array shape (row-major).\n*\n* @private\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {(Array|TypedArray|Object)} out - output object\n* @returns {(Array|TypedArray|Object)} array strides\n*/\nfunction rowmajor( shape, out ) {\n\tvar ndims;\n\tvar s;\n\tvar i;\n\n\tndims = shape.length;\n\ts = 1;\n\tfor ( i = ndims-1; i >= 0; i-- ) {\n\t\tout[ i ] = s;\n\t\ts *= shape[ i ];\n\t}\n\treturn out;\n}\n\n/**\n* Generates a stride array from an array shape (column-major).\n*\n* @private\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {(Array|TypedArray|Object)} out - output object\n* @returns {(Array|TypedArray|Object)} array strides\n*/\nfunction columnmajor( shape, out ) {\n\tvar s;\n\tvar i;\n\n\ts = 1;\n\tfor ( i = 0; i < shape.length; i++ ) {\n\t\tout[ i ] = s;\n\t\ts *= shape[ i ];\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Generates a stride array from an array shape.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @param {(Array|TypedArray|Object)} out - output object\n* @returns {(Array|TypedArray|Object)} array strides\n*\n* @example\n* var strides = [ 0, 0 ];\n*\n* var out = shape2strides( [ 3, 2 ], 'row-major', strides );\n* // returns [ 2, 1 ]\n*\n* var bool = ( out === strides );\n* // returns true\n*\n* out = shape2strides( [ 3, 2 ], 'column-major', strides );\n* // returns [ 1, 3 ]\n*/\nfunction shape2strides( shape, order, out ) {\n\tif ( order === 'column-major' ) {\n\t\treturn columnmajor( shape, out );\n\t}\n\treturn rowmajor( shape, out );\n}\n\n\n// EXPORTS //\n\nexport default shape2strides;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport shape2strides from '@stdlib/ndarray-base-shape2strides';\nimport copyIndexed from '@stdlib/array-base-copy-indexed';\n\n\n// VARIABLES //\n\nvar ROW_MAJOR = 'row-major';\n\n\n// MAIN //\n\n/**\n* Returns the strides of a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @param {boolean} copy - boolean indicating whether to explicitly copy the value assigned to the input ndarray's `strides` property\n* @returns {IntegerArray} strides\n*\n* @example\n* import zeros from '@stdlib/ndarray-zeros';\n*\n* var out = strides( zeros( [ 3, 3, 3 ] ), false );\n* // returns [ 9, 3, 1 ]\n*/\nfunction strides( x, copy ) {\n\tvar ord;\n\tvar sh;\n\tvar st;\n\n\tst = x.strides;\n\tif ( typeof st !== 'object' || st === null ) {\n\t\tsh = x.shape;\n\t\tif ( sh.length === 0 ) {\n\t\t\treturn [ 0 ];\n\t\t}\n\t\tord = x.order;\n\t\tif ( typeof ord !== 'string' ) {\n\t\t\tord = ROW_MAJOR;\n\t\t}\n\t\treturn shape2strides( sh, ord );\n\t}\n\tif ( copy ) {\n\t\treturn copyIndexed( st );\n\t}\n\treturn st;\n}\n\n\n// EXPORTS //\n\nexport default strides;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport normalizeIndex from '@stdlib/ndarray-base-normalize-index';\nimport ndims from '@stdlib/ndarray-base-ndims';\nimport getStrides from '@stdlib/ndarray-base-strides';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Returns the stride along a specified dimension for a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @param {integer} dim - dimension index\n* @throws {TypeError} first argument must be an ndarray having one or more dimensions\n* @throws {RangeError} dimension index exceeds the number of dimensions\n* @returns {integer} stride\n*\n* @example\n* import zeros from '@stdlib/ndarray-zeros';\n*\n* var out = stride( zeros( [ 3, 3, 3 ] ), 0 );\n* // returns 9\n*/\nfunction stride( x, dim ) {\n\tvar N;\n\tvar d;\n\n\t// Retrieve array meta data:\n\tN = ndims( x );\n\n\t// Check whether we were provided a zero-dimensional array...\n\tif ( N === 0 ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray having one or more dimensions. Number of dimensions: %d.', N ) );\n\t}\n\t// Normalize the dimension index:\n\td = normalizeIndex( dim, N-1 );\n\tif ( d === -1 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Dimension index exceeds the number of dimensions. Number of dimensions: %d. Value: `%d`.', N, dim ) );\n\t}\n\t// Return the array stride:\n\treturn getStrides( x, false )[ d ];\n}\n\n\n// EXPORTS //\n\nexport default stride;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport strides2offset from '@stdlib/ndarray-base-strides2offset';\n\n\n// MAIN //\n\n/**\n* Returns the index offset specifying the underlying buffer index of the first iterated ndarray element.\n*\n* @param {ndarrayLike} x - input ndarray\n* @returns {NonNegativeInteger} index offset\n*\n* @example\n* import zeros from '@stdlib/ndarray-zeros';\n*\n* var n = offset( zeros( [ 3, 3, 3 ] ) );\n* // returns 0\n*/\nfunction offset( x ) {\n\tvar st;\n\tvar sh;\n\tvar o;\n\n\to = x.offset;\n\tif ( typeof o === 'number' ) {\n\t\treturn o;\n\t}\n\tsh = x.shape;\n\tif ( sh.length === 0 ) {\n\t\treturn 0;\n\t}\n\tst = x.strides;\n\tif ( typeof st !== 'object' || st === null ) {\n\t\treturn 0;\n\t}\n\treturn strides2offset( sh, st );\n}\n\n\n// EXPORTS //\n\nexport default offset;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the index offset which specifies the location of the first indexed value in a multidimensional array based on a stride array.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - stride array\n* @returns {NonNegativeInteger} offset - offset\n*\n* @example\n* var shape = [ 2, 3, 10 ];\n* var strides = [ 30, -10, 1 ];\n*\n* var offset = strides2offset( shape, strides );\n* // returns 20\n*/\nfunction strides2offset( shape, strides ) {\n\tvar offset;\n\tvar ndims;\n\tvar i;\n\n\tndims = shape.length;\n\toffset = 0;\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tif ( strides[ i ] < 0 ) {\n\t\t\t// Note that, since the stride is negative, this operation increments, not decrements, the offset...\n\t\t\toffset -= strides[ i ] * ( shape[ i ]-1 );\n\t\t}\n\t}\n\treturn offset;\n}\n\n\n// EXPORTS //\n\nexport default strides2offset;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the underlying data buffer of a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @returns {Collection} underlying data buffer\n*\n* @example\n* import zeros from '@stdlib/ndarray-zeros';\n*\n* var x = zeros( [ 3, 3, 3 ], {\n*     'dtype': 'float64'\n* });\n*\n* var out = data( x );\n* // returns <Float64Array>\n*/\nfunction data( x ) {\n\treturn x.data;\n}\n\n\n// EXPORTS //\n\nexport default data;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is `NaN`.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is `NaN`\n*\n* @example\n* var bool = isnan( NaN );\n* // returns true\n*\n* @example\n* var bool = isnan( 7.0 );\n* // returns false\n*/\nfunction isnan( x ) {\n\treturn ( x !== x );\n}\n\n\n// EXPORTS //\n\nexport default isnan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* @module @stdlib/constants-float64-pinf\n* @type {number}\n*\n* @example\n* import FLOAT64_PINF from '@stdlib/constants-float64-pinf';\n* // returns Infinity\n*/\n\n\n// MAIN //\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* ## Notes\n*\n* Double-precision floating-point positive infinity has the bit sequence\n*\n* ```binarystring\n* 0 11111111111 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default Number.POSITIVE_INFINITY\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_PINF = Number.POSITIVE_INFINITY; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default FLOAT64_PINF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is positive zero.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is positive zero\n*\n* @example\n* var bool = isPositiveZero( 0.0 );\n* // returns true\n*\n* @example\n* var bool = isPositiveZero( -0.0 );\n* // returns false\n*/\nfunction isPositiveZero( x ) {\n\treturn (x === 0.0 && 1.0/x === PINF);\n}\n\n\n// EXPORTS //\n\nexport default isPositiveZero;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative maximum of a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n* var N = x.length;\n*\n* var v = cumax( N, x, 1, y, 1 );\n* // returns [ 1.0, 1.0, 2.0 ]\n*/\nfunction cumax( N, x, strideX, y, strideY ) {\n\tvar max;\n\tvar ix;\n\tvar iy;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tmax = x[ ix ];\n\ty[ iy ] = max;\n\n\tiy += strideY;\n\ti = 1;\n\tif ( isnan( max ) === false ) {\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tmax = v;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( v > max || ( v === max && isPositiveZero( v ) ) ) {\n\t\t\t\tmax = v;\n\t\t\t}\n\t\t\ty[ iy ] = max;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\tif ( isnan( max ) ) {\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ty[ iy ] = max;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default cumax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cumax from './cumax.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( cumax, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default cumax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative maximum of a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = cumax( N, x, 2, 1, y, 1, 0 );\n* // returns [ 1.0, 1.0, 2.0, 4.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction cumax( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar max;\n\tvar ix;\n\tvar iy;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\tmax = x[ ix ];\n\ty[ iy ] = max;\n\n\tiy += strideY;\n\ti = 1;\n\tif ( isnan( max ) === false ) {\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tmax = v;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( v > max || ( v === max && isPositiveZero( v ) ) ) {\n\t\t\t\tmax = v;\n\t\t\t}\n\t\t\ty[ iy ] = max;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\tif ( isnan( max ) ) {\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ty[ iy ] = max;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default cumax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// EXPORTS //\n\nexport default Number; // eslint-disable-line stdlib/require-globals\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision floating-point negative infinity.\n*\n* @module @stdlib/constants-float64-ninf\n* @type {number}\n*\n* @example\n* import FLOAT64_NINF from '@stdlib/constants-float64-ninf';\n* // returns -Infinity\n*/\n\n// MODULES //\n\nimport Number from '@stdlib/number-ctor';\n\n\n// MAIN //\n\n/**\n* Double-precision floating-point negative infinity.\n*\n* ## Notes\n*\n* Double-precision floating-point negative infinity has the bit sequence\n*\n* ```binarystring\n* 1 11111111111 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default Number.NEGATIVE_INFINITY\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_NINF = Number.NEGATIVE_INFINITY;\n\n\n// EXPORTS //\n\nexport default FLOAT64_NINF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is negative zero.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is negative zero\n*\n* @example\n* var bool = isNegativeZero( -0.0 );\n* // returns true\n*\n* @example\n* var bool = isNegativeZero( 0.0 );\n* // returns false\n*/\nfunction isNegativeZero( x ) {\n\treturn (x === 0.0 && 1.0/x === NINF);\n}\n\n\n// EXPORTS //\n\nexport default isNegativeZero;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative minimum of a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n* var N = x.length;\n*\n* var v = cumin( N, x, 1, y, 1 );\n* // returns [ 1.0, -2.0, -2.0 ]\n*/\nfunction cumin( N, x, strideX, y, strideY ) {\n\tvar min;\n\tvar ix;\n\tvar iy;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tmin = x[ ix ];\n\ty[ iy ] = min;\n\n\tiy += strideY;\n\ti = 1;\n\tif ( isnan( min ) === false ) {\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tmin = v;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( v < min || ( v === min && isNegativeZero( v ) ) ) {\n\t\t\t\tmin = v;\n\t\t\t}\n\t\t\ty[ iy ] = min;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\tif ( isnan( min ) ) {\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ty[ iy ] = min;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default cumin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cumin from './cumin.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( cumin, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default cumin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative minimum of a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = cumin( N, x, 2, 1, y, 1, 0 );\n* // returns [ 1.0, -2.0, -2.0, -2.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction cumin( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar min;\n\tvar ix;\n\tvar iy;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\tmin = x[ ix ];\n\ty[ iy ] = min;\n\n\tiy += strideY;\n\ti = 1;\n\tif ( isnan( min ) === false ) {\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tmin = v;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( v < min || ( v === min && isNegativeZero( v ) ) ) {\n\t\t\t\tmin = v;\n\t\t\t}\n\t\t\ty[ iy ] = min;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\tif ( isnan( min ) ) {\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ty[ iy ] = min;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default cumin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the index offset which specifies the location of the first indexed value in a strided array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {integer} stride - index increment\n* @returns {NonNegativeInteger} offset - offset\n*\n* @example\n* var offset = stride2offset( 10, -10 );\n* // returns 90\n*/\nfunction stride2offset( N, stride ) {\n\tif ( stride > 0 ) {\n\t\treturn 0;\n\t}\n\treturn ( 1 - N ) * stride;\n}\n\n\n// EXPORTS //\n\nexport default stride2offset;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative maximum of double-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var v = dcumax( 4, x, 2, 1, y, 1, 0 );\n* // returns <Float64Array>[ 1.0, 1.0, 2.0, 4.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction dcumax( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar max;\n\tvar ix;\n\tvar iy;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\tmax = x[ ix ];\n\ty[ iy ] = max;\n\n\tiy += strideY;\n\ti = 1;\n\tif ( isnan( max ) === false ) {\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tmax = v;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( v > max || ( v === max && isPositiveZero( v ) ) ) {\n\t\t\t\tmax = v;\n\t\t\t}\n\t\t\ty[ iy ] = max;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\tif ( isnan( max ) ) {\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ty[ iy ] = max;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcumax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative minimum of double-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var v = dcumin( 4, x, 2, 1, y, 1, 0 );\n* // returns <Float64Array>[ 1.0, -2.0, -2.0, -2.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction dcumin( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar min;\n\tvar ix;\n\tvar iy;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\tmin = x[ ix ];\n\ty[ iy ] = min;\n\n\tiy += strideY;\n\ti = 1;\n\tif ( isnan( min ) === false ) {\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tmin = v;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( v < min || ( v === min && isNegativeZero( v ) ) ) {\n\t\t\t\tmin = v;\n\t\t\t}\n\t\t\ty[ iy ] = min;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\tif ( isnan( min ) ) {\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ty[ iy ] = min;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcumin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero';\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a double-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} maximum value\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dmax( 4, x, 2, 1 );\n* // returns 4.0\n*/\nfunction dmax( N, x, strideX, offsetX ) {\n\tvar max;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\treturn x[ offsetX ];\n\t}\n\tix = offsetX;\n\tmax = x[ ix ];\n\tfor ( i = 1; i < N; i++ ) {\n\t\tix += strideX;\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v > max || ( v === max && isPositiveZero( v ) ) ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max;\n}\n\n\n// EXPORTS //\n\nexport default dmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero';\n\n\n// MAIN //\n\n/**\n* Computes the minimum value of a double-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} minimum value\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dmin( 4, x, 2, 1 );\n* // returns -2.0\n*/\nfunction dmin( N, x, strideX, offsetX ) {\n\tvar min;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\treturn x[ offsetX ];\n\t}\n\tix = offsetX;\n\tmin = x[ ix ];\n\tfor ( i = 1; i < N; i++ ) {\n\t\tix += strideX;\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v < min || ( v === min && isNegativeZero( v ) ) ) {\n\t\t\tmin = v;\n\t\t}\n\t}\n\treturn min;\n}\n\n\n// EXPORTS //\n\nexport default dmin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Computes the range of a double-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} range\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = drange( 4, x, 2, 1 );\n* // returns 6.0\n*/\nfunction drange( N, x, strideX, offsetX ) {\n\tvar max;\n\tvar min;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ offsetX ] ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tmin = x[ ix ];\n\tmax = min;\n\tfor ( i = 1; i < N; i++ ) {\n\t\tix += strideX;\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v < min ) {\n\t\t\tmin = v;\n\t\t} else if ( v > max ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max - min;\n}\n\n\n// EXPORTS //\n\nexport default drange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport dcumax from './dcumax.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dcumax, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dcumax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative maximum of double-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var v = dcumax( x.length, x, 1, y, 1 );\n* // returns <Float64Array>[ 1.0, 1.0, 2.0 ]\n*/\nfunction dcumax( N, x, strideX, y, strideY ) {\n\tvar ox = stride2offset( N, strideX );\n\tvar oy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ox, y, strideY, oy );\n}\n\n\n// EXPORTS //\n\nexport default dcumax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport dcumin from './dcumin.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dcumin, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dcumin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative minimum of double-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float64Array( x.length );\n*\n* var v = dcumin( x.length, x, 1, y, 1 );\n* // returns <Float64Array>[ 1.0, -2.0, -2.0 ]\n*/\nfunction dcumin( N, x, strideX, y, strideY ) {\n\tvar ox = stride2offset( N, strideX );\n\tvar oy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ox, y, strideY, oy );\n}\n\n\n// EXPORTS //\n\nexport default dcumin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport dmax from './dmax.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dmax, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a double-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} maximum value\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dmax( x.length, x, 1 );\n* // returns 2.0\n*/\nfunction dmax( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport dmin from './dmin.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dmin, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dmin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the minimum value of a double-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} minimum value\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dmin( x.length, x, 1 );\n* // returns -2.0\n*/\nfunction dmin( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dmin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport drange from './drange.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( drange, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default drange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the range of a double-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} range\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = drange( x.length, x, 1 );\n* // returns 4.0\n*/\nfunction drange( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default drange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar TYPE = 'function';\n\n\n// MAIN //\n\n/**\n* Tests if an array-like object supports the accessor (get/set) protocol.\n*\n* @param {Object} value - value to test\n* @returns {boolean} boolean indicating whether a value is an accessor array\n*\n* @example\n* import Complex128Array from '@stdlib/array-complex128';\n*\n* var bool = isAccessorArray( new Complex128Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isAccessorArray( [] );\n* // returns false\n*/\nfunction isAccessorArray( value ) {\n\treturn ( typeof value.get === TYPE && typeof value.set === TYPE ); // eslint-disable-line valid-typeof\n}\n\n\n// EXPORTS //\n\nexport default isAccessorArray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar GETTERS = {\n\t'complex128': getComplex128,\n\t'complex64': getComplex64,\n\t'default': getArrayLike\n};\n\n\n// FUNCTIONS //\n\n/**\n* Returns an element from a `Complex128Array`.\n*\n* @private\n* @param {Complex128Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @returns {number} element value\n*\n* @example\n* import Complex128Array from '@stdlib/array-complex128';\n* import real from '@stdlib/complex-float64-real';\n* import imag from '@stdlib/complex-float64-imag';\n*\n* var arr = new Complex128Array( [ 1, 2, 3, 4 ] );\n*\n* var v = getComplex128( arr, 1 );\n* // returns <Complex128>\n*\n* var re = real( v );\n* // returns 3.0\n*\n* var im = imag( v );\n* // returns 4.0\n*/\nfunction getComplex128( arr, idx ) {\n\treturn arr.get( idx );\n}\n\n/**\n* Returns an element from a `Complex64Array`.\n*\n* @private\n* @param {Complex64Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @returns {number} element value\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import realf from '@stdlib/complex-float32-real';\n* import imagf from '@stdlib/complex-float32-imag';\n*\n* var arr = new Complex64Array( [ 1, 2, 3, 4 ] );\n*\n* var v = getComplex64( arr, 1 );\n* // returns <Complex64>\n*\n* var re = realf( v );\n* // returns 3.0\n*\n* var im = imagf( v );\n* // returns 4.0\n*/\nfunction getComplex64( arr, idx ) {\n\treturn arr.get( idx );\n}\n\n/**\n* Returns an element from an array-like object supporting the get/set protocol.\n*\n* @private\n* @param {Collection} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @returns {*} element value\n*\n* @example\n* var arr = [ 1, 2, 3, 4 ];\n*\n* function get( idx ) {\n*    return arr[ idx ];\n* }\n*\n* function set( value, idx ) {\n*    arr[ idx ] = value;\n* }\n*\n* arr.get = get;\n* arr.set = set;\n*\n* var v = getArrayLike( arr, 2 );\n* // returns 3\n*/\nfunction getArrayLike( arr, idx ) {\n\treturn arr.get( idx );\n}\n\n\n// MAIN //\n\n/**\n* Returns an accessor function for retrieving an element from an array-like object supporting the get/set protocol.\n*\n* @param {string} dtype - array dtype\n* @returns {Function} accessor\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import realf from '@stdlib/complex-float32-real';\n* import imagf from '@stdlib/complex-float32-imag';\n* import dtype from '@stdlib/array-dtype';\n*\n* var arr = new Complex64Array( [ 1, 2, 3, 4 ] );\n*\n* var get = getter( dtype( arr ) );\n* var v = get( arr, 1 );\n* // returns <Complex64>\n*\n* var re = realf( v );\n* // returns 3.0\n*\n* var im = imagf( v );\n* // returns 4.0\n*/\nfunction getter( dtype ) {\n\tvar f = GETTERS[ dtype ];\n\tif ( typeof f === 'function' ) {\n\t\treturn f;\n\t}\n\treturn GETTERS.default;\n}\n\n\n// EXPORTS //\n\nexport default getter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar GETTERS = {\n\t'float64': getFloat64,\n\t'float32': getFloat32,\n\t'int32': getInt32,\n\t'int16': getInt16,\n\t'int8': getInt8,\n\t'uint32': getUint32,\n\t'uint16': getUint16,\n\t'uint8': getUint8,\n\t'uint8c': getUint8c,\n\t'generic': getGeneric,\n\t'default': getArrayLike\n};\n\n\n// FUNCTIONS //\n\n/**\n* Returns an element from a `Float64Array`.\n*\n* @private\n* @param {Float64Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @returns {number} element value\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var arr = new Float64Array( [ 1, 2, 3, 4 ] );\n*\n* var v = getFloat64( arr, 2 );\n* // returns 3.0\n*/\nfunction getFloat64( arr, idx ) {\n\treturn arr[ idx ];\n}\n\n/**\n* Returns an element from a `Float32Array`.\n*\n* @private\n* @param {Float32Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @returns {number} element value\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var arr = new Float32Array( [ 1, 2, 3, 4 ] );\n*\n* var v = getFloat32( arr, 2 );\n* // returns 3.0\n*/\nfunction getFloat32( arr, idx ) {\n\treturn arr[ idx ];\n}\n\n/**\n* Returns an element from an `Int32Array`.\n*\n* @private\n* @param {Int32Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @returns {number} element value\n*\n* @example\n* import Int32Array from '@stdlib/array-int32';\n*\n* var arr = new Int32Array( [ 1, 2, 3, 4 ] );\n*\n* var v = getInt32( arr, 2 );\n* // returns 3\n*/\nfunction getInt32( arr, idx ) { // eslint-disable-line stdlib/jsdoc-doctest-decimal-point\n\treturn arr[ idx ];\n}\n\n/**\n* Returns an element from an `Int16Array`.\n*\n* @private\n* @param {Int16Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @returns {number} element value\n*\n* @example\n* import Int16Array from '@stdlib/array-int16';\n*\n* var arr = new Int16Array( [ 1, 2, 3, 4 ] );\n*\n* var v = getInt16( arr, 2 );\n* // returns 3\n*/\nfunction getInt16( arr, idx ) { // eslint-disable-line stdlib/jsdoc-doctest-decimal-point\n\treturn arr[ idx ];\n}\n\n/**\n* Returns an element from an `Int8Array`.\n*\n* @private\n* @param {Int8Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @returns {number} element value\n*\n* @example\n* import Int8Array from '@stdlib/array-int8';\n*\n* var arr = new Int8Array( [ 1, 2, 3, 4 ] );\n*\n* var v = getInt8( arr, 2 );\n* // returns 3\n*/\nfunction getInt8( arr, idx ) { // eslint-disable-line stdlib/jsdoc-doctest-decimal-point\n\treturn arr[ idx ];\n}\n\n/**\n* Returns an element from a `Uint32Array`.\n*\n* @private\n* @param {Uint32Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @returns {number} element value\n*\n* @example\n* import Uint32Array from '@stdlib/array-uint32';\n*\n* var arr = new Uint32Array( [ 1, 2, 3, 4 ] );\n*\n* var v = getUint32( arr, 2 );\n* // returns 3\n*/\nfunction getUint32( arr, idx ) { // eslint-disable-line stdlib/jsdoc-doctest-decimal-point\n\treturn arr[ idx ];\n}\n\n/**\n* Returns an element from a `Uint16Array`.\n*\n* @private\n* @param {Uint16Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @returns {number} element value\n*\n* @example\n* import Uint16Array from '@stdlib/array-uint16';\n*\n* var arr = new Uint16Array( [ 1, 2, 3, 4 ] );\n*\n* var v = getUint16( arr, 2 );\n* // returns 3\n*/\nfunction getUint16( arr, idx ) { // eslint-disable-line stdlib/jsdoc-doctest-decimal-point\n\treturn arr[ idx ];\n}\n\n/**\n* Returns an element from a `Uint8Array`.\n*\n* @private\n* @param {Uint8Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @returns {number} element value\n*\n* @example\n* import Uint8Array from '@stdlib/array-uint8';\n*\n* var arr = new Uint8Array( [ 1, 2, 3, 4 ] );\n*\n* var v = getUint8( arr, 2 );\n* // returns 3\n*/\nfunction getUint8( arr, idx ) { // eslint-disable-line stdlib/jsdoc-doctest-decimal-point\n\treturn arr[ idx ];\n}\n\n/**\n* Returns an element from a `Uint8ClampedArray`.\n*\n* @private\n* @param {Uint8ClampedArray} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @returns {number} element value\n*\n* @example\n* import Uint8ClampedArray from '@stdlib/array-uint8c';\n*\n* var arr = new Uint8ClampedArray( [ 1, 2, 3, 4 ] );\n*\n* var v = getUint8c( arr, 2 );\n* // returns 3\n*/\nfunction getUint8c( arr, idx ) { // eslint-disable-line stdlib/jsdoc-doctest-decimal-point\n\treturn arr[ idx ];\n}\n\n/**\n* Returns an element from a generic `Array`.\n*\n* @private\n* @param {Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @returns {*} element value\n*\n* @example\n* var arr = [ 1, 2, 3, 4 ];\n*\n* var v = getGeneric( arr, 2 );\n* // returns 3\n*/\nfunction getGeneric( arr, idx ) {\n\treturn arr[ idx ];\n}\n\n/**\n* Returns an element from an indexed array-like object.\n*\n* @private\n* @param {Collection} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @returns {*} element value\n*\n* @example\n* var arr = [ 1, 2, 3, 4 ];\n*\n* var v = getArrayLike( arr, 2 );\n* // returns 3\n*/\nfunction getArrayLike( arr, idx ) {\n\treturn arr[ idx ];\n}\n\n\n// MAIN //\n\n/**\n* Returns an accessor function for retrieving an element from an indexed array-like object.\n*\n* @param {string} dtype - array dtype\n* @returns {Function} accessor\n*\n* @example\n* import dtype from '@stdlib/array-dtype';\n*\n* var arr = [ 1, 2, 3, 4 ];\n*\n* var get = getter( dtype( arr ) );\n* var v = get( arr, 2 );\n* // returns 3\n*/\nfunction getter( dtype ) {\n\tvar f = GETTERS[ dtype ];\n\tif ( typeof f === 'function' ) {\n\t\treturn f;\n\t}\n\treturn GETTERS.default;\n}\n\n\n// EXPORTS //\n\nexport default getter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasSymbols from '@stdlib/assert-has-symbol-support';\n\n\n// VARIABLES //\n\nvar FLG = hasSymbols();\n\n\n// MAIN //\n\n/**\n* Tests for native `toStringTag` support.\n*\n* @returns {boolean} boolean indicating if an environment has `toStringTag` support\n*\n* @example\n* var bool = hasToStringTagSupport();\n* // returns <boolean>\n*/\nfunction hasToStringTagSupport() {\n\treturn ( FLG && typeof Symbol.toStringTag === 'symbol' );\n}\n\n\n// EXPORTS //\n\nexport default hasToStringTagSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests for native `Symbol` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Symbol` support\n*\n* @example\n* var bool = hasSymbolSupport();\n* // returns <boolean>\n*/\nfunction hasSymbolSupport() {\n\treturn (\n\t\ttypeof Symbol === 'function' &&\n\t\ttypeof Symbol( 'foo' ) === 'symbol'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default hasSymbolSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar toStr = Object.prototype.toString;\n\n\n// EXPORTS //\n\nexport default toStr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\nvar has = Object.prototype.hasOwnProperty;\n\n\n// MAIN //\n\n/**\n* Tests if an object has a specified property.\n*\n* @param {*} value - value to test\n* @param {*} property - property to test\n* @returns {boolean} boolean indicating if an object has a specified property\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = hasOwnProp( beep, 'boop' );\n* // returns true\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = hasOwnProp( beep, 'bap' );\n* // returns false\n*/\nfunction hasOwnProp( value, property ) {\n\tif (\n\t\tvalue === void 0 ||\n\t\tvalue === null\n\t) {\n\t\treturn false;\n\t}\n\treturn has.call( value, property );\n}\n\n\n// EXPORTS //\n\nexport default hasOwnProp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar Sym = ( typeof Symbol === 'function' ) ? Symbol : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default Sym;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a string value indicating a specification defined classification of an object.\n*\n* @module @stdlib/utils-native-class\n*\n* @example\n* import nativeClass from '@stdlib/utils-native-class';\n*\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* function Beep() {\n*     return this;\n* }\n* str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\n\n// MODULES //\n\nimport hasToStringTag from '@stdlib/assert-has-tostringtag-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar main;\nif ( hasToStringTag() ) {\n\tmain = polyfill;\n} else {\n\tmain = builtin;\n}\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Symbol from '@stdlib/symbol-ctor';\n\n\n// MAIN //\n\nvar toStrTag = ( typeof Symbol === 'function' ) ? Symbol.toStringTag : '';\n\n\n// EXPORTS //\n\nexport default toStrTag;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport toStringTag from './tostringtag.js';\nimport toStr from './tostring.js';\n\n\n// MAIN //\n\n/**\n* Returns a string value indicating a specification defined classification of an object in environments supporting `Symbol.toStringTag`.\n*\n* @param {*} v - input value\n* @returns {string} string value indicating a specification defined classification of the input value\n*\n* @example\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* @example\n* var str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* @example\n* function Beep() {\n*     return this;\n* }\n* var str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\nfunction nativeClass( v ) {\n\tvar isOwn;\n\tvar tag;\n\tvar out;\n\n\tif ( v === null || v === void 0 ) {\n\t\treturn toStr.call( v );\n\t}\n\ttag = v[ toStringTag ];\n\tisOwn = hasOwnProp( v, toStringTag );\n\n\t// Attempt to override the `toStringTag` property. For built-ins having a `Symbol.toStringTag` property (e.g., `JSON`, `Math`, etc), the `Symbol.toStringTag` property is read-only (e.g., , so we need to wrap in a `try/catch`.\n\ttry {\n\t\tv[ toStringTag ] = void 0;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn toStr.call( v );\n\t}\n\tout = toStr.call( v );\n\n\tif ( isOwn ) {\n\t\tv[ toStringTag ] = tag;\n\t} else {\n\t\tdelete v[ toStringTag ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default nativeClass;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport toStr from './tostring.js';\n\n\n// MAIN //\n\n/**\n* Returns a string value indicating a specification defined classification (via the internal property `[[Class]]`) of an object.\n*\n* @param {*} v - input value\n* @returns {string} string value indicating a specification defined classification of the input value\n*\n* @example\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* @example\n* var str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* @example\n* function Beep() {\n*     return this;\n* }\n* var str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\nfunction nativeClass( v ) {\n\treturn toStr.call( v );\n}\n\n\n// EXPORTS //\n\nexport default nativeClass;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar f;\n\n\n// FUNCTIONS //\n\n/**\n* Tests if a value is an array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is an array\n*\n* @example\n* var bool = isArray( [] );\n* // returns true\n*\n* @example\n* var bool = isArray( {} );\n* // returns false\n*/\nfunction isArray( value ) {\n\treturn ( nativeClass( value ) === '[object Array]' );\n}\n\n\n// MAIN //\n\nif ( Array.isArray ) {\n\tf = Array.isArray;\n} else {\n\tf = isArray;\n}\n\n\n// EXPORTS //\n\nexport default f;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is object-like.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether a value is object-like\n*\n* @example\n* var bool = isObjectLike( {} );\n* // returns true\n*\n* @example\n* var bool = isObjectLike( [] );\n* // returns true\n*\n* @example\n* var bool = isObjectLike( null );\n* // returns false\n*/\nfunction isObjectLike( value ) {\n\treturn (\n\t\tvalue !== null &&\n\t\ttypeof value === 'object'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isObjectLike;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObjectLike from '@stdlib/assert-is-object-like';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Buffer instance.\n*\n* @param {*} value - value to validate\n* @returns {boolean} boolean indicating if a value is a Buffer instance\n*\n* @example\n* var v = isBuffer( new Buffer( 'beep' ) );\n* // returns true\n*\n* @example\n* var v = isBuffer( new Buffer( [1,2,3,4] ) );\n* // returns true\n*\n* @example\n* var v = isBuffer( {} );\n* // returns false\n*\n* @example\n* var v = isBuffer( [] );\n* // returns false\n*/\nfunction isBuffer( value ) {\n\treturn (\n\t\tisObjectLike( value ) &&\n\t\t(\n\t\t\t// eslint-disable-next-line no-underscore-dangle\n\t\t\tvalue._isBuffer || // for envs missing Object.prototype.constructor (e.g., Safari 5-7)\n\t\t\t(\n\t\t\t\tvalue.constructor &&\n\n\t\t\t\t// WARNING: `typeof` is not a foolproof check, as certain envs consider RegExp and NodeList instances to be functions\n\t\t\t\ttypeof value.constructor.isBuffer === 'function' &&\n\t\t\t\tvalue.constructor.isBuffer( value )\n\t\t\t)\n\t\t)\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isBuffer;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a regular expression to capture everything that is not a space immediately after the `function` keyword and before the first left parenthesis.\n*\n* @returns {RegExp} regular expression\n*\n* @example\n* var RE_FUNCTION_NAME = reFunctionName();\n*\n* function fname( fcn ) {\n*     return RE_FUNCTION_NAME.exec( fcn.toString() )[ 1 ];\n* }\n*\n* var fn = fname( Math.sqrt );\n* // returns 'sqrt'\n*\n* fn = fname( Int8Array );\n* // returns 'Int8Array'\n*\n* fn = fname( Object.prototype.toString );\n* // returns 'toString'\n*\n* fn = fname( function(){} );\n* // returns ''\n*/\nfunction reFunctionName() {\n\treturn /^\\s*function\\s*([^(]*)/i;\n}\n\n\n// EXPORTS //\n\nexport default reFunctionName;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is object-like.\n*\n* @module @stdlib/assert-is-object-like\n*\n* @example\n* import isObjectLike from '@stdlib/assert-is-object-like';\n*\n* var bool = isObjectLike( {} );\n* // returns true\n*\n* bool = isObjectLike( [] );\n* // returns true\n*\n* bool = isObjectLike( null );\n* // returns false\n*\n* @example\n* import { isObjectLikeArray as isObjectLike } from '@stdlib/assert-is-object-like';\n*\n* var bool = isObjectLike( [ {}, [] ] );\n* // returns true\n*\n* bool = isObjectLike( [ {}, '3.0' ] );\n* // returns false\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport arrayfun from '@stdlib/assert-tools-array-function';\nimport main from './main.js';\n\n\n// VARIABLES //\n\nvar isObjectLikeArray = arrayfun( main );\n\n\n// MAIN //\n\nsetReadOnly( main, 'isObjectLikeArray', isObjectLikeArray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArray from '@stdlib/assert-is-array';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Returns a function which tests if every element in an array passes a test condition.\n*\n* @param {Function} predicate - function to apply\n* @throws {TypeError} must provide a function\n* @returns {Function} an array function\n*\n* @example\n* import isOdd from '@stdlib/assert-is-odd';\n*\n* var arr1 = [ 1, 3, 5, 7 ];\n* var arr2 = [ 3, 5, 8 ];\n*\n* var validate = arrayfcn( isOdd );\n*\n* var bool = validate( arr1 );\n* // returns true\n*\n* bool = validate( arr2 );\n* // returns false\n*/\nfunction arrayfcn( predicate ) {\n\tif ( typeof predicate !== 'function' ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a function. Value: `%s`.', predicate ) );\n\t}\n\treturn every;\n\n\t/**\n\t* Tests if every element in an array passes a test condition.\n\t*\n\t* @private\n\t* @param {*} value - value to test\n\t* @returns {boolean} boolean indicating whether a value is an array for which all elements pass a test condition\n\t*/\n\tfunction every( value ) {\n\t\tvar len;\n\t\tvar i;\n\t\tif ( !isArray( value ) ) {\n\t\t\treturn false;\n\t\t}\n\t\tlen = value.length;\n\t\tif ( len === 0 ) {\n\t\t\treturn false;\n\t\t}\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tif ( predicate( value[ i ] ) === false ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default arrayfcn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reFunctionName from './main.js';\n\n\n// MAIN //\n\n/**\n* Captures everything that is not a space immediately after the `function` keyword and before the first left parenthesis.\n*\n* Regular expression: `/^\\s*function\\s*([^(]*)/i`\n*\n* -   `/^\\s*`\n*     -   Match zero or more spaces at beginning\n*\n* -   `function`\n*     -   Match the word `function`\n*\n* -   `\\s*`\n*     -   Match zero or more spaces after the word `function`\n*\n* -   `()`\n*     -   Capture\n*\n* -   `[^(]*`\n*     -   Match anything except a left parenthesis `(` zero or more times\n*\n* -   `/i`\n*     -   ignore case\n*\n* @constant\n* @type {RegExp}\n* @default /^\\s*function\\s*([^(]*)/i\n*/\nvar RE_FUNCTION_NAME = reFunctionName();\n\n\n// EXPORTS //\n\nexport default RE_FUNCTION_NAME;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\nimport { REGEXP as RE } from '@stdlib/regexp-function-name';\nimport isBuffer from '@stdlib/assert-is-buffer';\n\n\n// MAIN //\n\n/**\n* Determines the name of a value's constructor.\n*\n* @param {*} v - input value\n* @returns {string} name of a value's constructor\n*\n* @example\n* var v = constructorName( 'a' );\n* // returns 'String'\n*\n* @example\n* var v = constructorName( 5 );\n* // returns 'Number'\n*\n* @example\n* var v = constructorName( null );\n* // returns 'Null'\n*\n* @example\n* var v = constructorName( undefined );\n* // returns 'Undefined'\n*\n* @example\n* var v = constructorName( function noop() {} );\n* // returns 'Function'\n*/\nfunction constructorName( v ) {\n\tvar match;\n\tvar name;\n\tvar ctor;\n\tname = nativeClass( v ).slice( 8, -1 );\n\tif ( (name === 'Object' || name === 'Error') && v.constructor ) {\n\t\tctor = v.constructor;\n\t\tif ( typeof ctor.name === 'string' ) {\n\t\t\treturn ctor.name;\n\t\t}\n\t\tmatch = RE.exec( ctor.toString() );\n\t\tif ( match ) {\n\t\t\treturn match[ 1 ];\n\t\t}\n\t}\n\tif ( isBuffer( v ) ) {\n\t\treturn 'Buffer';\n\t}\n\treturn name;\n}\n\n\n// EXPORTS //\n\nexport default constructorName;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Regular expression to capture everything that is not a space immediately after the `function` keyword and before the first left parenthesis.\n*\n* @module @stdlib/regexp-function-name\n*\n* @example\n* import reFunctionName from '@stdlib/regexp-function-name';\n* var RE_FUNCTION_NAME = reFunctionName();\n*\n* function fname( fcn ) {\n*     return RE_FUNCTION_NAME.exec( fcn.toString() )[ 1 ];\n* }\n*\n* var fn = fname( Math.sqrt );\n* // returns 'sqrt'\n*\n* fn = fname( Int8Array );\n* // returns 'Int8Array'\n*\n* fn = fname( Object.prototype.toString );\n* // returns 'toString'\n*\n* fn = fname( function(){} );\n* // returns ''\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport REGEXP from './regexp.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'REGEXP', REGEXP );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n// Mapping from array constructors to data types...\nvar ctor2dtypes = {\n\t'Float32Array': 'float32',\n\t'Float64Array': 'float64',\n\t'Array': 'generic',\n\t'Int16Array': 'int16',\n\t'Int32Array': 'int32',\n\t'Int8Array': 'int8',\n\t'Uint16Array': 'uint16',\n\t'Uint32Array': 'uint32',\n\t'Uint8Array': 'uint8',\n\t'Uint8ClampedArray': 'uint8c',\n\t'Complex64Array': 'complex64',\n\t'Complex128Array': 'complex128'\n};\n\n\n// EXPORTS //\n\nexport default ctor2dtypes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of double-precision floating-point numbers in the platform byte order.\n*\n* @module @stdlib/array-float64\n*\n* @example\n* import ctor from '@stdlib/array-float64';\n*\n* var arr = new ctor( 10 );\n* // returns <Float64Array>\n*/\n\n// MODULES //\n\nimport hasFloat64ArraySupport from '@stdlib/assert-has-float64array-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasFloat64ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasFloat64Array = ( typeof Float64Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Float64Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Float64Array\n*\n* @example\n* var bool = isFloat64Array( new Float64Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isFloat64Array( [] );\n* // returns false\n*/\nfunction isFloat64Array( value ) {\n\treturn (\n\t\t( hasFloat64Array && value instanceof Float64Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Float64Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isFloat64Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Float64Array === 'function' ) ? Float64Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Float64Array === 'function' ) ? Float64Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFloat64Array from '@stdlib/assert-is-float64array';\nimport GlobalFloat64Array from './float64array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Float64Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Float64Array` support\n*\n* @example\n* var bool = hasFloat64ArraySupport();\n* // returns <boolean>\n*/\nfunction hasFloat64ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalFloat64Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = new GlobalFloat64Array( [ 1.0, 3.14, -3.14, NaN ] );\n\t\tbool = (\n\t\t\tisFloat64Array( arr ) &&\n\t\t\tarr[ 0 ] === 1.0 &&\n\t\t\tarr[ 1 ] === 3.14 &&\n\t\t\tarr[ 2 ] === -3.14 &&\n\t\t\tarr[ 3 ] !== arr[ 3 ]\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasFloat64ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of double-precision floating-point numbers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of single-precision floating-point numbers in the platform byte order.\n*\n* @module @stdlib/array-float32\n*\n* @example\n* import ctor from '@stdlib/array-float32';\n*\n* var arr = new ctor( 10 );\n* // returns <Float32Array>\n*/\n\n// MODULES //\n\nimport hasFloat32ArraySupport from '@stdlib/assert-has-float32array-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasFloat32ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasFloat32Array = ( typeof Float32Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Float32Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Float32Array\n*\n* @example\n* var bool = isFloat32Array( new Float32Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isFloat32Array( [] );\n* // returns false\n*/\nfunction isFloat32Array( value ) {\n\treturn (\n\t\t( hasFloat32Array && value instanceof Float32Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Float32Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isFloat32Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Float32Array === 'function' ) ? Float32Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Float32Array === 'function' ) ? Float32Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFloat32Array from '@stdlib/assert-is-float32array';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport GlobalFloat32Array from './float32array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Float32Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Float32Array` support\n*\n* @example\n* var bool = hasFloat32ArraySupport();\n* // returns <boolean>\n*/\nfunction hasFloat32ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalFloat32Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = new GlobalFloat32Array( [ 1.0, 3.14, -3.14, 5.0e40 ] );\n\t\tbool = (\n\t\t\tisFloat32Array( arr ) &&\n\t\t\tarr[ 0 ] === 1.0 &&\n\t\t\tarr[ 1 ] === 3.140000104904175 &&\n\t\t\tarr[ 2 ] === -3.140000104904175 &&\n\t\t\tarr[ 3 ] === PINF\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasFloat32ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of single-precision floating-point numbers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of 32-bit unsigned integers in the platform byte order.\n*\n* @module @stdlib/array-uint32\n*\n* @example\n* import ctor from '@stdlib/array-uint32';\n*\n* var arr = new ctor( 10 );\n* // returns <Uint32Array>\n*/\n\n// MODULES //\n\nimport hasUint32ArraySupport from '@stdlib/assert-has-uint32array-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasUint32ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasUint32Array = ( typeof Uint32Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Uint32Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Uint32Array\n*\n* @example\n* var bool = isUint32Array( new Uint32Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isUint32Array( [] );\n* // returns false\n*/\nfunction isUint32Array( value ) {\n\treturn (\n\t\t( hasUint32Array && value instanceof Uint32Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Uint32Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isUint32Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum unsigned 32-bit integer.\n*\n* @module @stdlib/constants-uint32-max\n* @type {uinteger32}\n*\n* @example\n* import UINT32_MAX from '@stdlib/constants-uint32-max';\n* // returns 4294967295\n*/\n\n\n// MAIN //\n\n/**\n* Maximum unsigned 32-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{32} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 11111111111111111111111111111111\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 4294967295\n*/\nvar UINT32_MAX = 4294967295;\n\n\n// EXPORTS //\n\nexport default UINT32_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Uint32Array === 'function' ) ? Uint32Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Uint32Array === 'function' ) ? Uint32Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isUint32Array from '@stdlib/assert-is-uint32array';\nimport UINT32_MAX from '@stdlib/constants-uint32-max';\nimport GlobalUint32Array from './uint32array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Uint32Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Uint32Array` support\n*\n* @example\n* var bool = hasUint32ArraySupport();\n* // returns <boolean>\n*/\nfunction hasUint32ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalUint32Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = [ 1, 3.14, -3.14, UINT32_MAX+1, UINT32_MAX+2 ];\n\t\tarr = new GlobalUint32Array( arr );\n\t\tbool = (\n\t\t\tisUint32Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&            // truncation\n\t\t\tarr[ 2 ] === UINT32_MAX-2 && // truncation and wrap around\n\t\t\tarr[ 3 ] === 0 &&            // wrap around\n\t\t\tarr[ 4 ] === 1               // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasUint32ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of 32-bit unsigned integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of twos-complement 32-bit signed integers in the platform byte order.\n*\n* @module @stdlib/array-int32\n*\n* @example\n* import ctor from '@stdlib/array-int32';\n*\n* var arr = new ctor( 10 );\n* // returns <Int32Array>\n*/\n\n// MODULES //\n\nimport hasInt32ArraySupport from '@stdlib/assert-has-int32array-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasInt32ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasInt32Array = ( typeof Int32Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is an Int32Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is an Int32Array\n*\n* @example\n* var bool = isInt32Array( new Int32Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isInt32Array( [] );\n* // returns false\n*/\nfunction isInt32Array( value ) {\n\treturn (\n\t\t( hasInt32Array && value instanceof Int32Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Int32Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isInt32Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Int32Array === 'function' ) ? Int32Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Int32Array === 'function' ) ? Int32Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInt32Array from '@stdlib/assert-is-int32array';\nimport INT32_MAX from '@stdlib/constants-int32-max';\nimport INT32_MIN from '@stdlib/constants-int32-min';\nimport GlobalInt32Array from './int32array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Int32Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Int32Array` support\n*\n* @example\n* var bool = hasInt32ArraySupport();\n* // returns <boolean>\n*/\nfunction hasInt32ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalInt32Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = new GlobalInt32Array( [ 1, 3.14, -3.14, INT32_MAX+1 ] );\n\t\tbool = (\n\t\t\tisInt32Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&      // truncation\n\t\t\tarr[ 2 ] === -3 &&     // truncation\n\t\t\tarr[ 3 ] === INT32_MIN // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasInt32ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Minimum signed 32-bit integer.\n*\n* @module @stdlib/constants-int32-min\n* @type {integer32}\n*\n* @example\n* import INT32_MIN from '@stdlib/constants-int32-min';\n* // returns -2147483648\n*/\n\n\n// MAIN //\n\n/**\n* Minimum signed 32-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* -(2^{31})\n* ```\n*\n* which corresponds to the two's complement bit sequence\n*\n* ```binarystring\n* 10000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {integer32}\n* @default -2147483648\n*/\nvar INT32_MIN = -2147483648|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default INT32_MIN;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of twos-complement 32-bit signed integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of 16-bit unsigned integers in the platform byte order.\n*\n* @module @stdlib/array-uint16\n*\n* @example\n* import ctor from '@stdlib/array-uint16';\n*\n* var arr = new ctor( 10 );\n* // returns <Uint16Array>\n*/\n\n// MODULES //\n\nimport hasUint16ArraySupport from '@stdlib/assert-has-uint16array-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasUint16ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasUint16Array = ( typeof Uint16Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Uint16Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Uint16Array\n*\n* @example\n* var bool = isUint16Array( new Uint16Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isUint16Array( [] );\n* // returns false\n*/\nfunction isUint16Array( value ) {\n\treturn (\n\t\t( hasUint16Array && value instanceof Uint16Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Uint16Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isUint16Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Uint16Array === 'function' ) ? Uint16Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Uint16Array === 'function' ) ? Uint16Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isUint16Array from '@stdlib/assert-is-uint16array';\nimport UINT16_MAX from '@stdlib/constants-uint16-max';\nimport GlobalUint16Array from './uint16array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Uint16Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Uint16Array` support\n*\n* @example\n* var bool = hasUint16ArraySupport();\n* // returns <boolean>\n*/\nfunction hasUint16ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalUint16Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = [ 1, 3.14, -3.14, UINT16_MAX+1, UINT16_MAX+2 ];\n\t\tarr = new GlobalUint16Array( arr );\n\t\tbool = (\n\t\t\tisUint16Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&            // truncation\n\t\t\tarr[ 2 ] === UINT16_MAX-2 && // truncation and wrap around\n\t\t\tarr[ 3 ] === 0 &&            // wrap around\n\t\t\tarr[ 4 ] === 1               // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasUint16ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of 16-bit unsigned integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of twos-complement 16-bit signed integers in the platform byte order.\n*\n* @module @stdlib/array-int16\n*\n* @example\n* import ctor from '@stdlib/array-int16';\n*\n* var arr = new ctor( 10 );\n* // returns <Int16Array>\n*/\n\n// MODULES //\n\nimport hasInt16ArraySupport from '@stdlib/assert-has-int16array-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasInt16ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasInt16Array = ( typeof Int16Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is an Int16Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is an Int16Array\n*\n* @example\n* var bool = isInt16Array( new Int16Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isInt16Array( [] );\n* // returns false\n*/\nfunction isInt16Array( value ) {\n\treturn (\n\t\t( hasInt16Array && value instanceof Int16Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Int16Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isInt16Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Int16Array === 'function' ) ? Int16Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Int16Array === 'function' ) ? Int16Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInt16Array from '@stdlib/assert-is-int16array';\nimport INT16_MAX from '@stdlib/constants-int16-max';\nimport INT16_MIN from '@stdlib/constants-int16-min';\nimport GlobalInt16Array from './int16array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Int16Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Int16Array` support\n*\n* @example\n* var bool = hasInt16ArraySupport();\n* // returns <boolean>\n*/\nfunction hasInt16ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalInt16Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = new GlobalInt16Array( [ 1, 3.14, -3.14, INT16_MAX+1 ] );\n\t\tbool = (\n\t\t\tisInt16Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&      // truncation\n\t\t\tarr[ 2 ] === -3 &&     // truncation\n\t\t\tarr[ 3 ] === INT16_MIN // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasInt16ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Minimum signed 16-bit integer.\n*\n* @module @stdlib/constants-int16-min\n* @type {integer32}\n*\n* @example\n* import INT16_MIN from '@stdlib/constants-int16-min';\n* // returns -32768\n*/\n\n\n// MAIN //\n\n/**\n* Minimum signed 16-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* -(2^{15})\n* ```\n*\n* which corresponds to the two's complement bit sequence\n*\n* ```binarystring\n* 1000000000000000\n* ```\n*\n* @constant\n* @type {integer32}\n* @default -32768\n*/\nvar INT16_MIN = -32768|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default INT16_MIN;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of twos-complement 16-bit signed integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of 8-bit unsigned integers in the platform byte order.\n*\n* @module @stdlib/array-uint8\n*\n* @example\n* import ctor from '@stdlib/array-uint8';\n*\n* var arr = new ctor( 10 );\n* // returns <Uint8Array>\n*/\n\n// MODULES //\n\nimport hasUint8ArraySupport from '@stdlib/assert-has-uint8array-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasUint8ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasUint8Array = ( typeof Uint8Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Uint8Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Uint8Array\n*\n* @example\n* var bool = isUint8Array( new Uint8Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isUint8Array( [] );\n* // returns false\n*/\nfunction isUint8Array( value ) {\n\treturn (\n\t\t( hasUint8Array && value instanceof Uint8Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Uint8Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isUint8Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Uint8Array === 'function' ) ? Uint8Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Uint8Array === 'function' ) ? Uint8Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isUint8Array from '@stdlib/assert-is-uint8array';\nimport UINT8_MAX from '@stdlib/constants-uint8-max';\nimport GlobalUint8Array from './uint8array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Uint8Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Uint8Array` support\n*\n* @example\n* var bool = hasUint8ArraySupport();\n* // returns <boolean>\n*/\nfunction hasUint8ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalUint8Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = [ 1, 3.14, -3.14, UINT8_MAX+1, UINT8_MAX+2 ];\n\t\tarr = new GlobalUint8Array( arr );\n\t\tbool = (\n\t\t\tisUint8Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&           // truncation\n\t\t\tarr[ 2 ] === UINT8_MAX-2 && // truncation and wrap around\n\t\t\tarr[ 3 ] === 0 &&           // wrap around\n\t\t\tarr[ 4 ] === 1              // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasUint8ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of 8-bit unsigned integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of 8-bit unsigned integers in the platform byte order clamped to 0-255.\n*\n* @module @stdlib/array-uint8c\n*\n* @example\n* import ctor from '@stdlib/array-uint8c';\n*\n* var arr = new ctor( 10 );\n* // returns <Uint8ClampedArray>\n*/\n\n// MODULES //\n\nimport hasUint8ClampedArraySupport from '@stdlib/assert-has-uint8clampedarray-support'; // eslint-disable-line id-length\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasUint8ClampedArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasUint8ClampedArray = ( typeof Uint8ClampedArray === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Uint8ClampedArray.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Uint8ClampedArray\n*\n* @example\n* var bool = isUint8ClampedArray( new Uint8ClampedArray( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isUint8ClampedArray( [] );\n* // returns false\n*/\nfunction isUint8ClampedArray( value ) {\n\treturn (\n\t\t( hasUint8ClampedArray && value instanceof Uint8ClampedArray ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Uint8ClampedArray]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isUint8ClampedArray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Uint8ClampedArray === 'function' ) ? Uint8ClampedArray : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Uint8ClampedArray === 'function' ) ? Uint8ClampedArray : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isUint8ClampedArray from '@stdlib/assert-is-uint8clampedarray';\nimport GlobalUint8ClampedArray from './uint8clampedarray.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Uint8ClampedArray` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Uint8ClampedArray` support\n*\n* @example\n* var bool = hasUint8ClampedArraySupport();\n* // returns <boolean>\n*/\nfunction hasUint8ClampedArraySupport() { // eslint-disable-line id-length\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalUint8ClampedArray !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = new GlobalUint8ClampedArray( [ -1, 0, 1, 3.14, 4.99, 255, 256 ] );\n\t\tbool = (\n\t\t\tisUint8ClampedArray( arr ) &&\n\t\t\tarr[ 0 ] === 0 &&   // clamped\n\t\t\tarr[ 1 ] === 0 &&\n\t\t\tarr[ 2 ] === 1 &&\n\t\t\tarr[ 3 ] === 3 &&   // round to nearest\n\t\t\tarr[ 4 ] === 5 &&   // round to nearest\n\t\t\tarr[ 5 ] === 255 &&\n\t\t\tarr[ 6 ] === 255    // clamped\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasUint8ClampedArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of 8-bit unsigned integers in the platform byte order clamped to 0-255.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Typed array constructor which returns a typed array representing an array of twos-complement 8-bit signed integers in the platform byte order.\n*\n* @module @stdlib/array-int8\n*\n* @example\n* import ctor from '@stdlib/array-int8';\n*\n* var arr = new ctor( 10 );\n* // returns <Int8Array>\n*/\n\n// MODULES //\n\nimport hasInt8ArraySupport from '@stdlib/assert-has-int8array-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar ctor;\nif ( hasInt8ArraySupport() ) {\n\tctor = builtin;\n} else {\n\tctor = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasInt8Array = ( typeof Int8Array === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is an Int8Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is an Int8Array\n*\n* @example\n* var bool = isInt8Array( new Int8Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isInt8Array( [] );\n* // returns false\n*/\nfunction isInt8Array( value ) {\n\treturn (\n\t\t( hasInt8Array && value instanceof Int8Array ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object Int8Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isInt8Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar main = ( typeof Int8Array === 'function' ) ? Int8Array : null; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar ctor = ( typeof Int8Array === 'function' ) ? Int8Array : void 0; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default ctor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInt8Array from '@stdlib/assert-is-int8array';\nimport INT8_MAX from '@stdlib/constants-int8-max';\nimport INT8_MIN from '@stdlib/constants-int8-min';\nimport GlobalInt8Array from './int8array.js';\n\n\n// MAIN //\n\n/**\n* Tests for native `Int8Array` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Int8Array` support\n*\n* @example\n* var bool = hasInt8ArraySupport();\n* // returns <boolean>\n*/\nfunction hasInt8ArraySupport() {\n\tvar bool;\n\tvar arr;\n\n\tif ( typeof GlobalInt8Array !== 'function' ) {\n\t\treturn false;\n\t}\n\t// Test basic support...\n\ttry {\n\t\tarr = new GlobalInt8Array( [ 1, 3.14, -3.14, INT8_MAX+1 ] );\n\t\tbool = (\n\t\t\tisInt8Array( arr ) &&\n\t\t\tarr[ 0 ] === 1 &&\n\t\t\tarr[ 1 ] === 3 &&     // truncation\n\t\t\tarr[ 2 ] === -3 &&    // truncation\n\t\t\tarr[ 3 ] === INT8_MIN // wrap around\n\t\t);\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tbool = false;\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default hasInt8ArraySupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Minimum signed 8-bit integer.\n*\n* @module @stdlib/constants-int8-min\n* @type {integer32}\n*\n* @example\n* import INT8_MIN from '@stdlib/constants-int8-min';\n* // returns -128\n*/\n\n\n// MAIN //\n\n/**\n* Minimum signed 8-bit integer.\n*\n* ## Notes\n*\n* The number is given by\n*\n* ```tex\n* -(2^{7})\n* ```\n*\n* which corresponds to the two's complement bit sequence\n*\n* ```binarystring\n* 10000000\n* ```\n*\n* @constant\n* @type {integer32}\n* @default -128\n*/\nvar INT8_MIN = -128|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default INT8_MIN;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: write polyfill\n\n// MAIN //\n\n/**\n* Typed array which represents an array of twos-complement 8-bit signed integers in the platform byte order.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a number primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* @example\n* var bool = isNumber( NaN );\n* // returns true\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns false\n*/\nfunction isNumber( value ) {\n\treturn ( typeof value === 'number' );\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Number from '@stdlib/number-ctor';\n\n\n// MAIN //\n\n// eslint-disable-next-line stdlib/no-redeclare\nvar toString = Number.prototype.toString; // non-generic\n\n\n// EXPORTS //\n\nexport default toString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasToStringTag from '@stdlib/assert-has-tostringtag-support';\nimport nativeClass from '@stdlib/utils-native-class';\nimport Number from '@stdlib/number-ctor';\nimport test from './try2serialize.js';\n\n\n// VARIABLES //\n\nvar FLG = hasToStringTag();\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns false\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns true\n*/\nfunction isNumber( value ) {\n\tif ( typeof value === 'object' ) {\n\t\tif ( value instanceof Number ) {\n\t\t\treturn true;\n\t\t}\n\t\tif ( FLG ) {\n\t\t\treturn test( value );\n\t\t}\n\t\treturn ( nativeClass( value ) === '[object Number]' );\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport toString from './tostring.js'; // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Attempts to serialize a value to a string.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value can be serialized\n*/\nfunction test( value ) {\n\ttry {\n\t\ttoString.call( value );\n\t\treturn true;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default test;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a number\n*\n* @example\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* @example\n* var bool = isNumber( new Number( 3.14 ) );\n* // returns true\n*\n* @example\n* var bool = isNumber( NaN );\n* // returns true\n*\n* @example\n* var bool = isNumber( null );\n* // returns false\n*/\nfunction isNumber( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isNumber;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a number.\n*\n* @module @stdlib/assert-is-number\n*\n* @example\n* import isNumber from '@stdlib/assert-is-number';\n*\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* bool = isNumber( new Number( 3.14 ) );\n* // returns true\n*\n* bool = isNumber( NaN );\n* // returns true\n*\n* bool = isNumber( null );\n* // returns false\n*\n* @example\n* import { isPrimitive as isNumber } from '@stdlib/assert-is-number';\n*\n* var bool = isNumber( 3.14 );\n* // returns true\n*\n* bool = isNumber( NaN );\n* // returns true\n*\n* bool = isNumber( new Number( 3.14 ) );\n* // returns false\n*\n* @example\n* import { isObject as isNumber } from '@stdlib/assert-is-number';\n*\n* var bool = isNumber( 3.14 );\n* // returns false\n*\n* bool = isNumber( new Number( 3.14 ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'isPrimitive', isPrimitive );\nsetReadOnly( main, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: implementation (?)\n\n/**\n* Rounds a double-precision floating-point number toward negative infinity.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = floor( -4.2 );\n* // returns -5.0\n*\n* @example\n* var v = floor( 9.99999 );\n* // returns 9.0\n*\n* @example\n* var v = floor( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = floor( NaN );\n* // returns NaN\n*/\nvar floor = Math.floor; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default floor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// MAIN //\n\n/**\n* Tests if a finite double-precision floating-point number is an integer.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is an integer\n*\n* @example\n* var bool = isInteger( 1.0 );\n* // returns true\n*\n* @example\n* var bool = isInteger( 3.14 );\n* // returns false\n*/\nfunction isInteger( x ) {\n\treturn (floor(x) === x);\n}\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport isInt from '@stdlib/math-base-assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Tests if a number primitive is an integer value.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a number primitive is an integer value\n*/\nfunction isInteger( value ) {\n\treturn (\n\t\tvalue < PINF &&\n\t\tvalue > NINF &&\n\t\tisInt( value )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isInt from './integer.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number primitive having an integer value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive having an integer value\n*\n* @example\n* var bool = isInteger( -3.0 );\n* // returns true\n*\n* @example\n* var bool = isInteger( new Number( -3.0 ) );\n* // returns false\n*/\nfunction isInteger( value ) {\n\treturn (\n\t\tisNumber( value ) &&\n\t\tisInt( value )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isObject as isNumber } from '@stdlib/assert-is-number';\nimport isInt from './integer.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object having an integer value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object having an integer value\n*\n* @example\n* var bool = isInteger( 3.0 );\n* // returns false\n*\n* @example\n* var bool = isInteger( new Number( 3.0 ) );\n* // returns true\n*/\nfunction isInteger( value ) {\n\treturn (\n\t\tisNumber( value ) &&\n\t\tisInt( value.valueOf() )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is an integer.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is an integer\n*\n* @example\n* var bool = isInteger( 5.0 );\n* // returns true\n*\n* @example\n* var bool = isInteger( new Number( 5.0 ) );\n* // returns true\n*\n* @example\n* var bool = isInteger( -3.14 );\n* // returns false\n*\n* @example\n* var bool = isInteger( null );\n* // returns false\n*/\nfunction isInteger( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number primitive having a nonnegative integer value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive having a nonnegative integer value\n*\n* @example\n* var bool = isNonNegativeInteger( 3.0 );\n* // returns true\n*\n* @example\n* var bool = isNonNegativeInteger( new Number( 3.0 ) );\n* // returns false\n*/\nfunction isNonNegativeInteger( value ) {\n\treturn (\n\t\tisInteger( value ) &&\n\t\tvalue >= 0\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isNonNegativeInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isObject as isInteger } from '@stdlib/assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object having a nonnegative integer value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object having a nonnegative integer value\n*\n* @example\n* var bool = isNonNegativeInteger( 3.0 );\n* // returns false\n*\n* @example\n* var bool = isNonNegativeInteger( new Number( 3.0 ) );\n* // returns true\n*/\nfunction isNonNegativeInteger( value ) {\n\treturn (\n\t\tisInteger( value ) &&\n\t\tvalue.valueOf() >= 0\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isNonNegativeInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a nonnegative integer.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a nonnegative integer\n*\n* @example\n* var bool = isNonNegativeInteger( 5.0 );\n* // returns true\n*\n* @example\n* var bool = isNonNegativeInteger( new Number( 5.0 ) );\n* // returns true\n*\n* @example\n* var bool = isNonNegativeInteger( -5.0 );\n* // returns false\n*\n* @example\n* var bool = isNonNegativeInteger( 3.14 );\n* // returns false\n*\n* @example\n* var bool = isNonNegativeInteger( null );\n* // returns false\n*/\nfunction isNonNegativeInteger( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isNonNegativeInteger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is an integer.\n*\n* @module @stdlib/assert-is-integer\n*\n* @example\n* import isInteger from '@stdlib/assert-is-integer';\n*\n* var bool = isInteger( 5.0 );\n* // returns true\n*\n* bool = isInteger( new Number( 5.0 ) );\n* // returns true\n*\n* bool = isInteger( -3.14 );\n* // returns false\n*\n* bool = isInteger( null );\n* // returns false\n*\n* @example\n* // Use interface to check for integer primitives...\n* import { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\n*\n* var bool = isInteger( -3.0 );\n* // returns true\n*\n* bool = isInteger( new Number( -3.0 ) );\n* // returns false\n*\n* @example\n* // Use interface to check for integer objects...\n* import { isObject as isInteger } from '@stdlib/assert-is-integer';\n*\n* var bool = isInteger( 3.0 );\n* // returns false\n*\n* bool = isInteger( new Number( 3.0 ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'isPrimitive', isPrimitive );\nsetReadOnly( main, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a nonnegative integer.\n*\n* @module @stdlib/assert-is-nonnegative-integer\n*\n* @example\n* import isNonNegativeInteger from '@stdlib/assert-is-nonnegative-integer';\n*\n* var bool = isNonNegativeInteger( 5.0 );\n* // returns true\n*\n* bool = isNonNegativeInteger( new Number( 5.0 ) );\n* // returns true\n*\n* bool = isNonNegativeInteger( -5.0 );\n* // returns false\n*\n* bool = isNonNegativeInteger( 3.14 );\n* // returns false\n*\n* bool = isNonNegativeInteger( null );\n* // returns false\n*\n* @example\n* import { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\n*\n* var bool = isNonNegativeInteger( 3.0 );\n* // returns true\n*\n* bool = isNonNegativeInteger( new Number( 3.0 ) );\n* // returns false\n*\n* @example\n* import { isObject as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\n*\n* var bool = isNonNegativeInteger( 3.0 );\n* // returns false\n*\n* bool = isNonNegativeInteger( new Number( 3.0 ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'isPrimitive', isPrimitive );\nsetReadOnly( main, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum length of a generic array.\n*\n* @module @stdlib/constants-array-max-array-length\n*\n* @example\n* import MAX_ARRAY_LENGTH from '@stdlib/constants-array-max-array-length';\n* // returns 4294967295\n*/\n\n// MAIN //\n\n/**\n* Maximum length of a generic array.\n*\n* ```tex\n* 2^{32} - 1\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 4294967295\n*/\nvar MAX_ARRAY_LENGTH = 4294967295>>>0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default MAX_ARRAY_LENGTH;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport MAX_LENGTH from '@stdlib/constants-array-max-array-length';\n\n\n// MAIN //\n\n/**\n* Tests if a value is an array-like object.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is an array-like object\n*\n* @example\n* var bool = isArrayLikeObject( [] );\n* // returns true\n*\n* @example\n* var bool = isArrayLikeObject( { 'length':10 } );\n* // returns true\n*\n* @example\n* var bool = isArrayLikeObject( 'beep' );\n* // returns false\n*/\nfunction isArrayLikeObject( value ) {\n\treturn (\n\t\ttypeof value === 'object' &&\n\t\tvalue !== null &&\n\t\ttypeof value.length === 'number' &&\n\t\tisInteger( value.length ) &&\n\t\tvalue.length >= 0 &&\n\t\tvalue.length <= MAX_LENGTH\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isArrayLikeObject;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum length of a typed array.\n*\n* @module @stdlib/constants-array-max-typed-array-length\n*\n* @example\n* import MAX_TYPED_ARRAY_LENGTH from '@stdlib/constants-array-max-typed-array-length';\n* // returns 9007199254740991\n*/\n\n// MAIN //\n\n/**\n* Maximum length of a typed array.\n*\n* ```tex\n* 2^{53} - 1\n* ```\n*\n* @constant\n* @type {number}\n* @default 9007199254740991\n*/\nvar MAX_TYPED_ARRAY_LENGTH = 9007199254740991;\n\n\n// EXPORTS //\n\nexport default MAX_TYPED_ARRAY_LENGTH;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport MAX_LENGTH from '@stdlib/constants-array-max-typed-array-length';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a collection.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether a value is a collection\n*\n* @example\n* var bool = isCollection( [] );\n* // returns true\n*\n* @example\n* var bool = isCollection( {} );\n* // returns false\n*/\nfunction isCollection( value ) {\n\treturn (\n\t\ttypeof value === 'object' &&\n\t\tvalue !== null &&\n\t\ttypeof value.length === 'number' &&\n\t\tisInteger( value.length ) &&\n\t\tvalue.length >= 0 &&\n\t\tvalue.length <= MAX_LENGTH\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isCollection;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar hasArrayBuffer = ( typeof ArrayBuffer === 'function' ); // eslint-disable-line stdlib/require-globals\n\n\n// MAIN //\n\n/**\n* Tests if a value is an ArrayBuffer.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is an ArrayBuffer\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var bool = isArrayBuffer( new ArrayBuffer( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isArrayBuffer( [] );\n* // returns false\n*/\nfunction isArrayBuffer( value ) {\n\treturn (\n\t\t( hasArrayBuffer && value instanceof ArrayBuffer ) || // eslint-disable-line stdlib/require-globals\n\t\tnativeClass( value ) === '[object ArrayBuffer]'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isArrayBuffer;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArray from '@stdlib/assert-is-array';\n\n\n// MAIN //\n\n/**\n* Tests if a value is an object; e.g., `{}`.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is an object\n*\n* @example\n* var bool = isObject( {} );\n* // returns true\n*\n* @example\n* var bool = isObject( null );\n* // returns false\n*/\nfunction isObject( value ) {\n\treturn (\n\t\ttypeof value === 'object' &&\n\t\tvalue !== null &&\n\t\t!isArray( value )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isObject;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a string primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a string primitive\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns true\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns false\n*/\nfunction isString( value ) {\n\treturn ( typeof value === 'string' );\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// eslint-disable-next-line stdlib/no-redeclare\nvar valueOf = String.prototype.valueOf; // non-generic\n\n\n// EXPORTS //\n\nexport default valueOf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasToStringTag from '@stdlib/assert-has-tostringtag-support';\nimport nativeClass from '@stdlib/utils-native-class';\nimport test from './try2valueof.js';\n\n\n// VARIABLES //\n\nvar FLG = hasToStringTag();\n\n\n// MAIN //\n\n/**\n* Tests if a value is a string object.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a string object\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns true\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns false\n*/\nfunction isString( value ) {\n\tif ( typeof value === 'object' ) {\n\t\tif ( value instanceof String ) {\n\t\t\treturn true;\n\t\t}\n\t\tif ( FLG ) {\n\t\t\treturn test( value );\n\t\t}\n\t\treturn ( nativeClass( value ) === '[object String]' );\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport valueOf from './valueof.js'; // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Attempts to extract a string value.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a string can be extracted\n*/\nfunction test( value ) {\n\ttry {\n\t\tvalueOf.call( value );\n\t\treturn true;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default test;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a string.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a string\n*\n* @example\n* var bool = isString( new String( 'beep' ) );\n* // returns true\n*\n* @example\n* var bool = isString( 'beep' );\n* // returns true\n*/\nfunction isString( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a string.\n*\n* @module @stdlib/assert-is-string\n*\n* @example\n* import isString from '@stdlib/assert-is-string';\n*\n* var bool = isString( 'beep' );\n* // returns true\n*\n* bool = isString( new String( 'beep' ) );\n* // returns true\n*\n* bool = isString( 5 );\n* // returns false\n*\n* @example\n* import { isObject as isString } from '@stdlib/assert-is-string';\n*\n* var bool = isString( new String( 'beep' ) );\n* // returns true\n*\n* bool = isString( 'beep' );\n* // returns false\n*\n* @example\n* import { isPrimitive as isString } from '@stdlib/assert-is-string';\n*\n* var bool = isString( 'beep' );\n* // returns true\n*\n* bool = isString( new String( 'beep' ) );\n* // returns false\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'isPrimitive', isPrimitive );\nsetReadOnly( main, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\nvar RE = /./;\n\n\n// EXPORTS //\n\nexport default RE;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Tests if a value is a boolean primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a boolean primitive\n*\n* @example\n* var bool = isBoolean( true );\n* // returns true\n*\n* @example\n* var bool = isBoolean( false );\n* // returns true\n*\n* @example\n* import Boolean from '@stdlib/boolean-ctor';\n*\n* var bool = isBoolean( new Boolean( true ) );\n* // returns false\n*/\nfunction isBoolean( value ) {\n\treturn ( typeof value === 'boolean' );\n}\n\n\n// EXPORTS //\n\nexport default isBoolean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a boolean.\n*\n* @name Boolean\n* @constructor\n* @type {Function}\n* @param {*} value - input value\n* @returns {(boolean|Boolean)} boolean\n*\n* @example\n* var b = Boolean( null );\n* // returns false\n*\n* b = Boolean( [] );\n* // returns true\n*\n* b = Boolean( {} );\n* // returns true\n*\n* @example\n* var b = new Boolean( false );\n* // returns <Boolean>\n*/\nvar Bool = Boolean; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default Bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// eslint-disable-next-line stdlib/no-redeclare\nvar toString = Boolean.prototype.toString; // non-generic\n\n\n// EXPORTS //\n\nexport default toString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasToStringTag from '@stdlib/assert-has-tostringtag-support';\nimport nativeClass from '@stdlib/utils-native-class';\nimport Boolean from '@stdlib/boolean-ctor';\nimport test from './try2serialize.js';\n\n\n// VARIABLES //\n\nvar FLG = hasToStringTag();\n\n\n// MAIN //\n\n/**\n* Tests if a value is a boolean object.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a boolean object\n*\n* @example\n* var bool = isBoolean( true );\n* // returns false\n*\n* @example\n* import Boolean from '@stdlib/boolean-ctor';\n*\n* var bool = isBoolean( new Boolean( false ) );\n* // returns true\n*/\nfunction isBoolean( value ) {\n\tif ( typeof value === 'object' ) {\n\t\tif ( value instanceof Boolean ) {\n\t\t\treturn true;\n\t\t}\n\t\tif ( FLG ) {\n\t\t\treturn test( value );\n\t\t}\n\t\treturn ( nativeClass( value ) === '[object Boolean]' );\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default isBoolean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport toString from './tostring.js'; // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Attempts to serialize a value to a string.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value can be serialized\n*/\nfunction test( value ) {\n\ttry {\n\t\ttoString.call( value );\n\t\treturn true;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default test;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a boolean.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a boolean\n*\n* @example\n* var bool = isBoolean( false );\n* // returns true\n*\n* @example\n* var bool = isBoolean( true );\n* // returns true\n*\n* @example\n* import Boolean from '@stdlib/boolean-ctor';\n*\n* var bool = isBoolean( new Boolean( false ) );\n* // returns true\n*\n* @example\n* import Boolean from '@stdlib/boolean-ctor';\n*\n* var bool = isBoolean( new Boolean( true ) );\n* // returns true\n*/\nfunction isBoolean( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isBoolean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a boolean.\n*\n* @module @stdlib/assert-is-boolean\n*\n* @example\n* import Boolean from '@stdlib/boolean-ctor';\n* import isBoolean from '@stdlib/assert-is-boolean';\n*\n* var bool = isBoolean( false );\n* // returns true\n*\n* bool = isBoolean( new Boolean( false ) );\n* // returns true\n*\n* @example\n* import Boolean from '@stdlib/boolean-ctor';\n* import { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\n*\n* var bool = isBoolean( false );\n* // returns true\n*\n* bool = isBoolean( new Boolean( true ) );\n* // returns false\n*\n* @example\n* import Boolean from '@stdlib/boolean-ctor';\n* import { isObject as isBoolean } from '@stdlib/assert-is-boolean';\n*\n* var bool = isBoolean( true );\n* // returns false\n*\n* bool = isBoolean( new Boolean( false ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'isPrimitive', isPrimitive );\nsetReadOnly( main, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar obj = ( typeof self === 'object' ) ? self : null;\n\n\n// EXPORTS //\n\nexport default obj;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar obj = ( typeof window === 'object' ) ? window : null;\n\n\n// EXPORTS //\n\nexport default obj;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar obj = ( typeof globalThis === 'object' ) ? globalThis : null; // eslint-disable-line no-undef\n\n\n// EXPORTS //\n\nexport default obj;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getGlobal from '@stdlib/utils-global';\n\n\n// MAIN //\n\nvar root = getGlobal();\nvar nodeList = root.document && root.document.childNodes;\n\n\n// EXPORTS //\n\nexport default nodeList;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport format from '@stdlib/string-format';\nimport getThis from './codegen.js';\nimport Self from './self.js';\nimport Win from './window.js';\nimport GlobalThis from './global_this.js';\n\n\n// MAIN //\n\n/**\n* Returns the global object.\n*\n* ## Notes\n*\n* -   Using code generation is the **most** reliable way to resolve the global object; however, doing so is likely to violate content security policies (CSPs) in, e.g., Chrome Apps and elsewhere.\n*\n* @private\n* @param {boolean} [codegen=false] - boolean indicating whether to use code generation to resolve the global object\n* @throws {TypeError} must provide a boolean\n* @throws {Error} unable to resolve global object\n* @returns {Object} global object\n*\n* @example\n* var g = getGlobal();\n* // returns {...}\n*/\nfunction getGlobal( codegen ) {\n\tif ( arguments.length ) {\n\t\tif ( !isBoolean( codegen ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a boolean. Value: `%s`.', codegen ) );\n\t\t}\n\t\tif ( codegen ) {\n\t\t\treturn getThis();\n\t\t}\n\t\t// Fall through...\n\t}\n\t// Case: 2020 revision of ECMAScript standard\n\tif ( GlobalThis ) {\n\t\treturn GlobalThis;\n\t}\n\t// Case: browsers and web workers\n\tif ( Self ) {\n\t\treturn Self;\n\t}\n\t// Case: browsers\n\tif ( Win ) {\n\t\treturn Win;\n\t}\n\t// Case: unknown\n\tthrow new Error( 'unexpected error. Unable to resolve global object.' );\n}\n\n\n// EXPORTS //\n\nexport default getGlobal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the global object using code generation.\n*\n* @private\n* @returns {Object} global object\n*/\nfunction getGlobal() {\n\treturn new Function( 'return this;' )(); // eslint-disable-line no-new-func, stdlib/require-globals\n}\n\n\n// EXPORTS //\n\nexport default getGlobal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\nvar typedarray = Int8Array; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default typedarray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine a value's type.\n*\n* @module @stdlib/utils-type-of\n*\n* @example\n* import typeOf from '@stdlib/utils-type-of';\n*\n* var str = typeOf( 'a' );\n* // returns 'string'\n*\n* str = typeOf( 5 );\n* // returns 'number'\n*/\n\n// MODULES //\n\nimport usePolyfill from './check.js';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar main = ( usePolyfill() ) ? polyfill : builtin;\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport RE from './fixtures/re.js';\nimport nodeList from './fixtures/nodelist.js';\nimport typedarray from './fixtures/typedarray.js';\n\n\n// MAIN //\n\n/**\n* Checks whether a polyfill is needed when using the `typeof` operator.\n*\n* @private\n* @returns {boolean} boolean indicating whether a polyfill is needed\n*/\nfunction check() {\n\tif (\n\t\t// Chrome 1-12 returns 'function' for regular expression instances (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof):\n\t\ttypeof RE === 'function' ||\n\n\t\t// Safari 8 returns 'object' for typed array and weak map constructors (underscore #1929):\n\t\ttypeof typedarray === 'object' ||\n\n\t\t// PhantomJS 1.9 returns 'function' for `NodeList` instances (underscore #2236):\n\t\ttypeof nodeList === 'function'\n\t) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default check;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ctorName from '@stdlib/utils-constructor-name';\n\n\n// MAIN //\n\n/**\n* Determines a value's type.\n*\n* @param {*} v - input value\n* @returns {string} string indicating the value's type\n*/\nfunction typeOf( v ) {\n\treturn ctorName( v ).toLowerCase();\n}\n\n\n// EXPORTS //\n\nexport default typeOf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ctorName from '@stdlib/utils-constructor-name';\n\n\n// NOTES //\n\n/*\n* Built-in `typeof` operator behavior:\n*\n* ```text\n* typeof null => 'object'\n* typeof undefined => 'undefined'\n* typeof 'a' => 'string'\n* typeof 5 => 'number'\n* typeof NaN => 'number'\n* typeof true => 'boolean'\n* typeof false => 'boolean'\n* typeof {} => 'object'\n* typeof [] => 'object'\n* typeof function foo(){} => 'function'\n* typeof function* foo(){} => 'object'\n* typeof Symbol() => 'symbol'\n* ```\n*\n*/\n\n\n// MAIN //\n\n/**\n* Determines a value's type.\n*\n* @param {*} v - input value\n* @returns {string} string indicating the value's type\n*/\nfunction typeOf( v ) {\n\tvar type;\n\n\t// Address `typeof null` => `object` (see http://wiki.ecmascript.org/doku.php?id=harmony:typeof_null):\n\tif ( v === null ) {\n\t\treturn 'null';\n\t}\n\ttype = typeof v;\n\n\t// If the `typeof` operator returned something other than `object`, we are done. Otherwise, we need to check for an internal class name or search for a constructor.\n\tif ( type === 'object' ) {\n\t\treturn ctorName( v ).toLowerCase();\n\t}\n\treturn type;\n}\n\n\n// EXPORTS //\n\nexport default typeOf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport typeOf from '@stdlib/utils-type-of';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a function.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a function\n*\n* @example\n* function beep() {\n*     return 'beep';\n* }\n*\n* var bool = isFunction( beep );\n* // returns true\n*/\nfunction isFunction( value ) {\n\t// Note: cannot use `typeof` directly, as various browser engines incorrectly return `'function'` when operating on non-function objects, such as regular expressions and NodeLists.\n\treturn ( typeOf( value ) === 'function' );\n}\n\n\n// EXPORTS //\n\nexport default isFunction;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport format from '@stdlib/string-format';\nimport toStr from './tostring.js';\nimport toJSON from './tojson.js';\n\n\n// MAIN //\n\n/**\n* 128-bit complex number constructor.\n*\n* @constructor\n* @param {number} real - real component\n* @param {number} imag - imaginary component\n* @throws {TypeError} must invoke using the `new` keyword\n* @throws {TypeError} real component must be a number\n* @throws {TypeError} imaginary component must be a number\n* @returns {Complex128} 128-bit complex number\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n* // returns <Complex128>\n*/\nfunction Complex128( real, imag ) {\n\tif ( !( this instanceof Complex128 ) ) {\n\t\tthrow new TypeError( 'invalid invocation. Constructor must be called with the `new` keyword.' );\n\t}\n\tif ( !isNumber( real ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Real component must be a number. Value: `%s`.', real ) );\n\t}\n\tif ( !isNumber( imag ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Imaginary component must be a number. Value: `%s`.', imag ) );\n\t}\n\tdefineProperty( this, 're', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': real\n\t});\n\tdefineProperty( this, 'im', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': imag\n\t});\n\treturn this;\n}\n\n/**\n* Size (in bytes) of each component.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex128\n* @type {integer}\n* @returns {integer} size of each component\n*\n* @example\n* var nbytes = Complex128.BYTES_PER_ELEMENT;\n* // returns 8\n*/\nsetReadOnly( Complex128, 'BYTES_PER_ELEMENT', 8 );\n\n/**\n* Size (in bytes) of each component.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex128.prototype\n* @type {integer}\n* @returns {integer} size of each component\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var nbytes = z.BYTES_PER_ELEMENT;\n* // returns 8\n*/\nsetReadOnly( Complex128.prototype, 'BYTES_PER_ELEMENT', 8 );\n\n/**\n* Length (in bytes) of a complex number.\n*\n* @name byteLength\n* @memberof Complex128.prototype\n* @type {integer}\n* @returns {integer} byte length\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var nbytes = z.byteLength;\n* // returns 16\n*/\nsetReadOnly( Complex128.prototype, 'byteLength', 16 );\n\n/**\n* Serializes a complex number as a string.\n*\n* @name toString\n* @memberof Complex128.prototype\n* @type {Function}\n* @returns {string} serialized complex number\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var str = z.toString();\n* // returns '5 + 3i'\n*/\nsetReadOnly( Complex128.prototype, 'toString', toStr );\n\n/**\n* Serializes a complex number as a JSON object.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying a `Complex128` instance.\n*\n* @name toJSON\n* @memberof Complex128.prototype\n* @type {Function}\n* @returns {Object} serialized complex number\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var obj = z.toJSON();\n* // returns { 'type': 'Complex128', 're': 5.0, 'im': 3.0 }\n*/\nsetReadOnly( Complex128.prototype, 'toJSON', toJSON );\n\n\n// EXPORTS //\n\nexport default Complex128;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serializes a complex number as a string.\n*\n* @private\n* @returns {string} serialized complex number\n*/\nfunction toString() { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar str = '' + this.re;\n\tif ( this.im < 0 ) {\n\t\tstr += ' - ' + (-this.im);\n\t} else {\n\t\tstr += ' + ' + this.im;\n\t}\n\tstr += 'i';\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default toString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serializes a complex number as a JSON object.\n*\n* @private\n* @returns {Object} JSON representation\n*/\nfunction toJSON() {\n\t/* eslint-disable no-invalid-this */\n\tvar out = {};\n\tout.type = 'Complex128';\n\tout.re = this.re;\n\tout.im = this.im;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default toJSON;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar fround = ( typeof Math.fround === 'function' ) ? Math.fround : null; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default fround;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Float32Array from '@stdlib/array-float32';\n\n\n// VARIABLES //\n\nvar FLOAT32_VIEW = new Float32Array( 1 );\n\n\n// MAIN //\n\n/**\n* Converts a double-precision floating-point number to the nearest single-precision floating-point number.\n*\n* @param {number} x - double-precision floating-point number\n* @returns {number} nearest single-precision floating-point number\n*\n* @example\n* var y = float64ToFloat32( 1.337 );\n* // returns 1.3370000123977661\n*/\nfunction float64ToFloat32( x ) {\n\tFLOAT32_VIEW[ 0 ] = x;\n\treturn FLOAT32_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nexport default float64ToFloat32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert a double-precision floating-point number to the nearest single-precision floating-point number.\n*\n* @module @stdlib/number-float64-base-to-float32\n*\n* @example\n* import float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\n*\n* var y = float64ToFloat32( 1.337 );\n* // returns 1.3370000123977661\n*/\n\n// MODULES //\n\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar float64ToFloat32;\nif ( typeof builtin === 'function' ) {\n\tfloat64ToFloat32 = builtin;\n} else {\n\tfloat64ToFloat32 = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default float64ToFloat32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport format from '@stdlib/string-format';\nimport toStr from './tostring.js';\nimport toJSON from './tojson.js';\n\n\n// MAIN //\n\n/**\n* 64-bit complex number constructor.\n*\n* @constructor\n* @param {number} real - real component\n* @param {number} imag - imaginary component\n* @throws {TypeError} must invoke using the `new` keyword\n* @throws {TypeError} real component must be a number\n* @throws {TypeError} imaginary component must be a number\n* @returns {Complex64} 64-bit complex number\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n* // returns <Complex64>\n*/\nfunction Complex64( real, imag ) {\n\tif ( !( this instanceof Complex64 ) ) {\n\t\tthrow new TypeError( 'invalid invocation. Constructor must be called with the `new` keyword.' );\n\t}\n\tif ( !isNumber( real ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Real component must be a number. Value: `%s`.', real ) );\n\t}\n\tif ( !isNumber( imag ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Imaginary component must be a number. Value: `%s`.', imag ) );\n\t}\n\tdefineProperty( this, 're', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': float64ToFloat32( real )\n\t});\n\tdefineProperty( this, 'im', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': float64ToFloat32( imag )\n\t});\n\treturn this;\n}\n\n/**\n* Size (in bytes) of each component.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex64\n* @type {integer}\n* @returns {integer} size of each component\n*\n* @example\n* var nbytes = Complex64.BYTES_PER_ELEMENT;\n* // returns 4\n*/\nsetReadOnly( Complex64, 'BYTES_PER_ELEMENT', 4 );\n\n/**\n* Size (in bytes) of each component.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex64.prototype\n* @type {integer}\n* @returns {integer} size of each component\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var nbytes = z.BYTES_PER_ELEMENT;\n* // returns 4\n*/\nsetReadOnly( Complex64.prototype, 'BYTES_PER_ELEMENT', 4 );\n\n/**\n* Length (in bytes) of a complex number.\n*\n* @name byteLength\n* @memberof Complex64.prototype\n* @type {integer}\n* @returns {integer} byte length\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var nbytes = z.byteLength;\n* // returns 8\n*/\nsetReadOnly( Complex64.prototype, 'byteLength', 8 );\n\n/**\n* Serializes a complex number as a string.\n*\n* @name toString\n* @memberof Complex64.prototype\n* @type {Function}\n* @returns {string} serialized complex number\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var str = z.toString();\n* // returns '5 + 3i'\n*/\nsetReadOnly( Complex64.prototype, 'toString', toStr );\n\n/**\n* Serializes a complex number as a JSON object.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying a `Complex64` instance.\n*\n* @name toJSON\n* @memberof Complex64.prototype\n* @type {Function}\n* @returns {Object} serialized complex number\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var obj = z.toJSON();\n* // returns { 'type': 'Complex64', 're': 5.0, 'im': 3.0 }\n*/\nsetReadOnly( Complex64.prototype, 'toJSON', toJSON );\n\n\n// EXPORTS //\n\nexport default Complex64;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Complex128 from '@stdlib/complex-float64-ctor';\nimport Complex64 from '@stdlib/complex-float32-ctor';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a complex number-like object.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a complex number-like object.\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64-ctor';\n* import Complex64 from '@stdlib/complex-float32-ctor';\n*\n* var x = new Complex128( 4.0, 2.0 );\n* var bool = isComplexLike( x );\n* // returns true\n*\n* x = new Complex64( 4.0, 2.0 );\n* bool = isComplexLike( x );\n* // returns true\n*/\nfunction isComplexLike( value ) {\n\tif ( value instanceof Complex128 || value instanceof Complex64 ) {\n\t\treturn true;\n\t}\n\treturn (\n\t\ttypeof value === 'object' &&\n\t\tvalue !== null &&\n\t\ttypeof value.re === 'number' &&\n\t\ttypeof value.im === 'number'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isComplexLike;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isInteger from '@stdlib/math-base-assert-is-integer';\n\n\n// MAIN //\n\n/**\n* Tests if a finite numeric value is an even number.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is an even number\n*\n* @example\n* var bool = isEven( 5.0 );\n* // returns false\n*\n* @example\n* var bool = isEven( -2.0 );\n* // returns true\n*\n* @example\n* var bool = isEven( 0.0 );\n* // returns true\n*\n* @example\n* var bool = isEven( NaN );\n* // returns false\n*/\nfunction isEven( x ) {\n\treturn isInteger( x/2.0 );\n}\n\n\n// EXPORTS //\n\nexport default isEven;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serializes a complex number as a string.\n*\n* @private\n* @returns {string} serialized complex number\n*/\nfunction toString() { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar str = '' + this.re;\n\tif ( this.im < 0 ) {\n\t\tstr += ' - ' + (-this.im);\n\t} else {\n\t\tstr += ' + ' + this.im;\n\t}\n\tstr += 'i';\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default toString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serializes a complex number as a JSON object.\n*\n* @private\n* @returns {Object} JSON representation\n*/\nfunction toJSON() {\n\t/* eslint-disable no-invalid-this */\n\tvar out = {};\n\tout.type = 'Complex64';\n\tout.re = this.re;\n\tout.im = this.im;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default toJSON;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar BYTES_PER_ELEMENT = 8; // 4 bytes per float32 x (1 real + 1 imag component)\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if a value is a `Complex64Array`.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a `Complex64Array`\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n*\n* var bool = isComplex64Array( new Complex64Array( 10 ) );\n* // returns true\n*\n* bool = isComplex64Array( [] );\n* // returns false\n*/\nfunction isComplex64Array( value ) {\n\t// Note: the following is not robust and that is intentional. In this case, we are seeking a lower cost way to reasonably determine whether an input value is a `Complex64Array` in order to avoid walking the prototype chain and resolving constructors, which is necessary for robust identification of cross-realm instances. For more robust validation, see `@stdlib/assert/is-complex64array`.\n\treturn (\n\t\ttypeof value === 'object' &&\n\t\tvalue !== null &&\n\t\tvalue.constructor.name === 'Complex64Array' &&\n\t\tvalue.BYTES_PER_ELEMENT === BYTES_PER_ELEMENT\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isComplex64Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar BYTES_PER_ELEMENT = 16; // 8 bytes per float64 x (1 real + 1 imag component)\n\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if a value is a `Complex128Array`.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a `Complex128Array`\n*\n* @example\n* import Complex128Array from '@stdlib/array-complex128';\n*\n* var bool = isComplex128Array( new Complex128Array( 10 ) );\n* // returns true\n*\n* bool = isComplex128Array( [] );\n* // returns false\n*/\nfunction isComplex128Array( value ) {\n\t// Note: the following is not robust and that is intentional. In this case, we are seeking a lower cost way to reasonably determine whether an input value is a `Complex128Array` in order to avoid walking the prototype chain and resolving constructors, which is necessary for robust identification of cross-realm instances. For more robust validation, see `@stdlib/assert/is-complex128array`.\n\treturn (\n\t\ttypeof value === 'object' &&\n\t\tvalue !== null &&\n\t\tvalue.constructor.name === 'Complex128Array' &&\n\t\tvalue.BYTES_PER_ELEMENT === BYTES_PER_ELEMENT\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isComplex128Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport Symbol from '@stdlib/symbol-ctor';\n\n\n// MAIN //\n\n/**\n* Tests for native `Symbol.iterator` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Symbol.iterator` support\n*\n* @example\n* var bool = hasIteratorSymbolSupport();\n* // returns <boolean>\n*/\nfunction hasIteratorSymbolSupport() {\n\treturn (\n\t\ttypeof Symbol === 'function' &&\n\t\ttypeof Symbol( 'foo' ) === 'symbol' &&\n\t\thasOwnProp( Symbol, 'iterator' ) &&\n\t\ttypeof Symbol.iterator === 'symbol'\n\t);\n}\n\n\n// EXPORTS //\n\nexport default hasIteratorSymbolSupport;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasIteratorSymbolSupport from '@stdlib/assert-has-iterator-symbol-support';\n\n\n// MAIN //\n\n/**\n* Iterator symbol.\n*\n* @name IteratorSymbol\n* @constant\n* @type {(symbol|null)}\n*\n* @example\n* function iterator() {\n*     var it;\n*     var i;\n*\n*     i = -1;\n*\n*     it = {};\n*     it.next = next;\n*     it.return = done;\n*\n*     if ( IteratorSymbol ) {\n*         it[ IteratorSymbol ] = iterator;\n*     }\n*     return it;\n*\n*     function next() {\n*         i += 1;\n*         return {\n*             'value': i,\n*             'done': false\n*         };\n*     }\n*\n*     function done( value ) {\n*         if ( arguments.length === 0 ) {\n*             return {\n*                 'done': true\n*             };\n*         }\n*         return {\n*             'value': value,\n*             'done': true\n*         };\n*     }\n* }\n*\n* var obj = iterator();\n*/\nvar IteratorSymbol = ( hasIteratorSymbolSupport() ) ? Symbol.iterator : null;\n\n\n// EXPORTS //\n\nexport default IteratorSymbol;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property';\n\n\n// MAIN //\n\n/**\n* Defines a non-enumerable read-only accessor.\n*\n* @param {Object} obj - object on which to define the property\n* @param {(string|symbol)} prop - property name\n* @param {Function} getter - accessor\n*\n* @example\n* function getter() {\n*     return 'bar';\n* }\n*\n* var obj = {};\n*\n* setNonEnumerableReadOnlyAccessor( obj, 'foo', getter );\n*\n* try {\n*     obj.foo = 'boop';\n* } catch ( err ) {\n*     console.error( err.message );\n* }\n*/\nfunction setNonEnumerableReadOnlyAccessor( obj, prop, getter ) { // eslint-disable-line id-length\n\tdefineProperty( obj, prop, {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'get': getter\n\t});\n}\n\n\n// EXPORTS //\n\nexport default setNonEnumerableReadOnlyAccessor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport format from '@stdlib/string-format';\nimport toStr from './tostring.js';\nimport toJSON from './tojson.js';\n\n\n// MAIN //\n\n/**\n* 64-bit complex number constructor.\n*\n* @constructor\n* @param {number} real - real component\n* @param {number} imag - imaginary component\n* @throws {TypeError} must invoke using the `new` keyword\n* @throws {TypeError} real component must be a number\n* @throws {TypeError} imaginary component must be a number\n* @returns {Complex64} 64-bit complex number\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n* // returns <Complex64>\n*/\nfunction Complex64( real, imag ) {\n\tif ( !( this instanceof Complex64 ) ) {\n\t\tthrow new TypeError( 'invalid invocation. Constructor must be called with the `new` keyword.' );\n\t}\n\tif ( !isNumber( real ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Real component must be a number. Value: `%s`.', real ) );\n\t}\n\tif ( !isNumber( imag ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Imaginary component must be a number. Value: `%s`.', imag ) );\n\t}\n\tdefineProperty( this, 're', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': float64ToFloat32( real )\n\t});\n\tdefineProperty( this, 'im', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': float64ToFloat32( imag )\n\t});\n\treturn this;\n}\n\n/**\n* Size (in bytes) of each component.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex64\n* @type {integer}\n* @returns {integer} size of each component\n*\n* @example\n* var nbytes = Complex64.BYTES_PER_ELEMENT;\n* // returns 4\n*/\nsetReadOnly( Complex64, 'BYTES_PER_ELEMENT', 4 );\n\n/**\n* Size (in bytes) of each component.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex64.prototype\n* @type {integer}\n* @returns {integer} size of each component\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var nbytes = z.BYTES_PER_ELEMENT;\n* // returns 4\n*/\nsetReadOnly( Complex64.prototype, 'BYTES_PER_ELEMENT', 4 );\n\n/**\n* Length (in bytes) of a complex number.\n*\n* @name byteLength\n* @memberof Complex64.prototype\n* @type {integer}\n* @returns {integer} byte length\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var nbytes = z.byteLength;\n* // returns 8\n*/\nsetReadOnly( Complex64.prototype, 'byteLength', 8 );\n\n/**\n* Serializes a complex number as a string.\n*\n* @name toString\n* @memberof Complex64.prototype\n* @type {Function}\n* @returns {string} serialized complex number\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var str = z.toString();\n* // returns '5 + 3i'\n*/\nsetReadOnly( Complex64.prototype, 'toString', toStr );\n\n/**\n* Serializes a complex number as a JSON object.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying a `Complex64` instance.\n*\n* @name toJSON\n* @memberof Complex64.prototype\n* @type {Function}\n* @returns {Object} serialized complex number\n*\n* @example\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var obj = z.toJSON();\n* // returns { 'type': 'Complex64', 're': 5.0, 'im': 3.0 }\n*/\nsetReadOnly( Complex64.prototype, 'toJSON', toJSON );\n\n\n// EXPORTS //\n\nexport default Complex64;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the real component of a single-precision complex floating-point number.\n*\n* @param {Complex} z - complex number\n* @returns {number} real component\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n*\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var re = realf( z );\n* // returns 5.0\n*/\nfunction realf( z ) {\n\treturn z.re;\n}\n\n\n// EXPORTS //\n\nexport default realf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the imaginary component of a single-precision complex floating-point number.\n*\n* @param {Complex} z - complex number\n* @returns {number} imaginary component\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n*\n* var z = new Complex64( 5.0, 3.0 );\n*\n* var im = imagf( z );\n* // returns 3.0\n*/\nfunction imagf( z ) {\n\treturn z.im;\n}\n\n\n// EXPORTS //\n\nexport default imagf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Float32Array from '@stdlib/array-float32';\n\n\n// MAIN //\n\n/**\n* Reinterprets a `Complex64Array` as a `Float32Array`.\n*\n* @param {Complex64Array} x - input array\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float32Array} `Float32Array` view\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n*\n* var x = new Complex64Array( 10 );\n*\n* var out = reinterpret( x, 0 );\n* // returns <Float32Array>\n*\n* var bool = ( out.buffer === x.buffer );\n* // returns true\n*/\nfunction reinterpret( x, offset ) {\n\treturn new Float32Array( x.buffer, x.byteOffset+(x.BYTES_PER_ELEMENT*offset), 2*(x.length-offset) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default reinterpret;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Float64Array from '@stdlib/array-float64';\n\n\n// MAIN //\n\n/**\n* Reinterprets a `Complex128Array` as a `Float64Array`.\n*\n* @param {Complex128Array} x - input array\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Float64Array} `Float64Array` view\n*\n* @example\n* import Complex128Array from '@stdlib/array-complex128';\n*\n* var x = new Complex128Array( 10 );\n*\n* var out = reinterpret( x, 0 );\n* // returns <Float64Array>\n*\n* var bool = ( out.buffer === x.buffer );\n* // returns true\n*/\nfunction reinterpret( x, offset ) {\n\treturn new Float64Array( x.buffer, x.byteOffset+(x.BYTES_PER_ELEMENT*offset), 2*(x.length-offset) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default reinterpret;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArrayLikeObject from '@stdlib/assert-is-array-like-object';\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport realf from '@stdlib/complex-realf';\nimport imagf from '@stdlib/complex-imagf';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Returns an array of iterated values.\n*\n* @private\n* @param {Object} it - iterator\n* @returns {(Array|TypeError)} array or an error\n*/\nfunction fromIterator( it ) {\n\tvar out;\n\tvar v;\n\tvar z;\n\n\tout = [];\n\twhile ( true ) {\n\t\tv = it.next();\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t\tz = v.value;\n\t\tif ( isArrayLikeObject( z ) && z.length >= 2 ) {\n\t\t\tout.push( z[ 0 ], z[ 1 ] );\n\t\t} else if ( isComplexLike( z ) ) {\n\t\t\tout.push( realf( z ), imagf( z ) );\n\t\t} else {\n\t\t\treturn new TypeError( format( 'invalid argument. An iterator must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.', z ) );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default fromIterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serializes a complex number as a string.\n*\n* @private\n* @returns {string} serialized complex number\n*/\nfunction toString() { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar str = '' + this.re;\n\tif ( this.im < 0 ) {\n\t\tstr += ' - ' + (-this.im);\n\t} else {\n\t\tstr += ' + ' + this.im;\n\t}\n\tstr += 'i';\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default toString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serializes a complex number as a JSON object.\n*\n* @private\n* @returns {Object} JSON representation\n*/\nfunction toJSON() {\n\t/* eslint-disable no-invalid-this */\n\tvar out = {};\n\tout.type = 'Complex64';\n\tout.re = this.re;\n\tout.im = this.im;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default toJSON;\n","/* eslint-disable no-restricted-syntax, max-lines, no-invalid-this */\n\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport isArrayLikeObject from '@stdlib/assert-is-array-like-object';\nimport isCollection from '@stdlib/assert-is-collection';\nimport isArrayBuffer from '@stdlib/assert-is-arraybuffer';\nimport isObject from '@stdlib/assert-is-object';\nimport isArray from '@stdlib/assert-is-array';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport isFunction from '@stdlib/assert-is-function';\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport isEven from '@stdlib/math-base-assert-is-even';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport isComplex64Array from '@stdlib/array-base-assert-is-complex64array';\nimport isComplex128Array from '@stdlib/array-base-assert-is-complex128array';\nimport hasIteratorSymbolSupport from '@stdlib/assert-has-iterator-symbol-support';\nimport ITERATOR_SYMBOL from '@stdlib/symbol-iterator';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport Float32Array from '@stdlib/array-float32';\nimport Complex64 from '@stdlib/complex-float32';\nimport format from '@stdlib/string-format';\nimport realf from '@stdlib/complex-realf';\nimport imagf from '@stdlib/complex-imagf';\nimport floor from '@stdlib/math-base-special-floor';\nimport reinterpret64 from '@stdlib/strided-base-reinterpret-complex64';\nimport reinterpret128 from '@stdlib/strided-base-reinterpret-complex128';\nimport getter from '@stdlib/array-base-getter';\nimport accessorGetter from '@stdlib/array-base-accessor-getter';\nimport fromIterator from './from_iterator.js';\nimport fromIteratorMap from './from_iterator_map.js';\nimport fromArray from './from_array.js';\n\n\n// VARIABLES //\n\nvar BYTES_PER_ELEMENT = Float32Array.BYTES_PER_ELEMENT * 2;\nvar HAS_ITERATOR_SYMBOL = hasIteratorSymbolSupport();\n\n\n// FUNCTIONS //\n\n/**\n* Returns a boolean indicating if a value is a complex typed array.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a complex typed array\n*/\nfunction isComplexArray( value ) {\n\treturn (\n\t\tvalue instanceof Complex64Array ||\n\t\t(\n\t\t\ttypeof value === 'object' &&\n\t\t\tvalue !== null &&\n\t\t\t(\n\t\t\t\tvalue.constructor.name === 'Complex64Array' ||\n\t\t\t\tvalue.constructor.name === 'Complex128Array'\n\t\t\t) &&\n\t\t\ttypeof value._length === 'number' && // eslint-disable-line no-underscore-dangle\n\n\t\t\t// NOTE: we don't perform a more rigorous test here for a typed array for performance reasons, as robustly checking for a typed array instance could require walking the prototype tree and performing relatively expensive constructor checks...\n\t\t\ttypeof value._buffer === 'object' // eslint-disable-line no-underscore-dangle\n\t\t)\n\t);\n}\n\n/**\n* Returns a boolean indicating if a value is a complex typed array constructor.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a complex typed array constructor\n*/\nfunction isComplexArrayConstructor( value ) {\n\treturn (\n\t\tvalue === Complex64Array ||\n\n\t\t// NOTE: weaker test in order to avoid a circular dependency with Complex128Array...\n\t\tvalue.name === 'Complex128Array'\n\t);\n}\n\n/**\n* Retrieves a complex number from a complex number array buffer.\n*\n* @private\n* @param {Float32Array} buf - array buffer\n* @param {NonNegativeInteger} idx - element index\n* @returns {Complex64} complex number\n*/\nfunction getComplex64( buf, idx ) {\n\tidx *= 2;\n\treturn new Complex64( buf[ idx ], buf[ idx+1 ] );\n}\n\n\n// MAIN //\n\n/**\n* 64-bit complex number array constructor.\n*\n* @constructor\n* @param {(NonNegativeInteger|Collection|ArrayBuffer|Iterable)} [arg] - length, typed array, array-like object, buffer, or an iterable\n* @param {NonNegativeInteger} [byteOffset=0] - byte offset\n* @param {NonNegativeInteger} [length] - view length\n* @throws {RangeError} ArrayBuffer byte length must be a multiple of `8`\n* @throws {RangeError} array-like object and typed array input arguments must have a length which is a multiple of two\n* @throws {TypeError} if provided only a single argument, must provide a valid argument\n* @throws {TypeError} byte offset must be a nonnegative integer\n* @throws {RangeError} byte offset must be a multiple of `8`\n* @throws {TypeError} view length must be a positive multiple of `8`\n* @throws {RangeError} must provide sufficient memory to accommodate byte offset and view length requirements\n* @throws {TypeError} an iterator must return either a two element array containing real and imaginary components or a complex number\n* @returns {Complex64Array} complex number array\n*\n* @example\n* var arr = new Complex64Array();\n* // returns <Complex64Array>\n*\n* var len = arr.length;\n* // returns 0\n*\n* @example\n* var arr = new Complex64Array( 2 );\n* // returns <Complex64Array>\n*\n* var len = arr.length;\n* // returns 2\n*\n* @example\n* var arr = new Complex64Array( [ 1.0, -1.0 ] );\n* // returns <Complex64Array>\n*\n* var len = arr.length;\n* // returns 1\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = new Complex64Array( buf );\n* // returns <Complex64Array>\n*\n* var len = arr.length;\n* // returns 2\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = new Complex64Array( buf, 8 );\n* // returns <Complex64Array>\n*\n* var len = arr.length;\n* // returns 1\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 32 );\n* var arr = new Complex64Array( buf, 8, 2 );\n* // returns <Complex64Array>\n*\n* var len = arr.length;\n* // returns 2\n*/\nfunction Complex64Array() {\n\tvar byteOffset;\n\tvar nargs;\n\tvar buf;\n\tvar len;\n\n\tnargs = arguments.length;\n\tif ( !(this instanceof Complex64Array) ) {\n\t\tif ( nargs === 0 ) {\n\t\t\treturn new Complex64Array();\n\t\t}\n\t\tif ( nargs === 1 ) {\n\t\t\treturn new Complex64Array( arguments[0] );\n\t\t}\n\t\tif ( nargs === 2 ) {\n\t\t\treturn new Complex64Array( arguments[0], arguments[1] );\n\t\t}\n\t\treturn new Complex64Array( arguments[0], arguments[1], arguments[2] );\n\t}\n\t// Create the underlying data buffer...\n\tif ( nargs === 0 ) {\n\t\tbuf = new Float32Array( 0 ); // backward-compatibility\n\t} else if ( nargs === 1 ) {\n\t\tif ( isNonNegativeInteger( arguments[0] ) ) {\n\t\t\tbuf = new Float32Array( arguments[0]*2 );\n\t\t} else if ( isCollection( arguments[0] ) ) {\n\t\t\tbuf = arguments[ 0 ];\n\t\t\tlen = buf.length;\n\n\t\t\t// If provided a \"generic\" array, peak at the first value, and, if the value is a complex number, try to process as an array of complex numbers, falling back to \"normal\" typed array initialization if we fail and ensuring consistency if the first value had not been a complex number...\n\t\t\tif ( len && isArray( buf ) && isComplexLike( buf[0] ) ) {\n\t\t\t\tbuf = fromArray( new Float32Array( len*2 ), buf );\n\t\t\t\tif ( buf === null ) {\n\t\t\t\t\t// We failed and we are now forced to allocate a new array :-(\n\t\t\t\t\tif ( !isEven( len ) ) {\n\t\t\t\t\t\tthrow new RangeError( format( 'invalid argument. Array-like object arguments must have a length which is a multiple of two. Length: `%u`.', len ) );\n\t\t\t\t\t}\n\t\t\t\t\t// We failed, so fall back to directly setting values...\n\t\t\t\t\tbuf = new Float32Array( arguments[0] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ( isComplex64Array( buf ) ) {\n\t\t\t\t\tbuf = reinterpret64( buf, 0 );\n\t\t\t\t} else if ( isComplex128Array( buf ) ) {\n\t\t\t\t\tbuf = reinterpret128( buf, 0 );\n\t\t\t\t} else if ( !isEven( len ) ) {\n\t\t\t\t\tthrow new RangeError( format( 'invalid argument. Array-like object and typed array arguments must have a length which is a multiple of two. Length: `%u`.', len ) );\n\t\t\t\t}\n\t\t\t\tbuf = new Float32Array( buf );\n\t\t\t}\n\t\t} else if ( isArrayBuffer( arguments[0] ) ) {\n\t\t\tbuf = arguments[ 0 ];\n\t\t\tif ( !isInteger( buf.byteLength/BYTES_PER_ELEMENT ) ) {\n\t\t\t\tthrow new RangeError( format( 'invalid argument. ArrayBuffer byte length must be a multiple of %u. Byte length: `%u`.', BYTES_PER_ELEMENT, buf.byteLength ) );\n\t\t\t}\n\t\t\tbuf = new Float32Array( buf );\n\t\t} else if ( isObject( arguments[0] ) ) {\n\t\t\tbuf = arguments[ 0 ];\n\t\t\tif ( HAS_ITERATOR_SYMBOL === false ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Environment lacks Symbol.iterator support. Must provide a length, ArrayBuffer, typed array, or array-like object. Value: `%s`.', buf ) );\n\t\t\t}\n\t\t\tif ( !isFunction( buf[ ITERATOR_SYMBOL ] ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, or an iterable. Value: `%s`.', buf ) );\n\t\t\t}\n\t\t\tbuf = buf[ ITERATOR_SYMBOL ]();\n\t\t\tif ( !isFunction( buf.next ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, or an iterable. Value: `%s`.', buf ) ); // FIXME: `buf` is what is returned from above, NOT the original value\n\t\t\t}\n\t\t\tbuf = fromIterator( buf );\n\t\t\tif ( buf instanceof Error ) {\n\t\t\t\tthrow buf;\n\t\t\t}\n\t\t\tbuf = new Float32Array( buf );\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, or an iterable. Value: `%s`.', arguments[0] ) );\n\t\t}\n\t} else {\n\t\tbuf = arguments[ 0 ];\n\t\tif ( !isArrayBuffer( buf ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ArrayBuffer. Value: `%s`.', buf ) );\n\t\t}\n\t\tbyteOffset = arguments[ 1 ];\n\t\tif ( !isNonNegativeInteger( byteOffset ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Byte offset must be a nonnegative integer. Value: `%s`.', byteOffset ) );\n\t\t}\n\t\tif ( !isInteger( byteOffset/BYTES_PER_ELEMENT ) ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Byte offset must be a multiple of %u. Value: `%u`.', BYTES_PER_ELEMENT, byteOffset ) );\n\t\t}\n\t\tif ( nargs === 2 ) {\n\t\t\tlen = buf.byteLength - byteOffset;\n\t\t\tif ( !isInteger( len/BYTES_PER_ELEMENT ) ) {\n\t\t\t\tthrow new RangeError( format( 'invalid arguments. ArrayBuffer view byte length must be a multiple of %u. View byte length: `%u`.', BYTES_PER_ELEMENT, len ) );\n\t\t\t}\n\t\t\tbuf = new Float32Array( buf, byteOffset );\n\t\t} else {\n\t\t\tlen = arguments[ 2 ];\n\t\t\tif ( !isNonNegativeInteger( len ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Length must be a nonnegative integer. Value: `%s`.', len ) );\n\t\t\t}\n\t\t\tif ( (len*BYTES_PER_ELEMENT) > (buf.byteLength-byteOffset) ) {\n\t\t\t\tthrow new RangeError( format( 'invalid arguments. ArrayBuffer has insufficient capacity. Either decrease the array length or provide a bigger buffer. Minimum capacity: `%u`.', len*BYTES_PER_ELEMENT ) );\n\t\t\t}\n\t\t\tbuf = new Float32Array( buf, byteOffset, len*2 );\n\t\t}\n\t}\n\tsetReadOnly( this, '_buffer', buf );\n\tsetReadOnly( this, '_length', buf.length/2 );\n\n\treturn this;\n}\n\n/**\n* Size (in bytes) of each array element.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex64Array\n* @readonly\n* @type {PositiveInteger}\n* @default 8\n*\n* @example\n* var nbytes = Complex64Array.BYTES_PER_ELEMENT;\n* // returns 8\n*/\nsetReadOnly( Complex64Array, 'BYTES_PER_ELEMENT', BYTES_PER_ELEMENT );\n\n/**\n* Constructor name.\n*\n* @name name\n* @memberof Complex64Array\n* @readonly\n* @type {string}\n* @default 'Complex64Array'\n*\n* @example\n* var str = Complex64Array.name;\n* // returns 'Complex64Array'\n*/\nsetReadOnly( Complex64Array, 'name', 'Complex64Array' );\n\n/**\n* Creates a new 64-bit complex number array from an array-like object or an iterable.\n*\n* @name from\n* @memberof Complex64Array\n* @type {Function}\n* @param {(Collection|Iterable)} src - array-like object or iterable\n* @param {Function} [clbk] - callback to invoke for each source element\n* @param {*} [thisArg] - context\n* @throws {TypeError} `this` context must be a constructor\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be an array-like object or an iterable\n* @throws {TypeError} second argument must be a function\n* @throws {RangeError} array-like objects must have a length which is a multiple of two\n* @throws {TypeError} an iterator must return either a two element array containing real and imaginary components or a complex number\n* @throws {TypeError} when provided an iterator, a callback must return either a two element array containing real and imaginary components or a complex number\n* @returns {Complex64Array} 64-bit complex number array\n*\n* @example\n* var arr = Complex64Array.from( [ 1.0, -1.0 ] );\n* // returns <Complex64Array>\n*\n* var len = arr.length;\n* // returns 1\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n*\n* var arr = Complex64Array.from( [ new Complex64( 1.0, 1.0 ) ] );\n* // returns <Complex64Array>\n*\n* var len = arr.length;\n* // returns 1\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function clbk( v ) {\n*     return new Complex64( realf(v)*2.0, imagf(v)*2.0 );\n* }\n*\n* var arr = Complex64Array.from( [ new Complex64( 1.0, 1.0 ) ], clbk );\n* // returns <Complex64Array>\n*\n* var len = arr.length;\n* // returns 1\n*/\nsetReadOnly( Complex64Array, 'from', function from( src ) {\n\tvar thisArg;\n\tvar nargs;\n\tvar clbk;\n\tvar out;\n\tvar buf;\n\tvar tmp;\n\tvar get;\n\tvar len;\n\tvar flg;\n\tvar v;\n\tvar i;\n\tvar j;\n\tif ( !isFunction( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` context must be a constructor.' );\n\t}\n\tif ( !isComplexArrayConstructor( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tnargs = arguments.length;\n\tif ( nargs > 1 ) {\n\t\tclbk = arguments[ 1 ];\n\t\tif ( !isFunction( clbk ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a function. Value: `%s`.', clbk ) );\n\t\t}\n\t\tif ( nargs > 2 ) {\n\t\t\tthisArg = arguments[ 2 ];\n\t\t}\n\t}\n\tif ( isComplexArray( src ) ) {\n\t\tlen = src.length;\n\t\tif ( clbk ) {\n\t\t\tout = new this( len );\n\t\t\tbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\t\t\tj = 0;\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tv = clbk.call( thisArg, src.get( i ), i );\n\t\t\t\tif ( isComplexLike( v ) ) {\n\t\t\t\t\tbuf[ j ] = realf( v );\n\t\t\t\t\tbuf[ j+1 ] = imagf( v );\n\t\t\t\t} else if ( isArrayLikeObject( v ) && v.length >= 2 ) {\n\t\t\t\t\tbuf[ j ] = v[ 0 ];\n\t\t\t\t\tbuf[ j+1 ] = v[ 1 ];\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.', v ) );\n\t\t\t\t}\n\t\t\t\tj += 2; // stride\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t\treturn new this( src );\n\t}\n\tif ( isCollection( src ) ) {\n\t\tif ( clbk ) {\n\t\t\t// Note: array contents affect how we iterate over a provided data source. If only complex number objects, we can extract real and imaginary components. Otherwise, for non-complex number arrays (e.g., `Float64Array`, etc), we assume a strided array where real and imaginary components are interleaved. In the former case, we expect a callback to return real and imaginary components (possibly as a complex number). In the latter case, we expect a callback to return *either* a real or imaginary component.\n\n\t\t\tlen = src.length;\n\t\t\tif ( src.get && src.set ) {\n\t\t\t\tget = accessorGetter( 'default' );\n\t\t\t} else {\n\t\t\t\tget = getter( 'default' );\n\t\t\t}\n\t\t\t// Detect whether we've been provided an array which returns complex number objects...\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tif ( !isComplexLike( get( src, i ) ) ) {\n\t\t\t\t\tflg = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If an array does not contain only complex number objects, then we assume interleaved real and imaginary components...\n\t\t\tif ( flg ) {\n\t\t\t\tif ( !isEven( len ) ) {\n\t\t\t\t\tthrow new RangeError( format( 'invalid argument. First argument must have a length which is a multiple of %u. Length: `%u`.', 2, len ) );\n\t\t\t\t}\n\t\t\t\tout = new this( len/2 );\n\t\t\t\tbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tbuf[ i ] = clbk.call( thisArg, get( src, i ), i );\n\t\t\t\t}\n\t\t\t\treturn out;\n\t\t\t}\n\t\t\t// If an array contains only complex number objects, then we need to extract real and imaginary components...\n\t\t\tout = new this( len );\n\t\t\tbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\t\t\tj = 0;\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tv = clbk.call( thisArg, get( src, i ), i );\n\t\t\t\tif ( isComplexLike( v ) ) {\n\t\t\t\t\tbuf[ j ] = realf( v );\n\t\t\t\t\tbuf[ j+1 ] = imagf( v );\n\t\t\t\t} else if ( isArrayLikeObject( v ) && v.length >= 2 ) {\n\t\t\t\t\tbuf[ j ] = v[ 0 ];\n\t\t\t\t\tbuf[ j+1 ] = v[ 1 ];\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.', v ) );\n\t\t\t\t}\n\t\t\t\tj += 2; // stride\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t\treturn new this( src );\n\t}\n\tif ( isObject( src ) && HAS_ITERATOR_SYMBOL && isFunction( src[ ITERATOR_SYMBOL ] ) ) { // eslint-disable-line max-len\n\t\tbuf = src[ ITERATOR_SYMBOL ]();\n\t\tif ( !isFunction( buf.next ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object or an iterable. Value: `%s`.', src ) );\n\t\t}\n\t\tif ( clbk ) {\n\t\t\ttmp = fromIteratorMap( buf, clbk, thisArg );\n\t\t} else {\n\t\t\ttmp = fromIterator( buf );\n\t\t}\n\t\tif ( tmp instanceof Error ) {\n\t\t\tthrow tmp;\n\t\t}\n\t\tlen = tmp.length / 2;\n\t\tout = new this( len );\n\t\tbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tbuf[ i ] = tmp[ i ];\n\t\t}\n\t\treturn out;\n\t}\n\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object or an iterable. Value: `%s`.', src ) );\n});\n\n/**\n* Creates a new 64-bit complex number array from a variable number of arguments.\n*\n* @name of\n* @memberof Complex64Array\n* @type {Function}\n* @param {...*} element - array elements\n* @throws {TypeError} `this` context must be a constructor\n* @throws {TypeError} `this` must be a complex number array\n* @returns {Complex64Array} 64-bit complex number array\n*\n* @example\n* var arr = Complex64Array.of( 1.0, 1.0, 1.0, 1.0 );\n* // returns <Complex64Array>\n*\n* var len = arr.length;\n* // returns 2\n*/\nsetReadOnly( Complex64Array, 'of', function of() {\n\tvar args;\n\tvar i;\n\tif ( !isFunction( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` context must be a constructor.' );\n\t}\n\tif ( !isComplexArrayConstructor( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\targs = [];\n\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\targs.push( arguments[ i ] );\n\t}\n\treturn new this( args );\n});\n\n/**\n* Returns an array element with support for both nonnegative and negative integer indices.\n*\n* @name at\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {integer} idx - element index\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} must provide an integer\n* @returns {(Complex64|void)} array element\n*\n* @example\n* var arr = new Complex64Array( 10 );\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* var z = arr.at( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 0.0\n*\n* var im = imagf( z );\n* // returns 0.0\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, -2.0 ], 1 );\n* arr.set( [ 9.0, -9.0 ], 9 );\n*\n* z = arr.at( 0 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 1.0\n*\n* im = imagf( z );\n* // returns -1.0\n*\n* z = arr.at( -1 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 9.0\n*\n* im = imagf( z );\n* // returns -9.0\n*\n* z = arr.at( 100 );\n* // returns undefined\n*\n* z = arr.at( -100 );\n* // returns undefined\n*/\nsetReadOnly( Complex64Array.prototype, 'at', function at( idx ) {\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isInteger( idx ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an integer. Value: `%s`.', idx ) );\n\t}\n\tif ( idx < 0 ) {\n\t\tidx += this._length;\n\t}\n\tif ( idx < 0 || idx >= this._length ) {\n\t\treturn;\n\t}\n\treturn getComplex64( this._buffer, idx );\n});\n\n/**\n* Pointer to the underlying data buffer.\n*\n* @name buffer\n* @memberof Complex64Array.prototype\n* @readonly\n* @type {ArrayBuffer}\n*\n* @example\n* var arr = new Complex64Array( 10 );\n*\n* var buf = arr.buffer;\n* // returns <ArrayBuffer>\n*/\nsetReadOnlyAccessor( Complex64Array.prototype, 'buffer', function get() {\n\treturn this._buffer.buffer;\n});\n\n/**\n* Size (in bytes) of the array.\n*\n* @name byteLength\n* @memberof Complex64Array.prototype\n* @readonly\n* @type {NonNegativeInteger}\n*\n* @example\n* var arr = new Complex64Array( 10 );\n*\n* var byteLength = arr.byteLength;\n* // returns 80\n*/\nsetReadOnlyAccessor( Complex64Array.prototype, 'byteLength', function get() {\n\treturn this._buffer.byteLength;\n});\n\n/**\n* Offset (in bytes) of the array from the start of its underlying `ArrayBuffer`.\n*\n* @name byteOffset\n* @memberof Complex64Array.prototype\n* @readonly\n* @type {NonNegativeInteger}\n*\n* @example\n* var arr = new Complex64Array( 10 );\n*\n* var byteOffset = arr.byteOffset;\n* // returns 0\n*/\nsetReadOnlyAccessor( Complex64Array.prototype, 'byteOffset', function get() {\n\treturn this._buffer.byteOffset;\n});\n\n/**\n* Size (in bytes) of each array element.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex64Array.prototype\n* @readonly\n* @type {PositiveInteger}\n* @default 8\n*\n* @example\n* var arr = new Complex64Array( 10 );\n*\n* var nbytes = arr.BYTES_PER_ELEMENT;\n* // returns 8\n*/\nsetReadOnly( Complex64Array.prototype, 'BYTES_PER_ELEMENT', Complex64Array.BYTES_PER_ELEMENT );\n\n/**\n* Copies a sequence of elements within the array to the position starting at `target`.\n*\n* @name copyWithin\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {integer} target - index at which to start copying elements\n* @param {integer} start - source index at which to copy elements from\n* @param {integer} [end] - source index at which to stop copying elements from\n* @throws {TypeError} `this` must be a complex number array\n* @returns {Complex64Array} modified array\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* var arr = new Complex64Array( 4 );\n*\n* // Set the array elements:\n* arr.set( new Complex64( 1.0, 1.0 ), 0 );\n* arr.set( new Complex64( 2.0, 2.0 ), 1 );\n* arr.set( new Complex64( 3.0, 3.0 ), 2 );\n* arr.set( new Complex64( 4.0, 4.0 ), 3 );\n*\n* // Copy the first two elements to the last two elements:\n* arr.copyWithin( 2, 0, 2 );\n*\n* // Get the last array element:\n* var z = arr.get( 3 );\n*\n* var re = realf( z );\n* // returns 2.0\n*\n* var im = imagf( z );\n* // returns 2.0\n*/\nsetReadOnly( Complex64Array.prototype, 'copyWithin', function copyWithin( target, start ) {\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\t// FIXME: prefer a functional `copyWithin` implementation which addresses lack of universal browser support (e.g., IE11 and Safari) or ensure that typed arrays are polyfilled\n\tif ( arguments.length === 2 ) {\n\t\tthis._buffer.copyWithin( target*2, start*2 );\n\t} else {\n\t\tthis._buffer.copyWithin( target*2, start*2, arguments[2]*2 );\n\t}\n\treturn this;\n});\n\n/**\n* Returns an iterator for iterating over array key-value pairs.\n*\n* @name entries\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @throws {TypeError} `this` must be a complex number array\n* @returns {Iterator} iterator\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n*\n* var arr = [\n*     new Complex64( 1.0, 1.0 ),\n*     new Complex64( 2.0, 2.0 ),\n*     new Complex64( 3.0, 3.0 )\n* ];\n* arr = new Complex64Array( arr );\n*\n* // Create an iterator:\n* var it = arr.entries();\n*\n* // Iterate over the key-value pairs...\n* var v = it.next().value;\n* // returns [ 0, <Complex64> ]\n*\n* v = it.next().value;\n* // returns [ 1, <Complex64> ]\n*\n* v = it.next().value;\n* // returns [ 2, <Complex64> ]\n*\n* var bool = it.next().done;\n* // returns true\n*/\nsetReadOnly( Complex64Array.prototype, 'entries', function entries() {\n\tvar buffer;\n\tvar self;\n\tvar iter;\n\tvar len;\n\tvar FLG;\n\tvar i;\n\tvar j;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tself = this;\n\tbuffer = this._buffer;\n\tlen = this._length;\n\n\t// Initialize the iteration indices:\n\ti = -1;\n\tj = -2;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( ITERATOR_SYMBOL ) {\n\t\tsetReadOnly( iter, ITERATOR_SYMBOL, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar z;\n\t\ti += 1;\n\t\tif ( FLG || i >= len ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tj += 2;\n\t\tz = new Complex64( buffer[ j ], buffer[ j+1 ] );\n\t\treturn {\n\t\t\t'value': [ i, z ],\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn self.entries();\n\t}\n});\n\n/**\n* Tests whether all elements in an array pass a test implemented by a predicate function.\n*\n* @name every\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - predicate function execution context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @returns {boolean} boolean indicating whether all elements pass a test\n*\n* @example\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function predicate( v ) {\n*     return ( realf( v ) === imagf( v ) );\n* }\n*\n* var arr = new Complex64Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* var bool = arr.every( predicate );\n* // returns true\n*/\nsetReadOnly( Complex64Array.prototype, 'every', function every( predicate, thisArg ) {\n\tvar buf;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tbuf = this._buffer;\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tif ( !predicate.call( thisArg, getComplex64( buf, i ), i, this ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n});\n\n/**\n* Returns a modified typed array filled with a fill value.\n*\n* @name fill\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {ComplexLike} value - fill value\n* @param {integer} [start=0] - starting index (inclusive)\n* @param {integer} [end] - ending index (exclusive)\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a complex number\n* @throws {TypeError} second argument must be an integer\n* @throws {TypeError} third argument must be an integer\n*\n* @example\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* var arr = new Complex64Array( 3 );\n*\n* arr.fill( new Complex64( 1.0, 1.0 ), 1 );\n*\n* var z = arr.get( 1 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 1.0\n*\n* var im = imagf( z );\n* // returns 1.0\n*\n* z = arr.get( 1 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 1.0\n*\n* im = imagf( z );\n* // returns 1.0\n*/\nsetReadOnly( Complex64Array.prototype, 'fill', function fill( value, start, end ) {\n\tvar buf;\n\tvar len;\n\tvar idx;\n\tvar re;\n\tvar im;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isComplexLike( value ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a complex number. Value: `%s`.', value ) );\n\t}\n\tbuf = this._buffer;\n\tlen = this._length;\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isInteger( start ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', start ) );\n\t\t}\n\t\tif ( start < 0 ) {\n\t\t\tstart += len;\n\t\t\tif ( start < 0 ) {\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\tif ( !isInteger( end ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an integer. Value: `%s`.', end ) );\n\t\t\t}\n\t\t\tif ( end < 0 ) {\n\t\t\t\tend += len;\n\t\t\t\tif ( end < 0 ) {\n\t\t\t\t\tend = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( end > len ) {\n\t\t\t\tend = len;\n\t\t\t}\n\t\t} else {\n\t\t\tend = len;\n\t\t}\n\t} else {\n\t\tstart = 0;\n\t\tend = len;\n\t}\n\tre = realf( value );\n\tim = imagf( value );\n\tfor ( i = start; i < end; i++ ) {\n\t\tidx = 2*i;\n\t\tbuf[ idx ] = re;\n\t\tbuf[ idx+1 ] = im;\n\t}\n\treturn this;\n});\n\n/**\n* Returns a new array containing the elements of an array which pass a test implemented by a predicate function.\n*\n* @name filter\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - predicate function execution context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @returns {Complex64Array} complex number array\n*\n* @example\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function predicate( v ) {\n*     return ( realf( v ) === imagf( v ) );\n* }\n*\n* var arr = new Complex64Array( 3 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n*\n* var out = arr.filter( predicate );\n* // returns <Complex64Array>\n*\n* var len = out.length;\n* // returns 1\n*\n* var z = out.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 2.0\n*\n* var im = imagf( z );\n* // returns 2.0\n*/\nsetReadOnly( Complex64Array.prototype, 'filter', function filter( predicate, thisArg ) {\n\tvar buf;\n\tvar out;\n\tvar i;\n\tvar z;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tbuf = this._buffer;\n\tout = [];\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tz = getComplex64( buf, i );\n\t\tif ( predicate.call( thisArg, z, i, this ) ) {\n\t\t\tout.push( z );\n\t\t}\n\t}\n\treturn new this.constructor( out );\n});\n\n/**\n* Returns the first element in an array for which a predicate function returns a truthy value.\n*\n* @name find\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - predicate function execution context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @returns {(Complex64|void)} array element or undefined\n*\n* @example\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n* import Complex64 from '@stdlib/complex-float32';\n*\n* function predicate( v ) {\n*     return ( realf( v ) === imagf( v ) );\n* }\n*\n* var arr = new Complex64Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* var z = arr.find( predicate );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 1.0\n*\n* var im = imagf( z );\n* // returns 1.0\n*/\nsetReadOnly( Complex64Array.prototype, 'find', function find( predicate, thisArg ) {\n\tvar buf;\n\tvar i;\n\tvar z;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tbuf = this._buffer;\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tz = getComplex64( buf, i );\n\t\tif ( predicate.call( thisArg, z, i, this ) ) {\n\t\t\treturn z;\n\t\t}\n\t}\n});\n\n/**\n* Returns the index of the first element in an array for which a predicate function returns a truthy value.\n*\n* @name findIndex\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - predicate function execution context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @returns {integer} index or -1\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function predicate( v ) {\n*     return ( realf( v ) === imagf( v ) );\n* }\n*\n* var arr = new Complex64Array( 3 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, -2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* var idx = arr.findIndex( predicate );\n* // returns 2\n*/\nsetReadOnly( Complex64Array.prototype, 'findIndex', function findIndex( predicate, thisArg ) {\n\tvar buf;\n\tvar i;\n\tvar z;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tbuf = this._buffer;\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tz = getComplex64( buf, i );\n\t\tif ( predicate.call( thisArg, z, i, this ) ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n});\n\n/**\n* Returns the last element in an array for which a predicate function returns a truthy value.\n*\n* @name findLast\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - predicate function execution context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @returns {(Complex64|void)} array element or undefined\n*\n* @example\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n* import Complex64 from '@stdlib/complex-float32';\n*\n* function predicate( v ) {\n*     return ( realf( v ) === imagf( v ) );\n* }\n*\n* var arr = new Complex64Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* var z = arr.findLast( predicate );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 3.0\n*\n* var im = imagf( z );\n* // returns 3.0\n*/\nsetReadOnly( Complex64Array.prototype, 'findLast', function findLast( predicate, thisArg ) {\n\tvar buf;\n\tvar i;\n\tvar z;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tbuf = this._buffer;\n\tfor ( i = this._length-1; i >= 0; i-- ) {\n\t\tz = getComplex64( buf, i );\n\t\tif ( predicate.call( thisArg, z, i, this ) ) {\n\t\t\treturn z;\n\t\t}\n\t}\n});\n\n/**\n* Returns the index of the last element in an array for which a predicate function returns a truthy value.\n*\n* @name findLastIndex\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - predicate function execution context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @returns {integer} index or -1\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function predicate( v ) {\n*     return ( realf( v ) === imagf( v ) );\n* }\n*\n* var arr = new Complex64Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n*\n* var idx = arr.findLastIndex( predicate );\n* // returns 1\n*/\nsetReadOnly( Complex64Array.prototype, 'findLastIndex', function findLastIndex( predicate, thisArg ) {\n\tvar buf;\n\tvar i;\n\tvar z;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tbuf = this._buffer;\n\tfor ( i = this._length-1; i >= 0; i-- ) {\n\t\tz = getComplex64( buf, i );\n\t\tif ( predicate.call( thisArg, z, i, this ) ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n});\n\n/**\n* Invokes a function once for each array element.\n*\n* @name forEach\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {Function} fcn - function to invoke\n* @param {*} [thisArg] - function invocation context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n*\n* function log( v, i ) {\n*     console.log( '%s: %s', i, v.toString() );\n* }\n*\n* var arr = new Complex64Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* arr.forEach( log );\n*/\nsetReadOnly( Complex64Array.prototype, 'forEach', function forEach( fcn, thisArg ) {\n\tvar buf;\n\tvar i;\n\tvar z;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', fcn ) );\n\t}\n\tbuf = this._buffer;\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tz = getComplex64( buf, i );\n\t\tfcn.call( thisArg, z, i, this );\n\t}\n});\n\n/**\n* Returns an array element.\n*\n* @name get\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {NonNegativeInteger} idx - element index\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} must provide a nonnegative integer\n* @returns {(Complex64|void)} array element\n*\n* @example\n* var arr = new Complex64Array( 10 );\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* var z = arr.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 0.0\n*\n* var im = imagf( z );\n* // returns 0.0\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n*\n* z = arr.get( 0 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 1.0\n*\n* im = imagf( z );\n* // returns -1.0\n*\n* z = arr.get( 100 );\n* // returns undefined\n*/\nsetReadOnly( Complex64Array.prototype, 'get', function get( idx ) {\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isNonNegativeInteger( idx ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a nonnegative integer. Value: `%s`.', idx ) );\n\t}\n\tif ( idx >= this._length ) {\n\t\treturn;\n\t}\n\treturn getComplex64( this._buffer, idx );\n});\n\n/**\n* Returns a boolean indicating whether an array includes a provided value.\n*\n* @name includes\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {ComplexLike} searchElement - search element\n* @param {integer} [fromIndex=0] - starting index (inclusive)\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a complex number\n* @throws {TypeError} second argument must be an integer\n* @returns {boolean} boolean indicating whether an array includes a provided value\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n*\n* var arr = new Complex64Array( 5 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, -2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n* arr.set( [ 4.0, -4.0 ], 3 );\n* arr.set( [ 5.0, -5.0 ], 4 );\n*\n* var bool = arr.includes( new Complex64( 3.0, -3.0 ) );\n* // returns true\n*\n* bool = arr.includes( new Complex64( 3.0, -3.0 ), 3 );\n* // returns false\n*\n* bool = arr.includes( new Complex64( 4.0, -4.0 ), -3 );\n* // returns true\n*/\nsetReadOnly( Complex64Array.prototype, 'includes', function includes( searchElement, fromIndex ) {\n\tvar buf;\n\tvar idx;\n\tvar re;\n\tvar im;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isComplexLike( searchElement ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a complex number. Value: `%s`.', searchElement ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isInteger( fromIndex ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', fromIndex ) );\n\t\t}\n\t\tif ( fromIndex < 0 ) {\n\t\t\tfromIndex += this._length;\n\t\t\tif ( fromIndex < 0 ) {\n\t\t\t\tfromIndex = 0;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfromIndex = 0;\n\t}\n\tre = realf( searchElement );\n\tim = imagf( searchElement );\n\tbuf = this._buffer;\n\tfor ( i = fromIndex; i < this._length; i++ ) {\n\t\tidx = 2 * i;\n\t\tif ( re === buf[ idx ] && im === buf[ idx+1 ] ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n});\n\n/**\n* Returns the first index at which a given element can be found.\n*\n* @name indexOf\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {ComplexLike} searchElement - element to find\n* @param {integer} [fromIndex=0] - starting index (inclusive)\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a complex number\n* @throws {TypeError} second argument must be an integer\n* @returns {integer} index or -1\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n*\n* var arr = new Complex64Array( 10 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, -2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n* arr.set( [ 4.0, -4.0 ], 3 );\n* arr.set( [ 5.0, -5.0 ], 4 );\n*\n* var idx = arr.indexOf( new Complex64( 3.0, -3.0 ) );\n* // returns 2\n*\n* idx = arr.indexOf( new Complex64( 3.0, -3.0 ), 3 );\n* // returns -1\n*\n* idx = arr.indexOf( new Complex64( 4.0, -4.0 ), -3 );\n* // returns -1\n*/\nsetReadOnly( Complex64Array.prototype, 'indexOf', function indexOf( searchElement, fromIndex ) {\n\tvar buf;\n\tvar idx;\n\tvar re;\n\tvar im;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isComplexLike( searchElement ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a complex number. Value: `%s`.', searchElement ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isInteger( fromIndex ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', fromIndex ) );\n\t\t}\n\t\tif ( fromIndex < 0 ) {\n\t\t\tfromIndex += this._length;\n\t\t\tif ( fromIndex < 0 ) {\n\t\t\t\tfromIndex = 0;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfromIndex = 0;\n\t}\n\tre = realf( searchElement );\n\tim = imagf( searchElement );\n\tbuf = this._buffer;\n\tfor ( i = fromIndex; i < this._length; i++ ) {\n\t\tidx = 2 * i;\n\t\tif ( re === buf[ idx ] && im === buf[ idx+1 ] ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n});\n\n/**\n* Returns a new string by concatenating all array elements.\n*\n* @name join\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {string} [separator=','] - element separator\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a string\n* @returns {string} string representation\n*\n* @example\n* var arr = new Complex64Array( 2 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n*\n* var str = arr.join();\n* // returns '1 + 1i,2 + 2i'\n*\n* str = arr.join( '/' );\n* // returns '1 + 1i/2 + 2i'\n*/\nsetReadOnly( Complex64Array.prototype, 'join', function join( separator ) {\n\tvar out;\n\tvar buf;\n\tvar sep;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( arguments.length === 0 ) {\n\t\tsep = ',';\n\t} else if ( isString( separator ) ) {\n\t\tsep = separator;\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', separator ) );\n\t}\n\tout = [];\n\tbuf = this._buffer;\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tout.push( getComplex64( buf, i ).toString() );\n\t}\n\treturn out.join( sep );\n});\n\n/**\n* Returns the last index at which a given element can be found.\n*\n* @name lastIndexOf\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {ComplexLike} searchElement - element to find\n* @param {integer} [fromIndex] - index at which to start searching backward (inclusive)\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a complex number\n* @throws {TypeError} second argument must be an integer\n* @returns {integer} index or -1\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n*\n* var arr = new Complex64Array( 5 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, -2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n* arr.set( [ 4.0, -4.0 ], 3 );\n* arr.set( [ 3.0, -3.0 ], 4 );\n*\n* var idx = arr.lastIndexOf( new Complex64( 3.0, -3.0 ) );\n* // returns 4\n*\n* idx = arr.lastIndexOf( new Complex64( 3.0, -3.0 ), 3 );\n* // returns 2\n*\n* idx = arr.lastIndexOf( new Complex64( 5.0, -5.0 ), 3 );\n* // returns -1\n*\n* idx = arr.lastIndexOf( new Complex64( 2.0, -2.0 ), -3 );\n* // returns 1\n*/\nsetReadOnly( Complex64Array.prototype, 'lastIndexOf', function lastIndexOf( searchElement, fromIndex ) {\n\tvar buf;\n\tvar idx;\n\tvar re;\n\tvar im;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isComplexLike( searchElement ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a complex number. Value: `%s`.', searchElement ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isInteger( fromIndex ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', fromIndex ) );\n\t\t}\n\t\tif ( fromIndex >= this._length ) {\n\t\t\tfromIndex = this._length - 1;\n\t\t} else if ( fromIndex < 0 ) {\n\t\t\tfromIndex += this._length;\n\t\t}\n\t} else {\n\t\tfromIndex = this._length - 1;\n\t}\n\tre = realf( searchElement );\n\tim = imagf( searchElement );\n\tbuf = this._buffer;\n\tfor ( i = fromIndex; i >= 0; i-- ) {\n\t\tidx = 2 * i;\n\t\tif ( re === buf[ idx ] && im === buf[ idx+1 ] ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n});\n\n/**\n* Number of array elements.\n*\n* @name length\n* @memberof Complex64Array.prototype\n* @readonly\n* @type {NonNegativeInteger}\n*\n* @example\n* var arr = new Complex64Array( 10 );\n*\n* var len = arr.length;\n* // returns 10\n*/\nsetReadOnlyAccessor( Complex64Array.prototype, 'length', function get() {\n\treturn this._length;\n});\n\n/**\n* Returns a new array with each element being the result of a provided callback function.\n*\n* @name map\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {Function} fcn - callback function\n* @param {*} [thisArg] - callback function execution context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @returns {Complex64Array} complex number array\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32';\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function scale( v, i ) {\n*     return new Complex64( 2.0*realf( v ), 2.0*imagf( v ) );\n* }\n*\n* var arr = new Complex64Array( 3 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, -2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n*\n* var out = arr.map( scale );\n* // returns <Complex64Array>\n*\n* var z = out.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 2\n*\n* var im = imagf( z );\n* // returns -2\n*/\nsetReadOnly( Complex64Array.prototype, 'map', function map( fcn, thisArg ) {\n\tvar outbuf;\n\tvar buf;\n\tvar out;\n\tvar i;\n\tvar v;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', fcn ) );\n\t}\n\tbuf = this._buffer;\n\tout = new this.constructor( this._length );\n\toutbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tv = fcn.call( thisArg, getComplex64( buf, i ), i, this );\n\t\tif ( isComplexLike( v ) ) {\n\t\t\toutbuf[ 2*i ] = realf( v );\n\t\t\toutbuf[ (2*i)+1 ] = imagf( v );\n\t\t} else if ( isArrayLikeObject( v ) && v.length === 2 ) {\n\t\t\toutbuf[ 2*i ] = v[ 0 ];\n\t\t\toutbuf[ (2*i)+1 ] = v[ 1 ];\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.', v ) );\n\t\t}\n\t}\n\treturn out;\n});\n\n/**\n* Applies a provided callback function to each element of the array, in order, passing in the return value from the calculation on the preceding element and returning the accumulated result upon completion.\n*\n* @name reduce\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {Function} reducer - callback function\n* @param {*} [initialValue] - initial value\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @throws {Error} if not provided an initial value, the array must have at least one element\n* @returns {*} accumulated result\n*\n* @example\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n* import caddf from '@stdlib/math-base-ops-caddf';\n*\n* var arr = new Complex64Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* var z = arr.reduce( caddf );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 6.0\n*\n* var im = imagf( z );\n* // returns 6.0\n*/\nsetReadOnly( Complex64Array.prototype, 'reduce', function reduce( reducer, initialValue ) {\n\tvar buf;\n\tvar acc;\n\tvar len;\n\tvar v;\n\tvar i;\n\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( reducer ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', reducer ) );\n\t}\n\tbuf = this._buffer;\n\tlen = this._length;\n\tif ( arguments.length > 1 ) {\n\t\tacc = initialValue;\n\t\ti = 0;\n\t} else {\n\t\tif ( len === 0 ) {\n\t\t\tthrow new Error( 'invalid operation. If not provided an initial value, an array must contain at least one element.' );\n\t\t}\n\t\tacc = getComplex64( buf, 0 );\n\t\ti = 1;\n\t}\n\tfor ( ; i < len; i++ ) {\n\t\tv = getComplex64( buf, i );\n\t\tacc = reducer( acc, v, i, this );\n\t}\n\treturn acc;\n});\n\n/**\n* Reverses an array in-place.\n*\n* @name reverse\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @throws {TypeError} `this` must be a complex number array\n* @returns {Complex64Array} reversed array\n*\n* @example\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* var arr = new Complex64Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* var out = arr.reverse();\n* // returns <Complex64Array>\n*\n* var z = out.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 3.0\n*\n* var im = imagf( z );\n* // returns 3.0\n*\n* z = out.get( 1 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 2.0\n*\n* im = imagf( z );\n* // returns 2.0\n*\n* z = out.get( 2 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 1.0\n*\n* im = imagf( z );\n* // returns 1.0\n*/\nsetReadOnly( Complex64Array.prototype, 'reverse', function reverse() {\n\tvar buf;\n\tvar tmp;\n\tvar len;\n\tvar N;\n\tvar i;\n\tvar j;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tlen = this._length;\n\tbuf = this._buffer;\n\tN = floor( len / 2 );\n\tfor ( i = 0; i < N; i++ ) {\n\t\tj = len - i - 1;\n\t\ttmp = buf[ (2*i) ];\n\t\tbuf[ (2*i) ] = buf[ (2*j) ];\n\t\tbuf[ (2*j) ] = tmp;\n\t\ttmp = buf[ (2*i)+1 ];\n\t\tbuf[ (2*i)+1 ] = buf[ (2*j)+1 ];\n\t\tbuf[ (2*j)+1 ] = tmp;\n\t}\n\treturn this;\n});\n\n/**\n* Sets an array element.\n*\n* ## Notes\n*\n* -   When provided a typed array, real or complex, we must check whether the source array shares the same buffer as the target array and whether the underlying memory overlaps. In particular, we are concerned with the following scenario:\n*\n*     ```text\n*     buf:                ---------------------\n*     src: ---------------------\n*     ```\n*\n*     In the above, as we copy values from `src`, we will overwrite values in the `src` view, resulting in duplicated values copied into the end of `buf`, which is not intended. Hence, to avoid overwriting source values, we must **copy** source values to a temporary array.\n*\n*     In the other overlapping scenario,\n*\n*     ```text\n*     buf: ---------------------\n*     src:                ---------------------\n*     ```\n*\n*     by the time we begin copying into the overlapping region, we are copying from the end of `src`, a non-overlapping region, which means we don't run the risk of copying copied values, rather than the original `src` values, as intended.\n*\n* @name set\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {(Collection|Complex|ComplexArray)} value - value(s)\n* @param {NonNegativeInteger} [i=0] - element index at which to start writing values\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be either a complex number, an array-like object, or a complex number array\n* @throws {TypeError} index argument must be a nonnegative integer\n* @throws {RangeError} array-like objects must have a length which is a multiple of two\n* @throws {RangeError} index argument is out-of-bounds\n* @throws {RangeError} target array lacks sufficient storage to accommodate source values\n* @returns {void}\n*\n* @example\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* var arr = new Complex64Array( 10 );\n*\n* var z = arr.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 0.0\n*\n* var im = imagf( z );\n* // returns 0.0\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n*\n* z = arr.get( 0 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 1.0\n*\n* im = imagf( z );\n* // returns -1.0\n*/\nsetReadOnly( Complex64Array.prototype, 'set', function set( value ) {\n\t/* eslint-disable no-underscore-dangle */\n\tvar sbuf;\n\tvar idx;\n\tvar buf;\n\tvar tmp;\n\tvar flg;\n\tvar N;\n\tvar v;\n\tvar i;\n\tvar j;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tbuf = this._buffer;\n\tif ( arguments.length > 1 ) {\n\t\tidx = arguments[ 1 ];\n\t\tif ( !isNonNegativeInteger( idx ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Index argument must be a nonnegative integer. Value: `%s`.', idx ) );\n\t\t}\n\t} else {\n\t\tidx = 0;\n\t}\n\tif ( isComplexLike( value ) ) {\n\t\tif ( idx >= this._length ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Index argument is out-of-bounds. Value: `%u`.', idx ) );\n\t\t}\n\t\tidx *= 2;\n\t\tbuf[ idx ] = realf( value );\n\t\tbuf[ idx+1 ] = imagf( value );\n\t\treturn;\n\t}\n\tif ( isComplexArray( value ) ) {\n\t\tN = value._length;\n\t\tif ( idx+N > this._length ) {\n\t\t\tthrow new RangeError( 'invalid arguments. Target array lacks sufficient storage to accommodate source values.' );\n\t\t}\n\t\tsbuf = value._buffer;\n\n\t\t// Check for overlapping memory...\n\t\tj = buf.byteOffset + (idx*BYTES_PER_ELEMENT);\n\t\tif (\n\t\t\tsbuf.buffer === buf.buffer &&\n\t\t\t(\n\t\t\t\tsbuf.byteOffset < j &&\n\t\t\t\tsbuf.byteOffset+sbuf.byteLength > j\n\t\t\t)\n\t\t) {\n\t\t\t// We need to copy source values...\n\t\t\ttmp = new Float32Array( sbuf.length );\n\t\t\tfor ( i = 0; i < sbuf.length; i++ ) {\n\t\t\t\ttmp[ i ] = sbuf[ i ];\n\t\t\t}\n\t\t\tsbuf = tmp;\n\t\t}\n\t\tidx *= 2;\n\t\tj = 0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tbuf[ idx ] = sbuf[ j ];\n\t\t\tbuf[ idx+1 ] = sbuf[ j+1 ];\n\t\t\tidx += 2; // stride\n\t\t\tj += 2; // stride\n\t\t}\n\t\treturn;\n\t}\n\tif ( isCollection( value ) ) {\n\t\t// Detect whether we've been provided an array of complex numbers...\n\t\tN = value.length;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( !isComplexLike( value[ i ] ) ) {\n\t\t\t\tflg = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// If an array does not contain only complex numbers, then we assume interleaved real and imaginary components...\n\t\tif ( flg ) {\n\t\t\tif ( !isEven( N ) ) {\n\t\t\t\tthrow new RangeError( format( 'invalid argument. Array-like object arguments must have a length which is a multiple of two. Length: `%u`.', N ) );\n\t\t\t}\n\t\t\tif ( idx+(N/2) > this._length ) {\n\t\t\t\tthrow new RangeError( 'invalid arguments. Target array lacks sufficient storage to accommodate source values.' );\n\t\t\t}\n\t\t\tsbuf = value;\n\n\t\t\t// Check for overlapping memory...\n\t\t\tj = buf.byteOffset + (idx*BYTES_PER_ELEMENT);\n\t\t\tif (\n\t\t\t\tsbuf.buffer === buf.buffer &&\n\t\t\t\t(\n\t\t\t\t\tsbuf.byteOffset < j &&\n\t\t\t\t\tsbuf.byteOffset+sbuf.byteLength > j\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\t// We need to copy source values...\n\t\t\t\ttmp = new Float32Array( N );\n\t\t\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\t\t\ttmp[ i ] = sbuf[ i ]; // TODO: handle accessor arrays\n\t\t\t\t}\n\t\t\t\tsbuf = tmp;\n\t\t\t}\n\t\t\tidx *= 2;\n\t\t\tN /= 2;\n\t\t\tj = 0;\n\t\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\t\tbuf[ idx ] = sbuf[ j ];\n\t\t\t\tbuf[ idx+1 ] = sbuf[ j+1 ];\n\t\t\t\tidx += 2; // stride\n\t\t\t\tj += 2; // stride\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\t// If an array contains only complex numbers, then we need to extract real and imaginary components...\n\t\tif ( idx+N > this._length ) {\n\t\t\tthrow new RangeError( 'invalid arguments. Target array lacks sufficient storage to accommodate source values.' );\n\t\t}\n\t\tidx *= 2;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tv = value[ i ];\n\t\t\tbuf[ idx ] = realf( v );\n\t\t\tbuf[ idx+1 ] = imagf( v );\n\t\t\tidx += 2; // stride\n\t\t}\n\t\treturn;\n\t}\n\tthrow new TypeError( format( 'invalid argument. First argument must be either a complex number, an array-like object, or a complex number array. Value: `%s`.', value ) );\n\n\t/* eslint-enable no-underscore-dangle */\n});\n\n/**\n* Copies a portion of a typed array to a new typed array.\n*\n* @name slice\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {integer} [start=0] - starting index (inclusive)\n* @param {integer} [end] - ending index (exclusive)\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be an integer\n* @throws {TypeError} second argument must be an integer\n* @returns {Complex64Array} complex number array\n*\n* @example\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* var arr = new Complex64Array( 5 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, -2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n* arr.set( [ 4.0, -4.0 ], 3 );\n* arr.set( [ 5.0, -5.0 ], 4 );\n*\n* var out = arr.slice();\n* // returns <Complex64Array>\n*\n* var len = out.length;\n* // returns 5\n*\n* var z = out.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 1.0\n*\n* var im = imagf( z );\n* // returns -1.0\n*\n* z = out.get( len-1 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 5.0\n*\n* im = imagf( z );\n* // returns -5.0\n*\n* out = arr.slice( 1, -2 );\n* // returns <Complex64Array>\n*\n* len = out.length;\n* // returns 2\n*\n* z = out.get( 0 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 2.0\n*\n* im = imagf( z );\n* // returns -2.0\n*\n* z = out.get( len-1 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 3.0\n*\n* im = imagf( z );\n* // returns -3.0\n*/\nsetReadOnly( Complex64Array.prototype, 'slice', function slice( start, end ) {\n\tvar outlen;\n\tvar outbuf;\n\tvar out;\n\tvar idx;\n\tvar buf;\n\tvar len;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tbuf = this._buffer;\n\tlen = this._length;\n\tif ( arguments.length === 0 ) {\n\t\tstart = 0;\n\t\tend = len;\n\t} else {\n\t\tif ( !isInteger( start ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an integer. Value: `%s`.', start ) );\n\t\t}\n\t\tif ( start < 0 ) {\n\t\t\tstart += len;\n\t\t\tif ( start < 0 ) {\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t\tif ( arguments.length === 1 ) {\n\t\t\tend = len;\n\t\t} else {\n\t\t\tif ( !isInteger( end ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', end ) );\n\t\t\t}\n\t\t\tif ( end < 0 ) {\n\t\t\t\tend += len;\n\t\t\t\tif ( end < 0 ) {\n\t\t\t\t\tend = 0;\n\t\t\t\t}\n\t\t\t} else if ( end > len ) {\n\t\t\t\tend = len;\n\t\t\t}\n\t\t}\n\t}\n\tif ( start < end ) {\n\t\toutlen = end - start;\n\t} else {\n\t\toutlen = 0;\n\t}\n\tout = new this.constructor( outlen );\n\toutbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\tfor ( i = 0; i < outlen; i++ ) {\n\t\tidx = 2*(i+start);\n\t\toutbuf[ 2*i ] = buf[ idx ];\n\t\toutbuf[ (2*i)+1 ] = buf[ idx+1 ];\n\t}\n\treturn out;\n});\n\n/**\n* Tests whether at least one element in an array passes a test implemented by a predicate function.\n*\n* @name some\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - predicate function execution context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @returns {boolean} boolean indicating whether at least one element passes a test\n*\n* @example\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* function predicate( v ) {\n*     return ( realf( v ) === imagf( v ) );\n* }\n*\n* var arr = new Complex64Array( 3 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n*\n* var bool = arr.some( predicate );\n* // returns true\n*/\nsetReadOnly( Complex64Array.prototype, 'some', function some( predicate, thisArg ) {\n\tvar buf;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tbuf = this._buffer;\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tif ( predicate.call( thisArg, getComplex64( buf, i ), i, this ) ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n});\n\n/**\n* Creates a new typed array view over the same underlying `ArrayBuffer` and with the same underlying data type as the host array.\n*\n* @name subarray\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {integer} [begin=0] - starting index (inclusive)\n* @param {integer} [end] - ending index (exclusive)\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be an integer\n* @throws {TypeError} second argument must be an integer\n* @returns {Complex64Array} subarray\n*\n* @example\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* var arr = new Complex64Array( 5 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, -2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n* arr.set( [ 4.0, -4.0 ], 3 );\n* arr.set( [ 5.0, -5.0 ], 4 );\n*\n* var subarr = arr.subarray();\n* // returns <Complex64Array>\n*\n* var len = subarr.length;\n* // returns 5\n*\n* var z = subarr.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 1.0\n*\n* var im = imagf( z );\n* // returns -1.0\n*\n* z = subarr.get( len-1 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 5.0\n*\n* im = imagf( z );\n* // returns -5.0\n*\n* subarr = arr.subarray( 1, -2 );\n* // returns <Complex64Array>\n*\n* len = subarr.length;\n* // returns 2\n*\n* z = subarr.get( 0 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 2.0\n*\n* im = imagf( z );\n* // returns -2.0\n*\n* z = subarr.get( len-1 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 3.0\n*\n* im = imagf( z );\n* // returns -3.0\n*/\nsetReadOnly( Complex64Array.prototype, 'subarray', function subarray( begin, end ) {\n\tvar offset;\n\tvar buf;\n\tvar len;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tbuf = this._buffer;\n\tlen = this._length;\n\tif ( arguments.length === 0 ) {\n\t\tbegin = 0;\n\t\tend = len;\n\t} else {\n\t\tif ( !isInteger( begin ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an integer. Value: `%s`.', begin ) );\n\t\t}\n\t\tif ( begin < 0 ) {\n\t\t\tbegin += len;\n\t\t\tif ( begin < 0 ) {\n\t\t\t\tbegin = 0;\n\t\t\t}\n\t\t}\n\t\tif ( arguments.length === 1 ) {\n\t\t\tend = len;\n\t\t} else {\n\t\t\tif ( !isInteger( end ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', end ) );\n\t\t\t}\n\t\t\tif ( end < 0 ) {\n\t\t\t\tend += len;\n\t\t\t\tif ( end < 0 ) {\n\t\t\t\t\tend = 0;\n\t\t\t\t}\n\t\t\t} else if ( end > len ) {\n\t\t\t\tend = len;\n\t\t\t}\n\t\t}\n\t}\n\tif ( begin >= len ) {\n\t\tlen = 0;\n\t\toffset = buf.byteLength;\n\t} else if ( begin >= end ) {\n\t\tlen = 0;\n\t\toffset = buf.byteOffset + (begin*BYTES_PER_ELEMENT);\n\t} else {\n\t\tlen = end - begin;\n\t\toffset = buf.byteOffset + ( begin*BYTES_PER_ELEMENT );\n\t}\n\treturn new this.constructor( buf.buffer, offset, ( len < 0 ) ? 0 : len );\n});\n\n/**\n* Returns a new typed array containing the elements in reversed order.\n*\n* @name toReversed\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @throws {TypeError} `this` must be a complex number array\n* @returns {Complex64Array} reversed array\n*\n* @example\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n*\n* var arr = new Complex64Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* var out = arr.toReversed();\n* // returns <Complex64Array>\n*\n* var z = out.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 3.0\n*\n* var im = imagf( z );\n* // returns 3.0\n*\n* z = out.get( 1 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 2.0\n*\n* im = imagf( z );\n* // returns 2.0\n*\n* z = out.get( 2 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns 1.0\n*\n* im = imagf( z );\n* // returns 1.0\n*/\nsetReadOnly( Complex64Array.prototype, 'toReversed', function toReversed() {\n\tvar outbuf;\n\tvar out;\n\tvar len;\n\tvar buf;\n\tvar i;\n\tvar j;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tlen = this._length;\n\tout = new this.constructor( len );\n\tbuf = this._buffer;\n\toutbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\tfor ( i = 0; i < len; i++ ) {\n\t\tj = len - i - 1;\n\t\toutbuf[ (2*i) ] = buf[ (2*j) ];\n\t\toutbuf[ (2*i)+1 ] = buf[ (2*j)+1 ];\n\t}\n\treturn out;\n});\n\n/**\n* Serializes an array as a string.\n*\n* @name toString\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @throws {TypeError} `this` must be a complex number array\n* @returns {string} string representation\n*\n* @example\n* var arr = new Complex64Array( 2 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n*\n* var str = arr.toString();\n* // returns '1 + 1i,2 + 2i'\n*/\nsetReadOnly( Complex64Array.prototype, 'toString', function toString() {\n\tvar out;\n\tvar buf;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tout = [];\n\tbuf = this._buffer;\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tout.push( getComplex64( buf, i ).toString() );\n\t}\n\treturn out.join( ',' );\n});\n\n/**\n* Returns a new typed array with the element at a provided index replaced with a provided value.\n*\n* @name with\n* @memberof Complex64Array.prototype\n* @type {Function}\n* @param {integer} index - element index\n* @param {ComplexLike} value - new value\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be an integer\n* @throws {RangeError} index argument is out-of-bounds\n* @throws {TypeError} second argument must be a complex number\n* @returns {Complex64Array} new typed array\n*\n* @example\n* import realf from '@stdlib/complex-realf';\n* import imagf from '@stdlib/complex-imagf';\n* import Complex64 from '@stdlib/complex-float32';\n*\n* var arr = new Complex64Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* var out = arr.with( 0, new Complex64( 4.0, 4.0 ) );\n* // returns <Complex64Array>\n*\n* var z = out.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 4.0\n*\n* var im = imagf( z );\n* // returns 4.0\n*/\nsetReadOnly( Complex64Array.prototype, 'with', function copyWith( index, value ) {\n\tvar buf;\n\tvar out;\n\tvar len;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isInteger( index ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an integer. Value: `%s`.', index ) );\n\t}\n\tlen = this._length;\n\tif ( index < 0 ) {\n\t\tindex += len;\n\t}\n\tif ( index < 0 || index >= len ) {\n\t\tthrow new RangeError( format( 'invalid argument. Index argument is out-of-bounds. Value: `%s`.', index ) );\n\t}\n\tif ( !isComplexLike( value ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a complex number. Value: `%s`.', value ) );\n\t}\n\tout = new this.constructor( this._buffer );\n\tbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\tbuf[ 2*index ] = realf( value );\n\tbuf[ (2*index)+1 ] = imagf( value );\n\treturn out;\n});\n\n\n// EXPORTS //\n\nexport default Complex64Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport realf from '@stdlib/complex-realf';\nimport imagf from '@stdlib/complex-imagf';\n\n\n// MAIN //\n\n/**\n* Returns a strided array of real and imaginary components.\n*\n* @private\n* @param {Float32Array} buf - output array\n* @param {Array} arr - array containing complex numbers\n* @returns {(Float32Array|null)} output array or null\n*/\nfunction fromArray( buf, arr ) {\n\tvar len;\n\tvar v;\n\tvar i;\n\tvar j;\n\n\tlen = arr.length;\n\tj = 0;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tv = arr[ i ];\n\t\tif ( !isComplexLike( v ) ) {\n\t\t\treturn null;\n\t\t}\n\t\tbuf[ j ] = realf( v );\n\t\tbuf[ j+1 ] = imagf( v );\n\t\tj += 2; // stride\n\t}\n\treturn buf;\n}\n\n\n// EXPORTS //\n\nexport default fromArray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport defineProperty from '@stdlib/utils-define-property';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport format from '@stdlib/string-format';\nimport toStr from './tostring.js';\nimport toJSON from './tojson.js';\n\n\n// MAIN //\n\n/**\n* 128-bit complex number constructor.\n*\n* @constructor\n* @param {number} real - real component\n* @param {number} imag - imaginary component\n* @throws {TypeError} must invoke using the `new` keyword\n* @throws {TypeError} real component must be a number\n* @throws {TypeError} imaginary component must be a number\n* @returns {Complex128} 128-bit complex number\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n* // returns <Complex128>\n*/\nfunction Complex128( real, imag ) {\n\tif ( !( this instanceof Complex128 ) ) {\n\t\tthrow new TypeError( 'invalid invocation. Constructor must be called with the `new` keyword.' );\n\t}\n\tif ( !isNumber( real ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Real component must be a number. Value: `%s`.', real ) );\n\t}\n\tif ( !isNumber( imag ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Imaginary component must be a number. Value: `%s`.', imag ) );\n\t}\n\tdefineProperty( this, 're', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': real\n\t});\n\tdefineProperty( this, 'im', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'writable': false,\n\t\t'value': imag\n\t});\n\treturn this;\n}\n\n/**\n* Size (in bytes) of each component.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex128\n* @type {integer}\n* @returns {integer} size of each component\n*\n* @example\n* var nbytes = Complex128.BYTES_PER_ELEMENT;\n* // returns 8\n*/\nsetReadOnly( Complex128, 'BYTES_PER_ELEMENT', 8 );\n\n/**\n* Size (in bytes) of each component.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex128.prototype\n* @type {integer}\n* @returns {integer} size of each component\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var nbytes = z.BYTES_PER_ELEMENT;\n* // returns 8\n*/\nsetReadOnly( Complex128.prototype, 'BYTES_PER_ELEMENT', 8 );\n\n/**\n* Length (in bytes) of a complex number.\n*\n* @name byteLength\n* @memberof Complex128.prototype\n* @type {integer}\n* @returns {integer} byte length\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var nbytes = z.byteLength;\n* // returns 16\n*/\nsetReadOnly( Complex128.prototype, 'byteLength', 16 );\n\n/**\n* Serializes a complex number as a string.\n*\n* @name toString\n* @memberof Complex128.prototype\n* @type {Function}\n* @returns {string} serialized complex number\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var str = z.toString();\n* // returns '5 + 3i'\n*/\nsetReadOnly( Complex128.prototype, 'toString', toStr );\n\n/**\n* Serializes a complex number as a JSON object.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying a `Complex128` instance.\n*\n* @name toJSON\n* @memberof Complex128.prototype\n* @type {Function}\n* @returns {Object} serialized complex number\n*\n* @example\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var obj = z.toJSON();\n* // returns { 'type': 'Complex128', 're': 5.0, 'im': 3.0 }\n*/\nsetReadOnly( Complex128.prototype, 'toJSON', toJSON );\n\n\n// EXPORTS //\n\nexport default Complex128;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the real component of a double-precision complex floating-point number.\n*\n* @param {Complex} z - complex number\n* @returns {number} real component\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n*\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var re = real( z );\n* // returns 5.0\n*/\nfunction real( z ) {\n\treturn z.re;\n}\n\n\n// EXPORTS //\n\nexport default real;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the imaginary component of a double-precision complex floating-point number.\n*\n* @param {Complex} z - complex number\n* @returns {number} imaginary component\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n*\n* var z = new Complex128( 5.0, 3.0 );\n*\n* var im = imag( z );\n* // returns 3.0\n*/\nfunction imag( z ) {\n\treturn z.im;\n}\n\n\n// EXPORTS //\n\nexport default imag;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArrayLikeObject from '@stdlib/assert-is-array-like-object';\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport format from '@stdlib/string-format';\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\n\n\n// MAIN //\n\n/**\n* Returns an array of iterated values.\n*\n* @private\n* @param {Object} it - iterator\n* @returns {(Array|TypeError)} array or an error\n*/\nfunction fromIterator( it ) {\n\tvar out;\n\tvar v;\n\tvar z;\n\n\tout = [];\n\twhile ( true ) {\n\t\tv = it.next();\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t\tz = v.value;\n\t\tif ( isArrayLikeObject( z ) && z.length >= 2 ) {\n\t\t\tout.push( z[ 0 ], z[ 1 ] );\n\t\t} else if ( isComplexLike( z ) ) {\n\t\t\tout.push( real( z ), imag( z ) );\n\t\t} else {\n\t\t\treturn new TypeError( format( 'invalid argument. An iterator must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.', z ) );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default fromIterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArrayLikeObject from '@stdlib/assert-is-array-like-object';\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport realf from '@stdlib/complex-realf';\nimport imagf from '@stdlib/complex-imagf';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Returns an array of iterated values.\n*\n* @private\n* @param {Object} it - iterator\n* @param {Function} clbk - callback to invoke for each iterated value\n* @param {*} thisArg - invocation context\n* @returns {(Array|TypeError)} array or an error\n*/\nfunction fromIteratorMap( it, clbk, thisArg ) {\n\tvar out;\n\tvar v;\n\tvar z;\n\tvar i;\n\n\tout = [];\n\ti = -1;\n\twhile ( true ) {\n\t\tv = it.next();\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t\ti += 1;\n\t\tz = clbk.call( thisArg, v.value, i );\n\t\tif ( isArrayLikeObject( z ) && z.length >= 2 ) {\n\t\t\tout.push( z[ 0 ], z[ 1 ] );\n\t\t} else if ( isComplexLike( z ) ) {\n\t\t\tout.push( realf( z ), imagf( z ) );\n\t\t} else {\n\t\t\treturn new TypeError( format( 'invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.', z ) );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default fromIteratorMap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serializes a complex number as a string.\n*\n* @private\n* @returns {string} serialized complex number\n*/\nfunction toString() { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar str = '' + this.re;\n\tif ( this.im < 0 ) {\n\t\tstr += ' - ' + (-this.im);\n\t} else {\n\t\tstr += ' + ' + this.im;\n\t}\n\tstr += 'i';\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default toString;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Serializes a complex number as a JSON object.\n*\n* @private\n* @returns {Object} JSON representation\n*/\nfunction toJSON() {\n\t/* eslint-disable no-invalid-this */\n\tvar out = {};\n\tout.type = 'Complex128';\n\tout.re = this.re;\n\tout.im = this.im;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default toJSON;\n","/* eslint-disable no-restricted-syntax, max-lines, no-invalid-this */\n\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport isArrayLikeObject from '@stdlib/assert-is-array-like-object';\nimport isCollection from '@stdlib/assert-is-collection';\nimport isArrayBuffer from '@stdlib/assert-is-arraybuffer';\nimport isObject from '@stdlib/assert-is-object';\nimport isArray from '@stdlib/assert-is-array';\nimport isString from '@stdlib/assert-is-string';\nimport isFunction from '@stdlib/assert-is-function';\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport isEven from '@stdlib/math-base-assert-is-even';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport isComplex64Array from '@stdlib/array-base-assert-is-complex64array';\nimport isComplex128Array from '@stdlib/array-base-assert-is-complex128array';\nimport hasIteratorSymbolSupport from '@stdlib/assert-has-iterator-symbol-support';\nimport ITERATOR_SYMBOL from '@stdlib/symbol-iterator';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport Float64Array from '@stdlib/array-float64';\nimport Complex128 from '@stdlib/complex-float64';\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\nimport floor from '@stdlib/math-base-special-floor';\nimport reinterpret64 from '@stdlib/strided-base-reinterpret-complex64';\nimport reinterpret128 from '@stdlib/strided-base-reinterpret-complex128';\nimport getter from '@stdlib/array-base-getter';\nimport accessorGetter from '@stdlib/array-base-accessor-getter';\nimport format from '@stdlib/string-format';\nimport fromIterator from './from_iterator.js';\nimport fromIteratorMap from './from_iterator_map.js';\nimport fromArray from './from_array.js';\n\n\n// VARIABLES //\n\nvar BYTES_PER_ELEMENT = Float64Array.BYTES_PER_ELEMENT * 2;\nvar HAS_ITERATOR_SYMBOL = hasIteratorSymbolSupport();\n\n\n// FUNCTIONS //\n\n/**\n* Returns a boolean indicating if a value is a complex typed array.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a complex typed array\n*/\nfunction isComplexArray( value ) {\n\treturn (\n\t\tvalue instanceof Complex128Array ||\n\t\t(\n\t\t\ttypeof value === 'object' &&\n\t\t\tvalue !== null &&\n\t\t\t(\n\t\t\t\tvalue.constructor.name === 'Complex64Array' ||\n\t\t\t\tvalue.constructor.name === 'Complex128Array'\n\t\t\t) &&\n\t\t\ttypeof value._length === 'number' && // eslint-disable-line no-underscore-dangle\n\n\t\t\t// NOTE: we don't perform a more rigorous test here for a typed array for performance reasons, as robustly checking for a typed array instance could require walking the prototype tree and performing relatively expensive constructor checks...\n\t\t\ttypeof value._buffer === 'object' // eslint-disable-line no-underscore-dangle\n\t\t)\n\t);\n}\n\n/**\n* Returns a boolean indicating if a value is a complex typed array constructor.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a complex typed array constructor\n*/\nfunction isComplexArrayConstructor( value ) {\n\treturn (\n\t\tvalue === Complex128Array ||\n\n\t\t// NOTE: weaker test in order to avoid a circular dependency with Complex64Array...\n\t\tvalue.name === 'Complex64Array'\n\t);\n}\n\n/**\n* Retrieves a complex number from a complex number array buffer.\n*\n* @private\n* @param {Float64Array} buf - array buffer\n* @param {NonNegativeInteger} idx - element index\n* @returns {Complex128} complex number\n*/\nfunction getComplex128( buf, idx ) {\n\tidx *= 2;\n\treturn new Complex128( buf[ idx ], buf[ idx+1 ] );\n}\n\n\n// MAIN //\n\n/**\n* 128-bit complex number array constructor.\n*\n* @constructor\n* @param {(NonNegativeInteger|Collection|ArrayBuffer|Iterable)} [arg] - length, typed array, array-like object, buffer, or iterable\n* @param {NonNegativeInteger} [byteOffset=0] - byte offset\n* @param {NonNegativeInteger} [length] - view length\n* @throws {RangeError} ArrayBuffer byte length must be a multiple of `16`\n* @throws {RangeError} array-like object and typed array input arguments must have a length which is a multiple of two\n* @throws {TypeError} if provided only a single argument, must provide a valid argument\n* @throws {TypeError} byte offset must be a nonnegative integer\n* @throws {RangeError} byte offset must be a multiple of `16`\n* @throws {TypeError} view length must be a positive multiple of `16`\n* @throws {RangeError} must provide sufficient memory to accommodate byte offset and view length requirements\n* @throws {TypeError} an iterator must return either a two element array containing real and imaginary components or a complex number\n* @returns {Complex128Array} complex number array\n*\n* @example\n* var arr = new Complex128Array();\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 0\n*\n* @example\n* var arr = new Complex128Array( 2 );\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 2\n*\n* @example\n* var arr = new Complex128Array( [ 1.0, -1.0 ] );\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 1\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 32 );\n* var arr = new Complex128Array( buf );\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 2\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 32 );\n* var arr = new Complex128Array( buf, 16 );\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 1\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 64 );\n* var arr = new Complex128Array( buf, 16, 2 );\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 2\n*/\nfunction Complex128Array() {\n\tvar byteOffset;\n\tvar nargs;\n\tvar buf;\n\tvar len;\n\n\tnargs = arguments.length;\n\tif ( !(this instanceof Complex128Array) ) {\n\t\tif ( nargs === 0 ) {\n\t\t\treturn new Complex128Array();\n\t\t}\n\t\tif ( nargs === 1 ) {\n\t\t\treturn new Complex128Array( arguments[0] );\n\t\t}\n\t\tif ( nargs === 2 ) {\n\t\t\treturn new Complex128Array( arguments[0], arguments[1] );\n\t\t}\n\t\treturn new Complex128Array( arguments[0], arguments[1], arguments[2] );\n\t}\n\t// Create the underlying data buffer...\n\tif ( nargs === 0 ) {\n\t\tbuf = new Float64Array( 0 ); // backward-compatibility\n\t} else if ( nargs === 1 ) {\n\t\tif ( isNonNegativeInteger( arguments[0] ) ) {\n\t\t\tbuf = new Float64Array( arguments[0]*2 );\n\t\t} else if ( isCollection( arguments[0] ) ) {\n\t\t\tbuf = arguments[ 0 ];\n\t\t\tlen = buf.length;\n\n\t\t\t// If provided a \"generic\" array, peak at the first value, and, if the value is a complex number, try to process as an array of complex numbers, falling back to \"normal\" typed array initialization if we fail and ensuring consistency if the first value had not been a complex number...\n\t\t\tif ( len && isArray( buf ) && isComplexLike( buf[0] ) ) {\n\t\t\t\tbuf = fromArray( new Float64Array( len*2 ), buf );\n\t\t\t\tif ( buf === null ) {\n\t\t\t\t\t// We failed and we are now forced to allocate a new array :-(\n\t\t\t\t\tif ( !isEven( len ) ) {\n\t\t\t\t\t\tthrow new RangeError( format( 'invalid argument. Array-like object arguments must have a length which is a multiple of two. Length: `%u`.', len ) );\n\t\t\t\t\t}\n\t\t\t\t\t// We failed, so fall back to directly setting values...\n\t\t\t\t\tbuf = new Float64Array( arguments[0] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ( isComplex64Array( buf ) ) {\n\t\t\t\t\tbuf = reinterpret64( buf, 0 );\n\t\t\t\t} else if ( isComplex128Array( buf ) ) {\n\t\t\t\t\tbuf = reinterpret128( buf, 0 );\n\t\t\t\t} else if ( !isEven( len ) ) {\n\t\t\t\t\tthrow new RangeError( format( 'invalid argument. Array-like object and typed array arguments must have a length which is a multiple of two. Length: `%u`.', len ) );\n\t\t\t\t}\n\t\t\t\tbuf = new Float64Array( buf );\n\t\t\t}\n\t\t} else if ( isArrayBuffer( arguments[0] ) ) {\n\t\t\tbuf = arguments[ 0 ];\n\t\t\tif ( !isInteger( buf.byteLength/BYTES_PER_ELEMENT ) ) {\n\t\t\t\tthrow new RangeError( format( 'invalid argument. ArrayBuffer byte length must be a multiple of %u. Byte length: `%u`.', BYTES_PER_ELEMENT, buf.byteLength ) );\n\t\t\t}\n\t\t\tbuf = new Float64Array( buf );\n\t\t} else if ( isObject( arguments[0] ) ) {\n\t\t\tbuf = arguments[ 0 ];\n\t\t\tif ( HAS_ITERATOR_SYMBOL === false ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Environment lacks Symbol.iterator support. Must provide a length, ArrayBuffer, typed array, or array-like object. Value: `%s`.', buf ) );\n\t\t\t}\n\t\t\tif ( !isFunction( buf[ ITERATOR_SYMBOL ] ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, or an iterable. Value: `%s`.', buf ) );\n\t\t\t}\n\t\t\tbuf = buf[ ITERATOR_SYMBOL ]();\n\t\t\tif ( !isFunction( buf.next ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, or an iterable. Value: `%s`.', buf ) );\n\t\t\t}\n\t\t\tbuf = fromIterator( buf );\n\t\t\tif ( buf instanceof Error ) {\n\t\t\t\tthrow buf;\n\t\t\t}\n\t\t\tbuf = new Float64Array( buf );\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, or an iterable. Value: `%s`.', arguments[0] ) );\n\t\t}\n\t} else {\n\t\tbuf = arguments[ 0 ];\n\t\tif ( !isArrayBuffer( buf ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ArrayBuffer. Value: `%s`.', buf ) );\n\t\t}\n\t\tbyteOffset = arguments[ 1 ];\n\t\tif ( !isNonNegativeInteger( byteOffset ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Byte offset must be a nonnegative integer. Value: `%s`.', byteOffset ) );\n\t\t}\n\t\tif ( !isInteger( byteOffset/BYTES_PER_ELEMENT ) ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Byte offset must be a multiple of %u. Value: `%u`.', BYTES_PER_ELEMENT, byteOffset ) );\n\t\t}\n\t\tif ( nargs === 2 ) {\n\t\t\tlen = buf.byteLength - byteOffset;\n\t\t\tif ( !isInteger( len/BYTES_PER_ELEMENT ) ) {\n\t\t\t\tthrow new RangeError( format( 'invalid arguments. ArrayBuffer view byte length must be a multiple of %u. View byte length: `%u`.', BYTES_PER_ELEMENT, len ) );\n\t\t\t}\n\t\t\tbuf = new Float64Array( buf, byteOffset );\n\t\t} else {\n\t\t\tlen = arguments[ 2 ];\n\t\t\tif ( !isNonNegativeInteger( len ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Length must be a nonnegative integer. Value: `%s`.', len ) );\n\t\t\t}\n\t\t\tif ( (len*BYTES_PER_ELEMENT) > (buf.byteLength-byteOffset) ) {\n\t\t\t\tthrow new RangeError( format( 'invalid arguments. ArrayBuffer has insufficient capacity. Either decrease the array length or provide a bigger buffer. Minimum capacity: `%u`.', len*BYTES_PER_ELEMENT ) );\n\t\t\t}\n\t\t\tbuf = new Float64Array( buf, byteOffset, len*2 );\n\t\t}\n\t}\n\tsetReadOnly( this, '_buffer', buf );\n\tsetReadOnly( this, '_length', buf.length/2 );\n\n\treturn this;\n}\n\n/**\n* Size (in bytes) of each array element.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex128Array\n* @readonly\n* @type {PositiveInteger}\n* @default 16\n*\n* @example\n* var nbytes = Complex128Array.BYTES_PER_ELEMENT;\n* // returns 16\n*/\nsetReadOnly( Complex128Array, 'BYTES_PER_ELEMENT', BYTES_PER_ELEMENT );\n\n/**\n* Constructor name.\n*\n* @name name\n* @memberof Complex128Array\n* @readonly\n* @type {string}\n* @default 'Complex128Array'\n*\n* @example\n* var name = Complex128Array.name;\n* // returns 'Complex128Array'\n*/\nsetReadOnly( Complex128Array, 'name', 'Complex128Array' );\n\n/**\n* Creates a new 128-bit complex number array from an array-like object or an iterable.\n*\n* @name from\n* @memberof Complex128Array\n* @type {Function}\n* @param {(Collection|Object)} src - array-like object or iterable\n* @param {Function} [clbk] - callback to invoke for each source element\n* @param {*} [thisArg] - context\n* @throws {TypeError} `this` context must be a constructor\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be an array-like object or an iterable\n* @throws {TypeError} second argument must be a function\n* @throws {RangeError} array-like objects must have a length which is a multiple of two\n* @throws {TypeError} an iterator must return either a two element array containing real and imaginary components or a complex number\n* @throws {TypeError} when provided an iterator, a callback must return either a two element array containing real and imaginary components or a complex number\n* @returns {Complex128Array} 128-bit complex number array\n*\n* @example\n* var arr = Complex128Array.from( [ 1.0, -1.0 ] );\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 1\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n*\n* var arr = Complex128Array.from( [ new Complex128( 1.0, 1.0 ) ] );\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 1\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* function clbk( v ) {\n*     return new Complex128( real(v)*2.0, imag(v)*2.0 );\n* }\n*\n* var arr = Complex128Array.from( [ new Complex128( 1.0, 1.0 ) ], clbk );\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 1\n*/\nsetReadOnly( Complex128Array, 'from', function from( src ) {\n\tvar thisArg;\n\tvar nargs;\n\tvar clbk;\n\tvar out;\n\tvar buf;\n\tvar tmp;\n\tvar get;\n\tvar len;\n\tvar flg;\n\tvar v;\n\tvar i;\n\tvar j;\n\tif ( !isFunction( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` context must be a constructor.' );\n\t}\n\tif ( !isComplexArrayConstructor( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tnargs = arguments.length;\n\tif ( nargs > 1 ) {\n\t\tclbk = arguments[ 1 ];\n\t\tif ( !isFunction( clbk ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a function. Value: `%s`.', clbk ) );\n\t\t}\n\t\tif ( nargs > 2 ) {\n\t\t\tthisArg = arguments[ 2 ];\n\t\t}\n\t}\n\tif ( isComplexArray( src ) ) {\n\t\tlen = src.length;\n\t\tif ( clbk ) {\n\t\t\tout = new this( len );\n\t\t\tbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\t\t\tj = 0;\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tv = clbk.call( thisArg, src.get( i ), i );\n\t\t\t\tif ( isComplexLike( v ) ) {\n\t\t\t\t\tbuf[ j ] = real( v );\n\t\t\t\t\tbuf[ j+1 ] = imag( v );\n\t\t\t\t} else if ( isArrayLikeObject( v ) && v.length >= 2 ) {\n\t\t\t\t\tbuf[ j ] = v[ 0 ];\n\t\t\t\t\tbuf[ j+1 ] = v[ 1 ];\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.', v ) );\n\t\t\t\t}\n\t\t\t\tj += 2; // stride\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t\treturn new this( src );\n\t}\n\tif ( isCollection( src ) ) {\n\t\tif ( clbk ) {\n\t\t\t// Note: array contents affect how we iterate over a provided data source. If only complex number objects, we can extract real and imaginary components. Otherwise, for non-complex number arrays (e.g., `Float64Array`, etc), we assume a strided array where real and imaginary components are interleaved. In the former case, we expect a callback to return real and imaginary components (possibly as a complex number). In the latter case, we expect a callback to return *either* a real or imaginary component.\n\n\t\t\tlen = src.length;\n\t\t\tif ( src.get && src.set ) {\n\t\t\t\tget = accessorGetter( 'default' );\n\t\t\t} else {\n\t\t\t\tget = getter( 'default' );\n\t\t\t}\n\t\t\t// Detect whether we've been provided an array which returns complex number objects...\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tif ( !isComplexLike( get( src, i ) ) ) {\n\t\t\t\t\tflg = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If an array does not contain only complex number objects, then we assume interleaved real and imaginary components...\n\t\t\tif ( flg ) {\n\t\t\t\tif ( !isEven( len ) ) {\n\t\t\t\t\tthrow new RangeError( format( 'invalid argument. First argument must have a length which is a multiple of two. Length: `%u`.', len ) );\n\t\t\t\t}\n\t\t\t\tout = new this( len/2 );\n\t\t\t\tbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tbuf[ i ] = clbk.call( thisArg, get( src, i ), i );\n\t\t\t\t}\n\t\t\t\treturn out;\n\t\t\t}\n\t\t\t// If an array contains only complex number objects, then we need to extract real and imaginary components...\n\t\t\tout = new this( len );\n\t\t\tbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\t\t\tj = 0;\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tv = clbk.call( thisArg, get( src, i ), i );\n\t\t\t\tif ( isComplexLike( v ) ) {\n\t\t\t\t\tbuf[ j ] = real( v );\n\t\t\t\t\tbuf[ j+1 ] = imag( v );\n\t\t\t\t} else if ( isArrayLikeObject( v ) && v.length >= 2 ) {\n\t\t\t\t\tbuf[ j ] = v[ 0 ];\n\t\t\t\t\tbuf[ j+1 ] = v[ 1 ];\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.', v ) );\n\t\t\t\t}\n\t\t\t\tj += 2; // stride\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t\treturn new this( src );\n\t}\n\tif ( isObject( src ) && HAS_ITERATOR_SYMBOL && isFunction( src[ ITERATOR_SYMBOL ] ) ) { // eslint-disable-line max-len\n\t\tbuf = src[ ITERATOR_SYMBOL ]();\n\t\tif ( !isFunction( buf.next ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object or an iterable. Value: `%s`.', src ) );\n\t\t}\n\t\tif ( clbk ) {\n\t\t\ttmp = fromIteratorMap( buf, clbk, thisArg );\n\t\t} else {\n\t\t\ttmp = fromIterator( buf );\n\t\t}\n\t\tif ( tmp instanceof Error ) {\n\t\t\tthrow tmp;\n\t\t}\n\t\tlen = tmp.length / 2;\n\t\tout = new this( len );\n\t\tbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tbuf[ i ] = tmp[ i ];\n\t\t}\n\t\treturn out;\n\t}\n\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object or an iterable. Value: `%s`.', src ) );\n});\n\n/**\n* Creates a new 128-bit complex number array from a variable number of arguments.\n*\n* @name of\n* @memberof Complex128Array\n* @type {Function}\n* @param {...*} element - array elements\n* @throws {TypeError} `this` context must be a constructor\n* @throws {TypeError} `this` must be a complex number array\n* @returns {Complex128Array} 128-bit complex number array\n*\n* @example\n* var arr = Complex128Array.of( 1.0, 1.0, 1.0, 1.0 );\n* // returns <Complex128Array>\n*\n* var len = arr.length;\n* // returns 2\n*/\nsetReadOnly( Complex128Array, 'of', function of() {\n\tvar args;\n\tvar i;\n\tif ( !isFunction( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` context must be a constructor.' );\n\t}\n\tif ( !isComplexArrayConstructor( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\targs = [];\n\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\targs.push( arguments[ i ] );\n\t}\n\treturn new this( args );\n});\n\n/**\n* Returns an array element with support for both nonnegative and negative integer indices.\n*\n* @name at\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {integer} idx - element index\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} must provide an integer\n* @returns {(Complex128|void)} array element\n*\n* @example\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var arr = new Complex128Array( 10 );\n*\n* var z = arr.at( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 0.0\n*\n* var im = imag( z );\n* // returns 0.0\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, -2.0 ], 1 );\n* arr.set( [ 9.0, -9.0 ], 9 );\n*\n* z = arr.at( 0 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 1.0\n*\n* im = imag( z );\n* // returns -1.0\n*\n* z = arr.at( -1 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 9.0\n*\n* im = imag( z );\n* // returns -9.0\n*\n* z = arr.at( 100 );\n* // returns undefined\n*\n* z = arr.at( -100 );\n* // returns undefined\n*/\nsetReadOnly( Complex128Array.prototype, 'at', function at( idx ) {\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isInteger( idx ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an integer. Value: `%s`.', idx ) );\n\t}\n\tif ( idx < 0 ) {\n\t\tidx += this._length;\n\t}\n\tif ( idx < 0 || idx >= this._length ) {\n\t\treturn;\n\t}\n\treturn getComplex128( this._buffer, idx );\n});\n\n/**\n* Pointer to the underlying data buffer.\n*\n* @name buffer\n* @memberof Complex128Array.prototype\n* @readonly\n* @type {ArrayBuffer}\n*\n* @example\n* var arr = new Complex128Array( 10 );\n*\n* var buf = arr.buffer;\n* // returns <ArrayBuffer>\n*/\nsetReadOnlyAccessor( Complex128Array.prototype, 'buffer', function get() {\n\treturn this._buffer.buffer;\n});\n\n/**\n* Size (in bytes) of the array.\n*\n* @name byteLength\n* @memberof Complex128Array.prototype\n* @readonly\n* @type {NonNegativeInteger}\n*\n* @example\n* var arr = new Complex128Array( 10 );\n*\n* var byteLength = arr.byteLength;\n* // returns 160\n*/\nsetReadOnlyAccessor( Complex128Array.prototype, 'byteLength', function get() {\n\treturn this._buffer.byteLength;\n});\n\n/**\n* Offset (in bytes) of the array from the start of its underlying `ArrayBuffer`.\n*\n* @name byteOffset\n* @memberof Complex128Array.prototype\n* @readonly\n* @type {NonNegativeInteger}\n*\n* @example\n* var arr = new Complex128Array( 10 );\n*\n* var byteOffset = arr.byteOffset;\n* // returns 0\n*/\nsetReadOnlyAccessor( Complex128Array.prototype, 'byteOffset', function get() {\n\treturn this._buffer.byteOffset;\n});\n\n/**\n* Size (in bytes) of each array element.\n*\n* @name BYTES_PER_ELEMENT\n* @memberof Complex128Array.prototype\n* @readonly\n* @type {PositiveInteger}\n* @default 16\n*\n* @example\n* var arr = new Complex128Array( 10 );\n*\n* var nbytes = arr.BYTES_PER_ELEMENT;\n* // returns 16\n*/\nsetReadOnly( Complex128Array.prototype, 'BYTES_PER_ELEMENT', Complex128Array.BYTES_PER_ELEMENT );\n\n/**\n* Copies a sequence of elements within the array to the position starting at `target`.\n*\n* @name copyWithin\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {integer} target - index at which to start copying elements\n* @param {integer} start - source index at which to copy elements from\n* @param {integer} [end] - source index at which to stop copying elements from\n* @throws {TypeError} `this` must be a complex number array\n* @returns {Complex128Array} modified array\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var arr = new Complex128Array( 4 );\n*\n* // Set the array elements:\n* arr.set( new Complex128( 1.0, 1.0 ), 0 );\n* arr.set( new Complex128( 2.0, 2.0 ), 1 );\n* arr.set( new Complex128( 3.0, 3.0 ), 2 );\n* arr.set( new Complex128( 4.0, 4.0 ), 3 );\n*\n* // Copy the first two elements to the last two elements:\n* arr.copyWithin( 2, 0, 2 );\n*\n* // Get the last array element:\n* var z = arr.get( 3 );\n*\n* var re = real( z );\n* // returns 2.0\n*\n* var im = imag( z );\n* // returns 2.0\n*/\nsetReadOnly( Complex128Array.prototype, 'copyWithin', function copyWithin( target, start ) {\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\t// FIXME: prefer a functional `copyWithin` implementation which addresses lack of universal browser support (e.g., IE11 and Safari) or ensure that typed arrays are polyfilled\n\tif ( arguments.length === 2 ) {\n\t\tthis._buffer.copyWithin( target*2, start*2 );\n\t} else {\n\t\tthis._buffer.copyWithin( target*2, start*2, arguments[2]*2 );\n\t}\n\treturn this;\n});\n\n/**\n* Returns an iterator for iterating over array key-value pairs.\n*\n* @name entries\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @throws {TypeError} `this` must be a complex number array\n* @returns {Iterator} iterator\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n*\n* var arr = [\n*     new Complex128( 1.0, 1.0 ),\n*     new Complex128( 2.0, 2.0 ),\n*     new Complex128( 3.0, 3.0 )\n* ];\n* arr = new Complex128Array( arr );\n*\n* // Create an iterator:\n* var it = arr.entries();\n*\n* // Iterate over the key-value pairs...\n* var v = it.next().value;\n* // returns [ 0, <Complex128> ]\n*\n* v = it.next().value;\n* // returns [ 1, <Complex128> ]\n*\n* v = it.next().value;\n* // returns [ 2, <Complex128> ]\n*\n* var bool = it.next().done;\n* // returns true\n*/\nsetReadOnly( Complex128Array.prototype, 'entries', function entries() {\n\tvar buffer;\n\tvar self;\n\tvar iter;\n\tvar len;\n\tvar FLG;\n\tvar i;\n\tvar j;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tself = this;\n\tbuffer = this._buffer;\n\tlen = this._length;\n\n\t// Initialize the iteration indices:\n\ti = -1;\n\tj = -2;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( ITERATOR_SYMBOL ) {\n\t\tsetReadOnly( iter, ITERATOR_SYMBOL, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar z;\n\t\ti += 1;\n\t\tif ( FLG || i >= len ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tj += 2;\n\t\tz = new Complex128( buffer[ j ], buffer[ j+1 ] );\n\t\treturn {\n\t\t\t'value': [ i, z ],\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn self.entries();\n\t}\n});\n\n/**\n* Tests whether all elements in an array pass a test implemented by a predicate function.\n*\n* @name every\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - predicate function execution context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @returns {boolean} boolean indicating whether all elements pass a test\n*\n* @example\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* function predicate( v ) {\n*     return ( real( v ) === imag( v ) );\n* }\n*\n* var arr = new Complex128Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* var bool = arr.every( predicate );\n* // returns true\n*/\nsetReadOnly( Complex128Array.prototype, 'every', function every( predicate, thisArg ) {\n\tvar buf;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tbuf = this._buffer;\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tif ( !predicate.call( thisArg, getComplex128( buf, i ), i, this ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n});\n\n/**\n* Returns a modified typed array filled with a fill value.\n*\n* @name fill\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {ComplexLike} value - fill value\n* @param {integer} [start=0] - starting index (inclusive)\n* @param {integer} [end] - ending index (exclusive)\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a complex number\n* @throws {TypeError} second argument must be an integer\n* @throws {TypeError} third argument must be an integer\n*\n* @example\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var arr = new Complex128Array( 3 );\n*\n* arr.fill( new Complex128( 1.0, 1.0 ), 1 );\n*\n* var z = arr.get( 1 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 1.0\n*\n* var im = imag( z );\n* // returns 1.0\n*\n* z = arr.get( 1 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 1.0\n*\n* im = imag( z );\n* // returns 1.0\n*/\nsetReadOnly( Complex128Array.prototype, 'fill', function fill( value, start, end ) {\n\tvar buf;\n\tvar len;\n\tvar idx;\n\tvar re;\n\tvar im;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isComplexLike( value ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a complex number. Value: `%s`.', value ) );\n\t}\n\tbuf = this._buffer;\n\tlen = this._length;\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isInteger( start ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', start ) );\n\t\t}\n\t\tif ( start < 0 ) {\n\t\t\tstart += len;\n\t\t\tif ( start < 0 ) {\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\tif ( !isInteger( end ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an integer. Value: `%s`.', end ) );\n\t\t\t}\n\t\t\tif ( end < 0 ) {\n\t\t\t\tend += len;\n\t\t\t\tif ( end < 0 ) {\n\t\t\t\t\tend = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( end > len ) {\n\t\t\t\tend = len;\n\t\t\t}\n\t\t} else {\n\t\t\tend = len;\n\t\t}\n\t} else {\n\t\tstart = 0;\n\t\tend = len;\n\t}\n\tre = real( value );\n\tim = imag( value );\n\tfor ( i = start; i < end; i++ ) {\n\t\tidx = 2*i;\n\t\tbuf[ idx ] = re;\n\t\tbuf[ idx+1 ] = im;\n\t}\n\treturn this;\n});\n\n/**\n* Returns a new array containing the elements of an array which pass a test implemented by a predicate function.\n*\n* @name filter\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - predicate function execution context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @returns {Complex128Array} complex number array\n*\n* @example\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* function predicate( v ) {\n*     return ( real( v ) === imag( v ) );\n* }\n*\n* var arr = new Complex128Array( 3 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n*\n* var out = arr.filter( predicate );\n* // returns <Complex128Array>\n*\n* var len = out.length;\n* // returns 1\n*\n* var z = out.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 2.0\n*\n* var im = imag( z );\n* // returns 2.0\n*/\nsetReadOnly( Complex128Array.prototype, 'filter', function filter( predicate, thisArg ) {\n\tvar buf;\n\tvar out;\n\tvar i;\n\tvar z;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tbuf = this._buffer;\n\tout = [];\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tz = getComplex128( buf, i );\n\t\tif ( predicate.call( thisArg, z, i, this ) ) {\n\t\t\tout.push( z );\n\t\t}\n\t}\n\treturn new this.constructor( out );\n});\n\n/**\n* Returns the first element in an array for which a predicate function returns a truthy value.\n*\n* @name find\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - predicate function execution context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @returns {(Complex128|void)} array element or undefined\n*\n* @example\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* function predicate( v ) {\n*     return ( real( v ) === imag( v ) );\n* }\n*\n* var arr = new Complex128Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* var z = arr.find( predicate );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 1.0\n*\n* var im = imag( z );\n* // returns 1.0\n*/\nsetReadOnly( Complex128Array.prototype, 'find', function find( predicate, thisArg ) {\n\tvar buf;\n\tvar i;\n\tvar z;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tbuf = this._buffer;\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tz = getComplex128( buf, i );\n\t\tif ( predicate.call( thisArg, z, i, this ) ) {\n\t\t\treturn z;\n\t\t}\n\t}\n});\n\n/**\n* Returns the index of the first element in an array for which a predicate function returns a truthy value.\n*\n* @name findIndex\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - predicate function execution context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @returns {integer} index or -1\n*\n* @example\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* function predicate( v ) {\n*     return ( real( v ) === imag( v ) );\n* }\n*\n* var arr = new Complex128Array( 3 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, -2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* var idx = arr.findIndex( predicate );\n* // returns 2\n*/\nsetReadOnly( Complex128Array.prototype, 'findIndex', function findIndex( predicate, thisArg ) {\n\tvar buf;\n\tvar i;\n\tvar z;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tbuf = this._buffer;\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tz = getComplex128( buf, i );\n\t\tif ( predicate.call( thisArg, z, i, this ) ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n});\n\n/**\n* Returns the last element in an array for which a predicate function returns a truthy value.\n*\n* @name findLast\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - predicate function execution context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @returns {(Complex128|void)} array element or undefined\n*\n* @example\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* function predicate( v ) {\n*     return ( real( v ) === imag( v ) );\n* }\n*\n* var arr = new Complex128Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* var z = arr.findLast( predicate );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 3.0\n*\n* var im = imag( z );\n* // returns 3.0\n*/\nsetReadOnly( Complex128Array.prototype, 'findLast', function findLast( predicate, thisArg ) {\n\tvar buf;\n\tvar i;\n\tvar z;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tbuf = this._buffer;\n\tfor ( i = this._length-1; i >= 0; i-- ) {\n\t\tz = getComplex128( buf, i );\n\t\tif ( predicate.call( thisArg, z, i, this ) ) {\n\t\t\treturn z;\n\t\t}\n\t}\n});\n\n/**\n* Returns the index of the last element in an array for which a predicate function returns a truthy value.\n*\n* @name findLastIndex\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - predicate function execution context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @returns {integer} index or -1\n*\n* @example\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* function predicate( v ) {\n*     return ( real( v ) === imag( v ) );\n* }\n*\n* var arr = new Complex128Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n*\n* var idx = arr.findLastIndex( predicate );\n* // returns 1\n*/\nsetReadOnly( Complex128Array.prototype, 'findLastIndex', function findLastIndex( predicate, thisArg ) {\n\tvar buf;\n\tvar i;\n\tvar z;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tbuf = this._buffer;\n\tfor ( i = this._length-1; i >= 0; i-- ) {\n\t\tz = getComplex128( buf, i );\n\t\tif ( predicate.call( thisArg, z, i, this ) ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n});\n\n/**\n* Invokes a function once for each array element.\n*\n* @name forEach\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {Function} fcn - function to invoke\n* @param {*} [thisArg] - function invocation context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n*\n* function log( v, i ) {\n*     console.log( '%s: %s', i, v.toString() );\n* }\n*\n* var arr = new Complex128Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* arr.forEach( log );\n*/\nsetReadOnly( Complex128Array.prototype, 'forEach', function forEach( fcn, thisArg ) {\n\tvar buf;\n\tvar i;\n\tvar z;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', fcn ) );\n\t}\n\tbuf = this._buffer;\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tz = getComplex128( buf, i );\n\t\tfcn.call( thisArg, z, i, this );\n\t}\n});\n\n/**\n* Returns an array element.\n*\n* @name get\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {NonNegativeInteger} idx - element index\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} must provide a nonnegative integer\n* @returns {(Complex128|void)} array element\n*\n* @example\n* var arr = new Complex128Array( 10 );\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var z = arr.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 0.0\n*\n* var im = imag( z );\n* // returns 0.0\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n*\n* z = arr.get( 0 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 1.0\n*\n* im = imag( z );\n* // returns -1.0\n*\n* z = arr.get( 100 );\n* // returns undefined\n*/\nsetReadOnly( Complex128Array.prototype, 'get', function get( idx ) {\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isNonNegativeInteger( idx ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a nonnegative integer. Value: `%s`.', idx ) );\n\t}\n\tif ( idx >= this._length ) {\n\t\treturn;\n\t}\n\treturn getComplex128( this._buffer, idx );\n});\n\n/**\n* Number of array elements.\n*\n* @name length\n* @memberof Complex128Array.prototype\n* @readonly\n* @type {NonNegativeInteger}\n*\n* @example\n* var arr = new Complex128Array( 10 );\n*\n* var len = arr.length;\n* // returns 10\n*/\nsetReadOnlyAccessor( Complex128Array.prototype, 'length', function get() {\n\treturn this._length;\n});\n\n/**\n* Returns a boolean indicating whether an array includes a provided value.\n*\n* @name includes\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {ComplexLike} searchElement - search element\n* @param {integer} [fromIndex=0] - starting index (inclusive)\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a complex number\n* @throws {TypeError} second argument must be an integer\n* @returns {boolean} boolean indicating whether an array includes a provided value\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n*\n* var arr = new Complex128Array( 5 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, -2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n* arr.set( [ 4.0, -4.0 ], 3 );\n* arr.set( [ 5.0, -5.0 ], 4 );\n*\n* var bool = arr.includes( new Complex128( 3.0, -3.0 ) );\n* // returns true\n*\n* bool = arr.includes( new Complex128( 3.0, -3.0 ), 3 );\n* // returns false\n*\n* bool = arr.includes( new Complex128( 4.0, -4.0 ), -3 );\n* // returns true\n*/\nsetReadOnly( Complex128Array.prototype, 'includes', function includes( searchElement, fromIndex ) {\n\tvar buf;\n\tvar idx;\n\tvar re;\n\tvar im;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isComplexLike( searchElement ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a complex number. Value: `%s`.', searchElement ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isInteger( fromIndex ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', fromIndex ) );\n\t\t}\n\t\tif ( fromIndex < 0 ) {\n\t\t\tfromIndex += this._length;\n\t\t\tif ( fromIndex < 0 ) {\n\t\t\t\tfromIndex = 0;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfromIndex = 0;\n\t}\n\tre = real( searchElement );\n\tim = imag( searchElement );\n\tbuf = this._buffer;\n\tfor ( i = fromIndex; i < this._length; i++ ) {\n\t\tidx = 2 * i;\n\t\tif ( re === buf[ idx ] && im === buf[ idx+1 ] ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n});\n\n/**\n* Returns the first index at which a given element can be found.\n*\n* @name indexOf\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {ComplexLike} searchElement - element to find\n* @param {integer} [fromIndex=0] - starting index (inclusive)\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a complex number\n* @throws {TypeError} second argument must be an integer\n* @returns {integer} index or -1\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n*\n* var arr = new Complex128Array( 5 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, -2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n* arr.set( [ 4.0, -4.0 ], 3 );\n* arr.set( [ 5.0, -5.0 ], 4 );\n*\n* var idx = arr.indexOf( new Complex128( 3.0, -3.0 ) );\n* // returns 2\n*\n* idx = arr.indexOf( new Complex128( 3.0, -3.0 ), 3 );\n* // returns -1\n*\n* idx = arr.indexOf( new Complex128( 4.0, -4.0 ), -3 );\n* // returns 3\n*/\nsetReadOnly( Complex128Array.prototype, 'indexOf', function indexOf( searchElement, fromIndex ) {\n\tvar buf;\n\tvar idx;\n\tvar re;\n\tvar im;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isComplexLike( searchElement ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a complex number. Value: `%s`.', searchElement ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isInteger( fromIndex ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', fromIndex ) );\n\t\t}\n\t\tif ( fromIndex < 0 ) {\n\t\t\tfromIndex += this._length;\n\t\t\tif ( fromIndex < 0 ) {\n\t\t\t\tfromIndex = 0;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfromIndex = 0;\n\t}\n\tre = real( searchElement );\n\tim = imag( searchElement );\n\tbuf = this._buffer;\n\tfor ( i = fromIndex; i < this._length; i++ ) {\n\t\tidx = 2 * i;\n\t\tif ( re === buf[ idx ] && im === buf[ idx+1 ] ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n});\n\n/**\n* Returns a new string by concatenating all array elements.\n*\n* @name join\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {string} [separator=','] - element separator\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a string\n* @returns {string} string representation\n*\n* @example\n* var arr = new Complex128Array( 2 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n*\n* var str = arr.join();\n* // returns '1 + 1i,2 + 2i'\n*\n* str = arr.join( '/' );\n* // returns '1 + 1i/2 + 2i'\n*/\nsetReadOnly( Complex128Array.prototype, 'join', function join( separator ) {\n\tvar out;\n\tvar buf;\n\tvar sep;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( arguments.length === 0 ) {\n\t\tsep = ',';\n\t} else if ( isString( separator ) ) {\n\t\tsep = separator;\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', separator ) );\n\t}\n\tout = [];\n\tbuf = this._buffer;\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tout.push( getComplex128( buf, i ).toString() );\n\t}\n\treturn out.join( sep );\n});\n\n/**\n* Returns the last index at which a given element can be found.\n*\n* @name lastIndexOf\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {ComplexLike} searchElement - element to find\n* @param {integer} [fromIndex] - index at which to start searching backward (inclusive)\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a complex number\n* @throws {TypeError} second argument must be an integer\n* @returns {integer} index or -1\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n*\n* var arr = new Complex128Array( 5 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, -2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n* arr.set( [ 4.0, -4.0 ], 3 );\n* arr.set( [ 3.0, -3.0 ], 4 );\n*\n* var idx = arr.lastIndexOf( new Complex128( 3.0, -3.0 ) );\n* // returns 4\n*\n* idx = arr.lastIndexOf( new Complex128( 3.0, -3.0 ), 3 );\n* // returns 2\n*\n* idx = arr.lastIndexOf( new Complex128( 5.0, -5.0 ), 3 );\n* // returns -1\n*\n* idx = arr.lastIndexOf( new Complex128( 2.0, -2.0 ), -3 );\n* // returns 1\n*/\nsetReadOnly( Complex128Array.prototype, 'lastIndexOf', function lastIndexOf( searchElement, fromIndex ) {\n\tvar buf;\n\tvar idx;\n\tvar re;\n\tvar im;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isComplexLike( searchElement ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a complex number. Value: `%s`.', searchElement ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isInteger( fromIndex ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', fromIndex ) );\n\t\t}\n\t\tif ( fromIndex >= this._length ) {\n\t\t\tfromIndex = this._length - 1;\n\t\t} else if ( fromIndex < 0 ) {\n\t\t\tfromIndex += this._length;\n\t\t}\n\t} else {\n\t\tfromIndex = this._length - 1;\n\t}\n\tre = real( searchElement );\n\tim = imag( searchElement );\n\tbuf = this._buffer;\n\tfor ( i = fromIndex; i >= 0; i-- ) {\n\t\tidx = 2 * i;\n\t\tif ( re === buf[ idx ] && im === buf[ idx+1 ] ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n});\n\n/**\n* Returns a new array with each element being the result of a provided callback function.\n*\n* @name map\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {Function} fcn - callback function\n* @param {*} [thisArg] - callback function execution context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @returns {Complex128Array} complex number array\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* function scale( v, i ) {\n*     return new Complex128( 2.0*real( v ), 2.0*imag( v ) );\n* }\n*\n* var arr = new Complex128Array( 3 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, -2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n*\n* var out = arr.map( scale );\n* // returns <Complex128Array>\n*\n* var z = out.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 2.0\n*\n* var im = imag( z );\n* // returns -2.0\n*/\nsetReadOnly( Complex128Array.prototype, 'map', function map( fcn, thisArg ) {\n\tvar outbuf;\n\tvar buf;\n\tvar out;\n\tvar i;\n\tvar v;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', fcn ) );\n\t}\n\tbuf = this._buffer;\n\tout = new this.constructor( this._length );\n\toutbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tv = fcn.call( thisArg, getComplex128( buf, i ), i, this );\n\t\tif ( isComplexLike( v ) ) {\n\t\t\toutbuf[ 2*i ] = real( v );\n\t\t\toutbuf[ (2*i)+1 ] = imag( v );\n\t\t} else if ( isArrayLikeObject( v ) && v.length === 2 ) {\n\t\t\toutbuf[ 2*i ] = v[ 0 ];\n\t\t\toutbuf[ (2*i)+1 ] = v[ 1 ];\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.', v ) );\n\t\t}\n\t}\n\treturn out;\n});\n\n/**\n* Applies a provided callback function to each element of the array, in order, passing in the return value from the calculation on the preceding element and returning the accumulated result upon completion.\n*\n* @name reduce\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {Function} reducer - callback function\n* @param {*} [initialValue] - initial value\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @throws {Error} if not provided an initial value, the array must have at least one element\n* @returns {*} accumulated result\n*\n* @example\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n* import cadd from '@stdlib/math-base-ops-cadd';\n*\n* var arr = new Complex128Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* var z = arr.reduce( cadd );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 6.0\n*\n* var im = imag( z );\n* // returns 6.0\n*/\nsetReadOnly( Complex128Array.prototype, 'reduce', function reduce( reducer, initialValue ) {\n\tvar buf;\n\tvar acc;\n\tvar len;\n\tvar v;\n\tvar i;\n\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( reducer ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', reducer ) );\n\t}\n\tbuf = this._buffer;\n\tlen = this._length;\n\tif ( arguments.length > 1 ) {\n\t\tacc = initialValue;\n\t\ti = 0;\n\t} else {\n\t\tif ( len === 0 ) {\n\t\t\tthrow new Error( 'invalid operation. If not provided an initial value, an array must contain at least one element.' );\n\t\t}\n\t\tacc = getComplex128( buf, 0 );\n\t\ti = 1;\n\t}\n\tfor ( ; i < len; i++ ) {\n\t\tv = getComplex128( buf, i );\n\t\tacc = reducer( acc, v, i, this );\n\t}\n\treturn acc;\n});\n\n/**\n* Reverses an array in-place.\n*\n* @name reverse\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @throws {TypeError} `this` must be a complex number array\n* @returns {Complex128Array} reversed array\n*\n* @example\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var arr = new Complex128Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* var out = arr.reverse();\n* // returns <Complex128Array>\n*\n* var z = out.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 3.0\n*\n* var im = imag( z );\n* // returns 3.0\n*\n* z = out.get( 1 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 2.0\n*\n* im = imag( z );\n* // returns 2.0\n*\n* z = out.get( 2 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 1.0\n*\n* im = imag( z );\n* // returns 1.0\n*/\nsetReadOnly( Complex128Array.prototype, 'reverse', function reverse() {\n\tvar buf;\n\tvar tmp;\n\tvar len;\n\tvar N;\n\tvar i;\n\tvar j;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tlen = this._length;\n\tbuf = this._buffer;\n\tN = floor( len / 2 );\n\tfor ( i = 0; i < N; i++ ) {\n\t\tj = len - i - 1;\n\t\ttmp = buf[ (2*i) ];\n\t\tbuf[ (2*i) ] = buf[ (2*j) ];\n\t\tbuf[ (2*j) ] = tmp;\n\t\ttmp = buf[ (2*i)+1 ];\n\t\tbuf[ (2*i)+1 ] = buf[ (2*j)+1 ];\n\t\tbuf[ (2*j)+1 ] = tmp;\n\t}\n\treturn this;\n});\n\n/**\n* Sets an array element.\n*\n* ## Notes\n*\n* -   When provided a typed array, real or complex, we must check whether the source array shares the same buffer as the target array and whether the underlying memory overlaps. In particular, we are concerned with the following scenario:\n*\n*     ```text\n*     buf:                ---------------------\n*     src: ---------------------\n*     ```\n*\n*     In the above, as we copy values from `src`, we will overwrite values in the `src` view, resulting in duplicated values copied into the end of `buf`, which is not intended. Hence, to avoid overwriting source values, we must **copy** source values to a temporary array.\n*\n*     In the other overlapping scenario,\n*\n*     ```text\n*     buf: ---------------------\n*     src:                ---------------------\n*     ```\n*\n*     by the time we begin copying into the overlapping region, we are copying from the end of `src`, a non-overlapping region, which means we don't run the risk of copying copied values, rather than the original `src` values as intended.\n*\n* @name set\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {(Collection|Complex|ComplexArray)} value - value(s)\n* @param {NonNegativeInteger} [i=0] - element index at which to start writing values\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be either a complex number, an array-like object, or a complex number array\n* @throws {TypeError} index argument must be a nonnegative integer\n* @throws {RangeError} array-like objects must have a length which is a multiple of two\n* @throws {RangeError} index argument is out-of-bounds\n* @throws {RangeError} target array lacks sufficient storage to accommodate source values\n* @returns {void}\n*\n* @example\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var arr = new Complex128Array( 10 );\n*\n* var z = arr.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 0.0\n*\n* var im = imag( z );\n* // returns 0.0\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n*\n* z = arr.get( 0 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 1.0\n*\n* im = imag( z );\n* // returns -1.0\n*/\nsetReadOnly( Complex128Array.prototype, 'set', function set( value ) {\n\t/* eslint-disable no-underscore-dangle */\n\tvar sbuf;\n\tvar idx;\n\tvar buf;\n\tvar tmp;\n\tvar flg;\n\tvar N;\n\tvar v;\n\tvar i;\n\tvar j;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tbuf = this._buffer;\n\tif ( arguments.length > 1 ) {\n\t\tidx = arguments[ 1 ];\n\t\tif ( !isNonNegativeInteger( idx ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Index argument must be a nonnegative integer. Value: `%s`.', idx ) );\n\t\t}\n\t} else {\n\t\tidx = 0;\n\t}\n\tif ( isComplexLike( value ) ) {\n\t\tif ( idx >= this._length ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Index argument is out-of-bounds. Value: `%u`.', idx ) );\n\t\t}\n\t\tidx *= 2;\n\t\tbuf[ idx ] = real( value );\n\t\tbuf[ idx+1 ] = imag( value );\n\t\treturn;\n\t}\n\tif ( isComplexArray( value ) ) {\n\t\tN = value._length;\n\t\tif ( idx+N > this._length ) {\n\t\t\tthrow new RangeError( 'invalid arguments. Target array lacks sufficient storage to accommodate source values.' );\n\t\t}\n\t\tsbuf = value._buffer;\n\n\t\t// Check for overlapping memory...\n\t\tj = buf.byteOffset + (idx*BYTES_PER_ELEMENT);\n\t\tif (\n\t\t\tsbuf.buffer === buf.buffer &&\n\t\t\t(\n\t\t\t\tsbuf.byteOffset < j &&\n\t\t\t\tsbuf.byteOffset+sbuf.byteLength > j\n\t\t\t)\n\t\t) {\n\t\t\t// We need to copy source values...\n\t\t\ttmp = new Float64Array( sbuf.length );\n\t\t\tfor ( i = 0; i < sbuf.length; i++ ) {\n\t\t\t\ttmp[ i ] = sbuf[ i ];\n\t\t\t}\n\t\t\tsbuf = tmp;\n\t\t}\n\t\tidx *= 2;\n\t\tj = 0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tbuf[ idx ] = sbuf[ j ];\n\t\t\tbuf[ idx+1 ] = sbuf[ j+1 ];\n\t\t\tidx += 2; // stride\n\t\t\tj += 2; // stride\n\t\t}\n\t\treturn;\n\t}\n\tif ( isCollection( value ) ) {\n\t\t// Detect whether we've been provided an array of complex numbers...\n\t\tN = value.length;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( !isComplexLike( value[ i ] ) ) {\n\t\t\t\tflg = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// If an array does not contain only complex numbers, then we assume interleaved real and imaginary components...\n\t\tif ( flg ) {\n\t\t\tif ( !isEven( N ) ) {\n\t\t\t\tthrow new RangeError( format( 'invalid argument. Array-like object arguments must have a length which is a multiple of two. Length: `%u`.', N ) );\n\t\t\t}\n\t\t\tif ( idx+(N/2) > this._length ) {\n\t\t\t\tthrow new RangeError( 'invalid arguments. Target array lacks sufficient storage to accommodate source values.' );\n\t\t\t}\n\t\t\tsbuf = value;\n\n\t\t\t// Check for overlapping memory...\n\t\t\tj = buf.byteOffset + (idx*BYTES_PER_ELEMENT);\n\t\t\tif (\n\t\t\t\tsbuf.buffer === buf.buffer &&\n\t\t\t\t(\n\t\t\t\t\tsbuf.byteOffset < j &&\n\t\t\t\t\tsbuf.byteOffset+sbuf.byteLength > j\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\t// We need to copy source values...\n\t\t\t\ttmp = new Float64Array( N );\n\t\t\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\t\t\ttmp[ i ] = sbuf[ i ];\n\t\t\t\t}\n\t\t\t\tsbuf = tmp;\n\t\t\t}\n\t\t\tidx *= 2;\n\t\t\tN /= 2;\n\t\t\tj = 0;\n\t\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\t\tbuf[ idx ] = sbuf[ j ];\n\t\t\t\tbuf[ idx+1 ] = sbuf[ j+1 ];\n\t\t\t\tidx += 2; // stride\n\t\t\t\tj += 2; // stride\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\t// If an array contains only complex numbers, then we need to extract real and imaginary components...\n\t\tif ( idx+N > this._length ) {\n\t\t\tthrow new RangeError( 'invalid arguments. Target array lacks sufficient storage to accommodate source values.' );\n\t\t}\n\t\tidx *= 2;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tv = value[ i ];\n\t\t\tbuf[ idx ] = real( v );\n\t\t\tbuf[ idx+1 ] = imag( v );\n\t\t\tidx += 2; // stride\n\t\t}\n\t\treturn;\n\t}\n\tthrow new TypeError( format( 'invalid argument. First argument must be either a complex number, an array-like object, or a complex number array. Value: `%s`.', value ) );\n\n\t/* eslint-enable no-underscore-dangle */\n});\n\n/**\n* Copies a portion of a typed array to a new typed array.\n*\n* @name slice\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {integer} [start=0] - starting index (inclusive)\n* @param {integer} [end] - ending index (exclusive)\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be an integer\n* @throws {TypeError} second argument must be an integer\n* @returns {Complex128Array} complex number array\n*\n* @example\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var arr = new Complex128Array( 5 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, -2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n* arr.set( [ 4.0, -4.0 ], 3 );\n* arr.set( [ 5.0, -5.0 ], 4 );\n*\n* var out = arr.slice();\n* // returns <Complex128Array>\n*\n* var len = out.length;\n* // returns 5\n*\n* var z = out.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 1.0\n*\n* var im = imag( z );\n* // returns -1.0\n*\n* z = out.get( len-1 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 5.0\n*\n* im = imag( z );\n* // returns -5.0\n*\n* out = arr.slice( 1, -2 );\n* // returns <Complex128Array>\n*\n* len = out.length;\n* // returns 2\n*\n* z = out.get( 0 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 2.0\n*\n* im = imag( z );\n* // returns -2.0\n*\n* z = out.get( len-1 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 3.0\n*\n* im = imag( z );\n* // returns -3.0\n*/\nsetReadOnly( Complex128Array.prototype, 'slice', function slice( start, end ) {\n\tvar outlen;\n\tvar outbuf;\n\tvar out;\n\tvar idx;\n\tvar buf;\n\tvar len;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tbuf = this._buffer;\n\tlen = this._length;\n\tif ( arguments.length === 0 ) {\n\t\tstart = 0;\n\t\tend = len;\n\t} else {\n\t\tif ( !isInteger( start ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an integer. Value: `%s`.', start ) );\n\t\t}\n\t\tif ( start < 0 ) {\n\t\t\tstart += len;\n\t\t\tif ( start < 0 ) {\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t\tif ( arguments.length === 1 ) {\n\t\t\tend = len;\n\t\t} else {\n\t\t\tif ( !isInteger( end ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', end ) );\n\t\t\t}\n\t\t\tif ( end < 0 ) {\n\t\t\t\tend += len;\n\t\t\t\tif ( end < 0 ) {\n\t\t\t\t\tend = 0;\n\t\t\t\t}\n\t\t\t} else if ( end > len ) {\n\t\t\t\tend = len;\n\t\t\t}\n\t\t}\n\t}\n\tif ( start < end ) {\n\t\toutlen = end - start;\n\t} else {\n\t\toutlen = 0;\n\t}\n\tout = new this.constructor( outlen );\n\toutbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\tfor ( i = 0; i < outlen; i++ ) {\n\t\tidx = 2*(i+start);\n\t\toutbuf[ 2*i ] = buf[ idx ];\n\t\toutbuf[ (2*i)+1 ] = buf[ idx+1 ];\n\t}\n\treturn out;\n});\n\n/**\n* Tests whether at least one element in an array passes a test implemented by a predicate function.\n*\n* @name some\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - predicate function execution context\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be a function\n* @returns {boolean} boolean indicating whether at least one element passes a test\n*\n* @example\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* function predicate( v ) {\n*     return ( real( v ) === imag( v ) );\n* }\n*\n* var arr = new Complex128Array( 3 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n*\n* var bool = arr.some( predicate );\n* // returns true\n*/\nsetReadOnly( Complex128Array.prototype, 'some', function some( predicate, thisArg ) {\n\tvar buf;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tbuf = this._buffer;\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tif ( predicate.call( thisArg, getComplex128( buf, i ), i, this ) ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n});\n\n/**\n* Creates a new typed array view over the same underlying `ArrayBuffer` and with the same underlying data type as the host array.\n*\n* @name subarray\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {integer} [begin=0] - starting index (inclusive)\n* @param {integer} [end] - ending index (exclusive)\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be an integer\n* @throws {TypeError} second argument must be an integer\n* @returns {Complex64Array} subarray\n*\n* @example\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var arr = new Complex128Array( 5 );\n*\n* arr.set( [ 1.0, -1.0 ], 0 );\n* arr.set( [ 2.0, -2.0 ], 1 );\n* arr.set( [ 3.0, -3.0 ], 2 );\n* arr.set( [ 4.0, -4.0 ], 3 );\n* arr.set( [ 5.0, -5.0 ], 4 );\n*\n* var subarr = arr.subarray();\n* // returns <Complex128Array>\n*\n* var len = subarr.length;\n* // returns 5\n*\n* var z = subarr.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 1.0\n*\n* var im = imag( z );\n* // returns -1.0\n*\n* z = subarr.get( len-1 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 5.0\n*\n* im = imag( z );\n* // returns -5.0\n*\n* subarr = arr.subarray( 1, -2 );\n* // returns <Complex128Array>\n*\n* len = subarr.length;\n* // returns 2\n*\n* z = subarr.get( 0 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 2.0\n*\n* im = imag( z );\n* // returns -2.0\n*\n* z = subarr.get( len-1 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 3.0\n*\n* im = imag( z );\n* // returns -3.0\n*/\nsetReadOnly( Complex128Array.prototype, 'subarray', function subarray( begin, end ) {\n\tvar offset;\n\tvar buf;\n\tvar len;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tbuf = this._buffer;\n\tlen = this._length;\n\tif ( arguments.length === 0 ) {\n\t\tbegin = 0;\n\t\tend = len;\n\t} else {\n\t\tif ( !isInteger( begin ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an integer. Value: `%s`.', begin ) );\n\t\t}\n\t\tif ( begin < 0 ) {\n\t\t\tbegin += len;\n\t\t\tif ( begin < 0 ) {\n\t\t\t\tbegin = 0;\n\t\t\t}\n\t\t}\n\t\tif ( arguments.length === 1 ) {\n\t\t\tend = len;\n\t\t} else {\n\t\t\tif ( !isInteger( end ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', end ) );\n\t\t\t}\n\t\t\tif ( end < 0 ) {\n\t\t\t\tend += len;\n\t\t\t\tif ( end < 0 ) {\n\t\t\t\t\tend = 0;\n\t\t\t\t}\n\t\t\t} else if ( end > len ) {\n\t\t\t\tend = len;\n\t\t\t}\n\t\t}\n\t}\n\tif ( begin >= len ) {\n\t\tlen = 0;\n\t\toffset = buf.byteLength;\n\t} else if ( begin >= end ) {\n\t\tlen = 0;\n\t\toffset = buf.byteOffset + ( begin*BYTES_PER_ELEMENT );\n\t} else {\n\t\tlen = end - begin;\n\t\toffset = buf.byteOffset + ( begin*BYTES_PER_ELEMENT );\n\t}\n\treturn new this.constructor( buf.buffer, offset, ( len < 0 ) ? 0 : len );\n});\n\n/**\n* Returns a new typed array containing the elements in reversed order.\n*\n* @name toReversed\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @throws {TypeError} `this` must be a complex number array\n* @returns {Complex128Array} reversed array\n*\n* @example\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var arr = new Complex128Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* var out = arr.toReversed();\n* // returns <Complex128Array>\n*\n* var z = out.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 3.0\n*\n* var im = imag( z );\n* // returns 3.0\n*\n* z = out.get( 1 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 2.0\n*\n* im = imag( z );\n* // returns 2.0\n*\n* z = out.get( 2 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns 1.0\n*\n* im = imag( z );\n* // returns 1.0\n*/\nsetReadOnly( Complex128Array.prototype, 'toReversed', function toReversed() {\n\tvar outbuf;\n\tvar out;\n\tvar len;\n\tvar buf;\n\tvar i;\n\tvar j;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tlen = this._length;\n\tout = new this.constructor( len );\n\tbuf = this._buffer;\n\toutbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\tfor ( i = 0; i < len; i++ ) {\n\t\tj = len - i - 1;\n\t\toutbuf[ (2*i) ] = buf[ (2*j) ];\n\t\toutbuf[ (2*i)+1 ] = buf[ (2*j)+1 ];\n\t}\n\treturn out;\n});\n\n/**\n* Serializes an array as a string.\n*\n* @name toString\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @throws {TypeError} `this` must be a complex number array\n* @returns {string} string representation\n*\n* @example\n* var arr = new Complex128Array( 2 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n*\n* var str = arr.toString();\n* // returns '1 + 1i,2 + 2i'\n*/\nsetReadOnly( Complex128Array.prototype, 'toString', function toString() {\n\tvar out;\n\tvar buf;\n\tvar i;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tout = [];\n\tbuf = this._buffer;\n\tfor ( i = 0; i < this._length; i++ ) {\n\t\tout.push( getComplex128( buf, i ).toString() );\n\t}\n\treturn out.join( ',' );\n});\n\n/**\n* Returns a new typed array with the element at a provided index replaced with a provided value.\n*\n* @name with\n* @memberof Complex128Array.prototype\n* @type {Function}\n* @param {integer} index - element index\n* @param {ComplexLike} value - new value\n* @throws {TypeError} `this` must be a complex number array\n* @throws {TypeError} first argument must be an integer\n* @throws {RangeError} index argument is out-of-bounds\n* @throws {TypeError} second argument must be a complex number\n* @returns {Complex128Array} new typed array\n*\n* @example\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n* import Complex128 from '@stdlib/complex-float64';\n*\n* var arr = new Complex128Array( 3 );\n*\n* arr.set( [ 1.0, 1.0 ], 0 );\n* arr.set( [ 2.0, 2.0 ], 1 );\n* arr.set( [ 3.0, 3.0 ], 2 );\n*\n* var out = arr.with( 0, new Complex128( 4.0, 4.0 ) );\n* // returns <Complex128Array>\n*\n* var z = out.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns 4.0\n*\n* var im = imag( z );\n* // returns 4.0\n*/\nsetReadOnly( Complex128Array.prototype, 'with', function copyWith( index, value ) {\n\tvar buf;\n\tvar out;\n\tvar len;\n\tif ( !isComplexArray( this ) ) {\n\t\tthrow new TypeError( 'invalid invocation. `this` is not a complex number array.' );\n\t}\n\tif ( !isInteger( index ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an integer. Value: `%s`.', index ) );\n\t}\n\tlen = this._length;\n\tif ( index < 0 ) {\n\t\tindex += len;\n\t}\n\tif ( index < 0 || index >= len ) {\n\t\tthrow new RangeError( format( 'invalid argument. Index argument is out-of-bounds. Value: `%s`.', index ) );\n\t}\n\tif ( !isComplexLike( value ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a complex number. Value: `%s`.', value ) );\n\t}\n\tout = new this.constructor( this._buffer );\n\tbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\tbuf[ 2*index ] = real( value );\n\tbuf[ (2*index)+1 ] = imag( value );\n\treturn out;\n});\n\n\n// EXPORTS //\n\nexport default Complex128Array;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\n\n\n// MAIN //\n\n/**\n* Returns a strided array of real and imaginary components.\n*\n* @private\n* @param {Float64Array} buf - output array\n* @param {Array} arr - array containing complex numbers\n* @returns {(Float64Array|null)} output array or null\n*/\nfunction fromArray( buf, arr ) {\n\tvar len;\n\tvar v;\n\tvar i;\n\tvar j;\n\n\tlen = arr.length;\n\tj = 0;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tv = arr[ i ];\n\t\tif ( !isComplexLike( v ) ) {\n\t\t\treturn null;\n\t\t}\n\t\tbuf[ j ] = real( v );\n\t\tbuf[ j+1 ] = imag( v );\n\t\tj += 2; // stride\n\t}\n\treturn buf;\n}\n\n\n// EXPORTS //\n\nexport default fromArray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArrayLikeObject from '@stdlib/assert-is-array-like-object';\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport format from '@stdlib/string-format';\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\n\n\n// MAIN //\n\n/**\n* Returns an array of iterated values.\n*\n* @private\n* @param {Object} it - iterator\n* @param {Function} clbk - callback to invoke for each iterated value\n* @param {*} thisArg - invocation context\n* @returns {(Array|TypeError)} array or an error\n*/\nfunction fromIteratorMap( it, clbk, thisArg ) {\n\tvar out;\n\tvar v;\n\tvar z;\n\tvar i;\n\n\tout = [];\n\ti = -1;\n\twhile ( true ) {\n\t\tv = it.next();\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t\ti += 1;\n\t\tz = clbk.call( thisArg, v.value, i );\n\t\tif ( isArrayLikeObject( z ) && z.length >= 2 ) {\n\t\t\tout.push( z[ 0 ], z[ 1 ] );\n\t\t} else if ( isComplexLike( z ) ) {\n\t\t\tout.push( real( z ), imag( z ) );\n\t\t} else {\n\t\t\treturn new TypeError( format( 'invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.', z ) );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default fromIteratorMap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Float64Array from '@stdlib/array-float64';\nimport Float32Array from '@stdlib/array-float32';\nimport Uint32Array from '@stdlib/array-uint32';\nimport Int32Array from '@stdlib/array-int32';\nimport Uint16Array from '@stdlib/array-uint16';\nimport Int16Array from '@stdlib/array-int16';\nimport Uint8Array from '@stdlib/array-uint8';\nimport Uint8ClampedArray from '@stdlib/array-uint8c';\nimport Int8Array from '@stdlib/array-int8';\nimport Complex64Array from '@stdlib/array-complex64';\nimport Complex128Array from '@stdlib/array-complex128';\n\n\n// MAIN //\n\n// Note: order should match `dtypes` order\nvar CTORS = [\n\tFloat64Array,\n\tFloat32Array,\n\tInt32Array,\n\tUint32Array,\n\tInt16Array,\n\tUint16Array,\n\tInt8Array,\n\tUint8Array,\n\tUint8ClampedArray,\n\tComplex64Array,\n\tComplex128Array\n];\n\n\n// EXPORTS //\n\nexport default CTORS;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n// Note: order should match `ctors` order\nvar DTYPES = [\n\t'float64',\n\t'float32',\n\t'int32',\n\t'uint32',\n\t'int16',\n\t'uint16',\n\t'int8',\n\t'uint8',\n\t'uint8c',\n\t'complex64',\n\t'complex128'\n];\n\n\n// EXPORTS //\n\nexport default DTYPES;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isBuffer from '@stdlib/assert-is-buffer';\nimport isArray from '@stdlib/assert-is-array';\nimport constructorName from '@stdlib/utils-constructor-name';\nimport ctor2dtype from './ctor2dtype.js';\nimport CTORS from './ctors.js';\nimport DTYPES from './dtypes.js';\n\n\n// VARIABLES //\n\nvar NTYPES = DTYPES.length;\n\n\n// MAIN //\n\n/**\n* Returns the data type of an array.\n*\n* @param {*} value - input value\n* @returns {(string|null)} data type\n*\n* @example\n* var dt = dtype( [ 1, 2, 3 ] );\n* // returns 'generic'\n*\n* var dt = dtype( 'beep' );\n* // returns null\n*/\nfunction dtype( value ) {\n\tvar i;\n\tif ( isArray( value ) ) {\n\t\treturn 'generic';\n\t}\n\tif ( isBuffer( value ) ) {\n\t\treturn null;\n\t}\n\tfor ( i = 0; i < NTYPES; i++ ) {\n\t\tif ( value instanceof CTORS[ i ] ) {\n\t\t\treturn DTYPES[ i ];\n\t\t}\n\t}\n\t// If the above failed, fall back to a more robust (and significantly slower) means for resolving underlying data types:\n\treturn ctor2dtype[ constructorName( value ) ] || null;\n}\n\n\n// EXPORTS //\n\nexport default dtype;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport resolveGetter from '@stdlib/array-base-resolve-getter';\nimport getOffset from '@stdlib/ndarray-base-offset';\nimport getData from '@stdlib/ndarray-base-data-buffer';\n\n\n// MAIN //\n\n/**\n* Converts an ndarray-like object to a scalar value.\n*\n* @param {ndarrayLike} x - ndarray-like object\n* @param {*} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @returns {*} scalar value\n*\n* @example\n* import scalar2ndarray from '@stdlib/ndarray-from-scalar';\n*\n* var x = scalar2ndarray( 1.0 );\n* // returns <ndarray>\n*\n* var out = ndarraylike2scalar( x );\n* // returns 1.0\n*/\nfunction ndarraylike2scalar( x ) {\n\tvar buf = getData( x );\n\tvar get = resolveGetter( buf );\n\treturn get( buf, getOffset( x ) );\n}\n\n\n// EXPORTS //\n\nexport default ndarraylike2scalar;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isAccessorArray from '@stdlib/array-base-assert-is-accessor-array';\nimport accessorGetter from '@stdlib/array-base-accessor-getter';\nimport getter from '@stdlib/array-base-getter';\nimport dtype from '@stdlib/array-dtype';\n\n\n// MAIN //\n\n/**\n* Returns an accessor function for retrieving an element from an array-like object.\n*\n* @param {Collection} x - input array\n* @returns {Function} accessor\n*\n* @example\n* var arr = [ 1, 2, 3, 4 ];\n*\n* var get = resolveGetter( arr );\n* var v = get( arr, 2 );\n* // returns 3\n*/\nfunction resolveGetter( x ) {\n\tvar dt = dtype( x );\n\tif ( isAccessorArray( x ) ) {\n\t\treturn accessorGetter( dt );\n\t}\n\treturn getter( dt );\n}\n\n\n// EXPORTS //\n\nexport default resolveGetter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an array of an object's own enumerable property names.\n*\n* ## Notes\n*\n* -   In contrast to the built-in `Object.keys()`, this function returns an empty array if provided `undefined` or `null`, rather than throwing an error.\n*\n* @private\n* @param {*} value - input object\n* @returns {Array} a list of own enumerable property names\n*\n* @example\n* var obj = {\n*     'beep': 'boop',\n*     'foo': 3.14\n* };\n*\n* var k = keys( obj );\n* // e.g., returns [ 'beep', 'foo' ]\n*/\nfunction keys( value ) {\n\treturn Object.keys( Object( value ) );\n}\n\n\n// EXPORTS //\n\nexport default keys;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar bool = ( typeof Object.keys !== 'undefined' );\n\n\n// EXPORTS //\n\nexport default bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArguments from './main.js';\n\n\n// VARIABLES //\n\nvar bool;\n\n\n// FUNCTIONS //\n\n/**\n* Detects whether an environment returns the expected internal class of the `arguments` object.\n*\n* @private\n* @returns {boolean} boolean indicating whether an environment behaves as expected\n*\n* @example\n* var bool = detect();\n* // returns <boolean>\n*/\nfunction detect() {\n\treturn isArguments( arguments );\n}\n\n\n// MAIN //\n\nbool = detect();\n\n\n// EXPORTS //\n\nexport default bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// MAIN //\n\n/**\n* Tests whether a value is an `arguments` object.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether a value is an `arguments` object\n*\n* @example\n* function foo() {\n*     return arguments;\n* }\n*\n* var bool = isArguments( foo() );\n* // returns true\n*\n* @example\n* var bool = isArguments( [] );\n* // returns false\n*/\nfunction isArguments( value ) {\n\treturn ( nativeClass( value ) === '[object Arguments]' );\n}\n\n\n// EXPORTS //\n\nexport default isArguments;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isNan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a `NaN` number primitive.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a `NaN` number primitive\n*\n* @example\n* var bool = isnan( NaN );\n* // returns true\n*\n* @example\n* var bool = isnan( 3.14 );\n* // returns false\n*\n* @example\n* var bool = isnan( new Number( NaN ) );\n* // returns false\n*/\nfunction isnan( value ) {\n\treturn (\n\t\tisNumber( value ) &&\n\t\tisNan( value )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isnan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isObject as isNumber } from '@stdlib/assert-is-number';\nimport isNan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object having a value of `NaN`.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object having a value of `NaN`\n*\n* @example\n* var bool = isnan( NaN );\n* // returns false\n*\n* @example\n* var bool = isnan( new Number( NaN ) );\n* // returns true\n*/\nfunction isnan( value ) {\n\treturn (\n\t\tisNumber( value ) &&\n\t\tisNan( value.valueOf() )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isnan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is `NaN`.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is `NaN`\n*\n* @example\n* var bool = isnan( NaN );\n* // returns true\n*\n* @example\n* var bool = isnan( new Number( NaN ) );\n* // returns true\n*\n* @example\n* var bool = isnan( 3.14 );\n* // returns false\n*\n* @example\n* var bool = isnan( null );\n* // returns false\n*/\nfunction isnan( value ) {\n\treturn ( isPrimitive( value ) || isObject( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isnan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is `NaN`.\n*\n* @module @stdlib/assert-is-nan\n*\n* @example\n* import isnan from '@stdlib/assert-is-nan';\n*\n* var bool = isnan( NaN );\n* // returns true\n*\n* bool = isnan( new Number( NaN ) );\n* // returns true\n*\n* bool = isnan( 3.14 );\n* // returns false\n*\n* bool = isnan( null );\n* // returns false\n*\n* @example\n* import { isPrimitive as isnan } from '@stdlib/assert-is-nan';\n*\n* var bool = isnan( NaN );\n* // returns true\n*\n* bool = isnan( 3.14 );\n* // returns false\n*\n* bool = isnan( new Number( NaN ) );\n* // returns false\n*\n* @example\n* import { isObject as isnan } from '@stdlib/assert-is-nan';\n*\n* var bool = isnan( NaN );\n* // returns false\n*\n* bool = isnan( new Number( NaN ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'isPrimitive', isPrimitive );\nsetReadOnly( main, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if an object's own property is enumerable.\n*\n* @private\n* @name isEnumerableProperty\n* @type {Function}\n* @param {*} value - value to test\n* @param {*} property - property to test\n* @returns {boolean} boolean indicating if an object property is enumerable\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = isEnumerableProperty( beep, 'boop' );\n* // returns true\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = isEnumerableProperty( beep, 'hasOwnProperty' );\n* // returns false\n*/\nvar isEnumerableProperty = Object.prototype.propertyIsEnumerable;\n\n\n// EXPORTS //\n\nexport default isEnumerableProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isEnum from './native.js';\n\n\n// VARIABLES //\n\nvar bool;\n\n\n// FUNCTIONS //\n\n/**\n* Detects whether an environment has a bug where String indices are not detected as \"enumerable\" properties. Observed in Node v0.10.\n*\n* @private\n* @returns {boolean} boolean indicating whether an environment has the bug\n*/\nfunction detect() {\n\treturn !isEnum.call( 'beep', '0' );\n}\n\n\n// MAIN //\n\nbool = detect();\n\n\n// EXPORTS //\n\nexport default bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isString from '@stdlib/assert-is-string';\nimport { isPrimitive as isnan } from '@stdlib/assert-is-nan';\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport isEnum from './native.js';\nimport hasStringEnumBug from './has_string_enumerability_bug.js';\n\n\n// MAIN //\n\n/**\n* Tests if an object's own property is enumerable.\n*\n* @param {*} value - value to test\n* @param {*} property - property to test\n* @returns {boolean} boolean indicating if an object property is enumerable\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = isEnumerableProperty( beep, 'boop' );\n* // returns true\n*\n* @example\n* var beep = {\n*     'boop': true\n* };\n*\n* var bool = isEnumerableProperty( beep, 'hasOwnProperty' );\n* // returns false\n*/\nfunction isEnumerableProperty( value, property ) {\n\tvar bool;\n\tif (\n\t\tvalue === void 0 ||\n\t\tvalue === null\n\t) {\n\t\treturn false;\n\t}\n\tbool = isEnum.call( value, property );\n\tif ( !bool && hasStringEnumBug && isString( value ) ) {\n\t\t// Note: we only check for indices, as properties attached to a `String` object are properly detected as enumerable above.\n\t\tproperty = +property;\n\t\treturn (\n\t\t\t!isnan( property ) &&\n\t\t\tisInteger( property ) &&\n\t\t\tproperty >= 0 &&\n\t\t\tproperty < value.length\n\t\t);\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nexport default isEnumerableProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is an `arguments` object.\n*\n* @module @stdlib/assert-is-arguments\n*\n* @example\n* import isArguments from '@stdlib/assert-is-arguments';\n*\n* function foo() {\n*     return arguments;\n* }\n*\n* var bool = isArguments( foo() );\n* // returns true\n*\n* bool = isArguments( [] );\n* // returns false\n*/\n\n// MODULES //\n\nimport hasArgumentsClass from './detect.js';\nimport main from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar isArguments;\nif ( hasArgumentsClass ) {\n\tisArguments = main;\n} else {\n\tisArguments = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default isArguments;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport isEnumerableProperty from '@stdlib/assert-is-enumerable-property';\nimport isArray from '@stdlib/assert-is-array';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport MAX_LENGTH from '@stdlib/constants-uint32-max';\n\n\n// MAIN //\n\n/**\n* Tests whether a value is an `arguments` object.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether a value is an `arguments` object\n*\n* @example\n* function foo() {\n*     return arguments;\n* }\n*\n* var bool = isArguments( foo() );\n* // returns true\n*\n* @example\n* var bool = isArguments( [] );\n* // returns false\n*/\nfunction isArguments( value ) {\n\treturn (\n\t\tvalue !== null &&\n\t\ttypeof value === 'object' &&\n\t\t!isArray( value ) &&\n\t\ttypeof value.length === 'number' &&\n\t\tisInteger( value.length ) &&\n\t\tvalue.length >= 0 &&\n\t\tvalue.length <= MAX_LENGTH &&\n\t\thasOwnProp( value, 'callee' ) &&\n\t\t!isEnumerableProperty( value, 'callee' )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isArguments;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArguments from '@stdlib/assert-is-arguments';\nimport builtin from './builtin.js';\n\n\n// VARIABLES //\n\nvar slice = Array.prototype.slice;\n\n\n// MAIN //\n\n/**\n* Returns an array of an object's own enumerable property names.\n*\n* @private\n* @param {*} value - input object\n* @returns {Array} a list of own enumerable property names\n*\n* @example\n* var obj = {\n*     'beep': 'boop',\n*     'foo': 3.14\n* };\n*\n* var k = keys( obj );\n* // e.g., returns [ 'beep', 'foo' ]\n*/\nfunction keys( value ) {\n\tif ( isArguments( value ) ) {\n\t\treturn builtin( slice.call( value ) );\n\t}\n\treturn builtin( value );\n}\n\n\n// EXPORTS //\n\nexport default keys;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isEnumerableProperty from '@stdlib/assert-is-enumerable-property';\nimport noop from '@stdlib/utils-noop';\n\n\n// MAIN //\n\n// Note: certain environments treat an object's prototype as enumerable, which, as a matter of convention, it shouldn't be...\nvar bool = isEnumerableProperty( noop, 'prototype' );\n\n\n// EXPORTS //\n\nexport default bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* No operation.\n*\n* @example\n* noop();\n* // ...does nothing.\n*/\nfunction noop() {\n\t// Empty function...\n}\n\n\n// EXPORTS //\n\nexport default noop;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isEnumerableProperty from '@stdlib/assert-is-enumerable-property';\n\n\n// VARIABLES //\n\nvar obj = {\n\t'toString': null\n};\n\n\n// MAIN //\n\n// Note: certain environments don't allow enumeration of overwritten properties which are considered non-enumerable...\nvar bool = !isEnumerableProperty( obj, 'toString' );\n\n\n// EXPORTS //\n\nexport default bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/assert-is-nan';\nimport isCollection from '@stdlib/assert-is-collection';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Returns the first index at which a given element can be found.\n*\n* @param {ArrayLike} arr - array-like object\n* @param {*} searchElement - element to find\n* @param {integer} [fromIndex] - starting index (if negative, the start index is determined relative to last element)\n* @throws {TypeError} must provide an array-like object\n* @throws {TypeError} third argument must be an integer\n* @returns {integer} index or -1\n*\n* @example\n* var arr = [ 4, 3, 2, 1 ];\n* var idx = indexOf( arr, 3 );\n* // returns 1\n*\n* @example\n* var arr = [ 4, 3, 2, 1 ];\n* var idx = indexOf( arr, 5 );\n* // returns -1\n*\n* @example\n* // Using a `fromIndex`:\n* var arr = [ 1, 2, 3, 4, 5, 2, 6 ];\n* var idx = indexOf( arr, 2, 3 );\n* // returns 5\n*\n* @example\n* // `fromIndex` which exceeds `array` length:\n* var arr = [ 1, 2, 3, 4, 2, 5 ];\n* var idx = indexOf( arr, 2, 10 );\n* // returns -1\n*\n* @example\n* // Negative `fromIndex`:\n* var arr = [ 1, 2, 3, 4, 5, 2, 6, 2 ];\n* var idx = indexOf( arr, 2, -4 );\n* // returns 5\n*\n* idx = indexOf( arr, 2, -1 );\n* // returns 7\n*\n* @example\n* // Negative `fromIndex` exceeding input `array` length:\n* var arr = [ 1, 2, 3, 4, 5, 2, 6 ];\n* var idx = indexOf( arr, 2, -10 );\n* // returns 1\n*\n* @example\n* // Array-like objects:\n* var str = 'bebop';\n* var idx = indexOf( str, 'o' );\n* // returns 3\n*/\nfunction indexOf( arr, searchElement, fromIndex ) {\n\tvar len;\n\tvar i;\n\tif ( !isCollection( arr ) && !isString( arr ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object. Value: `%s`.', arr ) );\n\t}\n\tlen = arr.length;\n\tif ( len === 0 ) {\n\t\treturn -1;\n\t}\n\tif ( arguments.length === 3 ) {\n\t\tif ( !isInteger( fromIndex ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an integer. Value: `%s`.', fromIndex ) );\n\t\t}\n\t\tif ( fromIndex >= 0 ) {\n\t\t\tif ( fromIndex >= len ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\ti = fromIndex;\n\t\t} else {\n\t\t\ti = len + fromIndex;\n\t\t\tif ( i < 0 ) {\n\t\t\t\ti = 0;\n\t\t\t}\n\t\t}\n\t} else {\n\t\ti = 0;\n\t}\n\t// Check for `NaN`...\n\tif ( isnan( searchElement ) ) {\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( isnan( arr[i] ) ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( arr[ i ] === searchElement ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\n\n\n// EXPORTS //\n\nexport default indexOf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests whether a value equals the prototype of its constructor.\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether a value equals the prototype of its constructor\n*/\nfunction isConstructorPrototype( value ) {\n\treturn ( value.constructor && value.constructor.prototype === value );\n}\n\n\n// EXPORTS //\n\nexport default isConstructorPrototype;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasArgumentsBug from './has_arguments_bug.js';\nimport HAS_BUILTIN from './has_builtin.js';\nimport builtin from './builtin.js';\nimport wrapper from './builtin_wrapper.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\n/**\n* Returns an array of an object's own enumerable property names.\n*\n* @name keys\n* @type {Function}\n* @param {*} value - input object\n* @returns {Array} a list of own enumerable property names\n*\n* @example\n* var obj = {\n*     'beep': 'boop',\n*     'foo': 3.14\n* };\n*\n* var k = keys( obj );\n* // e.g., returns [ 'beep', 'foo' ]\n*/\nvar keys;\nif ( HAS_BUILTIN ) {\n\tif ( hasArgumentsBug() ) {\n\t\tkeys = wrapper;\n\t} else {\n\t\tkeys = builtin;\n\t}\n} else {\n\tkeys = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default keys;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar w = ( typeof window === 'undefined' ) ? void 0 : window;\n\n\n// EXPORTS //\n\nexport default w;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport indexOf from '@stdlib/utils-index-of';\nimport typeOf from '@stdlib/utils-type-of';\nimport isConstructorPrototype from './is_constructor_prototype.js';\nimport EXCLUDED_KEYS from './excluded_keys.json';\nimport win from './window.js';\n\n\n// VARIABLES //\n\nvar bool;\n\n\n// FUNCTIONS //\n\n/**\n* Determines whether an environment throws when comparing to the prototype of a value's constructor (e.g., [IE9][1]).\n*\n* [1]: https://stackoverflow.com/questions/7688070/why-is-comparing-the-constructor-property-of-two-windows-unreliable\n*\n* @private\n* @returns {boolean} boolean indicating whether an environment is buggy\n*/\nfunction check() {\n\tvar k;\n\tif ( typeOf( win ) === 'undefined' ) {\n\t\treturn false;\n\t}\n\tfor ( k in win ) { // eslint-disable-line guard-for-in\n\t\ttry {\n\t\t\tif (\n\t\t\t\tindexOf( EXCLUDED_KEYS, k ) === -1 &&\n\t\t\t\thasOwnProp( win, k ) &&\n\t\t\t\twin[ k ] !== null &&\n\t\t\t\ttypeOf( win[ k ] ) === 'object'\n\t\t\t) {\n\t\t\t\tisConstructorPrototype( win[ k ] );\n\t\t\t}\n\t\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// MAIN //\n\nbool = check();\n\n\n// EXPORTS //\n\nexport default bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar bool = ( typeof window !== 'undefined' );\n\n\n// EXPORTS //\n\nexport default bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport keys from './builtin.js';\n\n\n// FUNCTIONS //\n\n/**\n* Tests the built-in `Object.keys()` implementation when provided `arguments`.\n*\n* @private\n* @returns {boolean} boolean indicating whether the built-in implementation returns the expected number of keys\n*/\nfunction test() {\n\treturn ( keys( arguments ) || '' ).length !== 2;\n}\n\n\n// MAIN //\n\n/**\n* Tests whether the built-in `Object.keys()` implementation supports providing `arguments` as an input value.\n*\n* ## Notes\n*\n* -   Safari 5.0 does **not** support `arguments` as an input value.\n*\n* @private\n* @returns {boolean} boolean indicating whether a built-in implementation supports `arguments`\n*/\nfunction check() {\n\treturn test( 1, 2 );\n}\n\n\n// EXPORTS //\n\nexport default check;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObjectLike from '@stdlib/assert-is-object-like';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport isArguments from '@stdlib/assert-is-arguments';\nimport HAS_ENUM_PROTO_BUG from './has_enumerable_prototype_bug.js';\nimport HAS_NON_ENUM_PROPS_BUG from './has_non_enumerable_properties_bug.js';\nimport isConstructorPrototype from './is_constructor_prototype_wrapper.js';\nimport NON_ENUMERABLE from './non_enumerable.json';\n\n\n// MAIN //\n\n/**\n* Returns an array of an object's own enumerable property names.\n*\n* @private\n* @param {*} value - input object\n* @returns {Array} a list of own enumerable property names\n*\n* @example\n* var obj = {\n*     'beep': 'boop',\n*     'foo': 3.14\n* };\n*\n* var k = keys( obj );\n* // e.g., returns [ 'beep', 'foo' ]\n*/\nfunction keys( value ) {\n\tvar skipConstructor;\n\tvar skipPrototype;\n\tvar isFcn;\n\tvar out;\n\tvar k;\n\tvar p;\n\tvar i;\n\n\tout = [];\n\tif ( isArguments( value ) ) {\n\t\t// Account for environments which treat `arguments` differently...\n\t\tfor ( i = 0; i < value.length; i++ ) {\n\t\t\tout.push( i.toString() );\n\t\t}\n\t\t// Note: yes, we are precluding the `arguments` array-like object from having other enumerable properties; however, this should (1) be very rare and (2) not be encouraged (e.g., doing something like `arguments.a = 'b'`; in certain engines directly manipulating the `arguments` value results in automatic de-optimization).\n\t\treturn out;\n\t}\n\tif ( typeof value === 'string' ) {\n\t\t// Account for environments which do not treat string character indices as \"own\" properties...\n\t\tif ( value.length > 0 && !hasOwnProp( value, '0' ) ) {\n\t\t\tfor ( i = 0; i < value.length; i++ ) {\n\t\t\t\tout.push( i.toString() );\n\t\t\t}\n\t\t}\n\t} else {\n\t\tisFcn = ( typeof value === 'function' );\n\t\tif ( isFcn === false && !isObjectLike( value ) ) {\n\t\t\treturn out;\n\t\t}\n\t\tskipPrototype = ( HAS_ENUM_PROTO_BUG && isFcn );\n\t}\n\tfor ( k in value ) {\n\t\tif ( !( skipPrototype && k === 'prototype' ) && hasOwnProp( value, k ) ) {\n\t\t\tout.push( String( k ) );\n\t\t}\n\t}\n\tif ( HAS_NON_ENUM_PROPS_BUG ) {\n\t\tskipConstructor = isConstructorPrototype( value );\n\t\tfor ( i = 0; i < NON_ENUMERABLE.length; i++ ) {\n\t\t\tp = NON_ENUMERABLE[ i ];\n\t\t\tif ( !( skipConstructor && p === 'constructor' ) && hasOwnProp( value, p ) ) {\n\t\t\t\tout.push( String( p ) );\n\t\t\t}\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default keys;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasAutomationEqualityBug from './has_automation_equality_bug.js';\nimport isConstructorPrototype from './is_constructor_prototype.js';\nimport HAS_WINDOW from './has_window.js';\n\n\n// MAIN //\n\n/**\n* Wraps the test for constructor prototype equality to accommodate buggy environments (e.g., environments which throw when testing equality).\n*\n* @private\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether a value equals the prototype of its constructor\n*/\nfunction wrapper( value ) {\n\tif ( HAS_WINDOW === false && !hasAutomationEqualityBug ) {\n\t\treturn isConstructorPrototype( value );\n\t}\n\ttry {\n\t\treturn isConstructorPrototype( value );\n\t} catch ( error ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default wrapper;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function';\nimport builtin from './native.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar getProto;\nif ( isFunction( Object.getPrototypeOf ) ) {\n\tgetProto = builtin;\n} else {\n\tgetProto = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default getProto;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object.\n*\n* @name Object\n* @constructor\n* @type {Function}\n* @param {*} value - input value\n* @returns {Object} object\n*\n* @example\n* var o = new Object( null );\n* // returns {}\n*\n* @example\n* var o = new Object( 5.0 );\n* // returns <Number>\n*\n* @example\n* var o = new Object( 'beep' );\n* // returns <String>\n*\n* @example\n* var o1 = {};\n*\n* var o2 = new Object( o1 );\n* // returns {}\n*\n* var bool = ( o1 === o2 );\n* // returns true\n*/\nvar Obj = Object; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default Obj;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar getProto = Object.getPrototypeOf;\n\n\n// EXPORTS //\n\nexport default getProto;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nativeClass from '@stdlib/utils-native-class';\nimport getProto from './proto.js';\n\n\n// MAIN //\n\n/**\n* Returns the prototype of a provided object.\n*\n* @private\n* @param {Object} obj - input object\n* @returns {(Object|null)} prototype\n*/\nfunction getPrototypeOf( obj ) {\n\tvar proto = getProto( obj );\n\tif ( proto || proto === null ) {\n\t\treturn proto;\n\t}\n\tif ( nativeClass( obj.constructor ) === '[object Function]' ) {\n\t\t// May break if the constructor has been tampered with...\n\t\treturn obj.constructor.prototype;\n\t}\n\tif ( obj instanceof Object ) {\n\t\treturn Object.prototype;\n\t}\n\t// Return `null` for objects created via `Object.create( null )`. Also return `null` for cross-realm objects on browsers that lack `__proto__` support, such as IE < 11.\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default getPrototypeOf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns the value of the `__proto__` property.\n*\n* @private\n* @param {Object} obj - input object\n* @returns {*} value of `__proto__` property\n*/\nfunction getProto( obj ) {\n\t// eslint-disable-next-line no-proto\n\treturn obj.__proto__;\n}\n\n\n// EXPORTS //\n\nexport default getProto;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-object';\nimport isFunction from '@stdlib/assert-is-function';\nimport getPrototypeOf from '@stdlib/utils-get-prototype-of';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport nativeClass from '@stdlib/utils-native-class';\n\n\n// VARIABLES //\n\nvar objectPrototype = Object.prototype;\n\n\n// FUNCTIONS //\n\n/**\n* Tests that an object only has own properties.\n*\n* @private\n* @param {Object} obj - value to test\n* @returns {boolean} boolean indicating if an object only has own properties\n*/\nfunction ownProps( obj ) {\n\tvar key;\n\n\t// NOTE: possibility of perf boost if key enumeration order is known (see http://stackoverflow.com/questions/18531624/isplainobject-thing).\n\tfor ( key in obj ) {\n\t\tif ( !hasOwnProp( obj, key ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\n// MAIN //\n\n/**\n* Tests if a value is a plain object.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a plain object\n*\n* @example\n* var bool = isPlainObject( {} );\n* // returns true\n*\n* @example\n* var bool = isPlainObject( null );\n* // returns false\n*/\nfunction isPlainObject( value ) {\n\tvar proto;\n\n\t// Screen for obvious non-objects...\n\tif ( !isObject( value ) ) {\n\t\treturn false;\n\t}\n\t// Objects with no prototype (e.g., `Object.create( null )`) are plain...\n\tproto = getPrototypeOf( value );\n\tif ( !proto ) {\n\t\treturn true;\n\t}\n\t// Objects having a prototype are plain if and only if they are constructed with a global `Object` function and the prototype points to the prototype of a plain object...\n\treturn (\n\t\t// Cannot have own `constructor` property:\n\t\t!hasOwnProp( value, 'constructor' ) &&\n\n\t\t// Prototype `constructor` property must be a function (see also https://bugs.jquery.com/ticket/9897 and http://stackoverflow.com/questions/18531624/isplainobject-thing):\n\t\thasOwnProp( proto, 'constructor' ) &&\n\t\tisFunction( proto.constructor ) &&\n\t\tnativeClass( proto.constructor ) === '[object Function]' &&\n\n\t\t// Test for object-specific method:\n\t\thasOwnProp( proto, 'isPrototypeOf' ) &&\n\t\tisFunction( proto.isPrototypeOf ) &&\n\n\t\t(\n\t\t\t// Test if the prototype matches the global `Object` prototype (same realm):\n\t\t\tproto === objectPrototype ||\n\n\t\t\t// Test that all properties are own properties (cross-realm; *most* likely a plain object):\n\t\t\townProps( value )\n\t\t)\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isPlainObject;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Object from '@stdlib/object-ctor';\nimport getProto from './detect.js';\n\n\n// MAIN //\n\n/**\n* Returns the prototype of a provided object.\n*\n* @param {*} value - input value\n* @returns {(Object|null)} prototype\n*\n* @example\n* var proto = getPrototypeOf( {} );\n* // returns {}\n*/\nfunction getPrototypeOf( value ) {\n\tif (\n\t\tvalue === null ||\n\t\tvalue === void 0\n\t) {\n\t\treturn null;\n\t}\n\t// In order to ensure consistent ES5/ES6 behavior, cast input value to an object (strings, numbers, booleans); ES5 `Object.getPrototypeOf` throws when provided primitives and ES6 `Object.getPrototypeOf` casts:\n\tvalue = Object( value );\n\n\treturn getProto( value );\n}\n\n\n// EXPORTS //\n\nexport default getPrototypeOf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an object mapping supported alternatives to integer values for purposes of C inter-operation.\n*\n* ## Notes\n*\n* -   Downstream consumers of this mapping should **not** rely on specific integer values (e.g., `TWO_SIDED == 0`). Instead, the object should be used in an opaque manner.\n* -   The main purpose of this function is JavaScript and C inter-operation.\n*\n* @returns {Object} object mapping supported alternatives to integer values\n*\n* @example\n* var table = enumerated();\n* // returns <Object>\n*/\nfunction enumerated() {\n\t// NOTE: the following should match the C `alternatives.h` enumeration!!!!\n\treturn {\n\t\t// Mean is not equal to the null hypothesis value:\n\t\t'two-sided': 0,\n\n\t\t// Mean is less than the null hypothesis value:\n\t\t'less': 1,\n\n\t\t// Mean is greater than the null hypothesis value:\n\t\t'greater': 2\n\t};\n}\n\n\n// EXPORTS //\n\nexport default enumerated;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a list of Z-test alternative hypotheses.\n*\n* @module @stdlib/stats-base-ztest-alternatives\n*\n* @example\n* import alternatives from '@stdlib/stats-base-ztest-alternatives';\n*\n* var list = alternatives();\n* // e.g., returns [ 'two-sided', 'less', 'greater' ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport enumeration from './enum.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'enum', enumeration );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"enum\": \"main.enum\" }\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport DATA from './data.json';\n\n\n// MAIN //\n\n/**\n* Returns a list of Z-test alternative hypotheses.\n*\n* @returns {StringArray} list of alternative hypotheses\n*\n* @example\n* var list = alternatives();\n* // e.g., returns [ 'two-sided', 'less', 'greater' ]\n*/\nfunction alternatives() {\n\treturn DATA.slice();\n}\n\n\n// EXPORTS //\n\nexport default alternatives;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport objectInverse from '@stdlib/utils-object-inverse';\nimport { enum as enumeration } from '@stdlib/stats-base-ztest-alternatives';\n\n\n// VARIABLES //\n\nvar hash = objectInverse( enumeration(), {\n\t'duplicates': false\n});\n\n\n// MAIN //\n\n/**\n* Returns the Z-test alternative hypothesis string associated with a Z-test alternative hypothesis enumeration constant.\n*\n* @param {integer} value - alternative hypothesis enumeration constant\n* @returns {(string|null)} alternative hypothesis string or null\n*\n* @example\n* import str2enum from '@stdlib/stats-base-ztest-alternative-str2enum';\n*\n* var v = str2enum( 'two-sided' );\n* // returns <number>\n*\n* var s = enum2str( v );\n* // returns 'two-sided'\n*/\nfunction enum2str( value ) {\n\tvar v = hash[ value ];\n\treturn ( isString( v ) ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default enum2str;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectKeys from '@stdlib/utils-keys';\nimport isArray from '@stdlib/assert-is-array';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport isObjectLike from '@stdlib/assert-is-object-like';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Inverts an object, such that keys become values and values become keys.\n*\n* @param {ObjectLike} obj - input object\n* @param {Options} [opts] - function options\n* @param {boolean} [opts.duplicates=true] - boolean indicating whether to store duplicate keys\n* @throws {TypeError} first argument must be object-like\n* @throws {TypeError} second argument must an an object\n* @throws {TypeError} must provide valid options\n* @returns {Object} inverted object\n*\n* @example\n* var out = invert({\n*     'a': 'beep',\n*     'b': 'boop'\n* });\n* // returns { 'beep': 'a', 'boop': 'b' }\n*\n* @example\n* var out = invert({\n*     'a': 'beep',\n*     'b': 'beep'\n* });\n* // returns { 'beep': [ 'a', 'b' ] }\n*\n* @example\n* var obj = {};\n* obj.a = 'beep';\n* obj.b = 'boop';\n* obj.c = 'beep'; // inserted after `a`\n*\n* var out = invert( obj, {\n*     'duplicates': false\n* });\n* // returns { 'beep': 'c', 'boop': 'b' }\n*/\nfunction invert( obj, opts ) {\n\tvar allowDupes = true;\n\tvar keys;\n\tvar len;\n\tvar key;\n\tvar val;\n\tvar out;\n\tvar v;\n\tvar i;\n\tif ( !isObjectLike( obj ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object (except null). Value: `%s`.', obj ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'duplicates' ) ) {\n\t\t\tallowDupes = opts.duplicates;\n\t\t\tif ( !isBoolean( allowDupes ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'duplicates', allowDupes ) );\n\t\t\t}\n\t\t}\n\t}\n\tkeys = objectKeys( obj );\n\tlen = keys.length;\n\tout = {};\n\tif ( allowDupes ) {\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tkey = keys[ i ];\n\t\t\tval = obj[ key ];\n\t\t\tif ( !hasOwnProp( out, val ) ) {\n\t\t\t\tout[ val ] = key;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tv = out[ val ];\n\t\t\tif ( isArray( v ) ) {\n\t\t\t\tout[ val ].push( key );\n\t\t\t} else {\n\t\t\t\tout[ val ] = [ v, key ];\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tkey = keys[ i ];\n\t\t\tout[ obj[ key ] ] = key;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default invert;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport { enum as enumeration } from '@stdlib/stats-base-ztest-alternatives';\n\n\n// VARIABLES //\n\nvar ENUM = enumeration();\n\n\n// MAIN //\n\n/**\n* Returns the enumeration constant associated with a Z-test alternative hypothesis string.\n*\n* ## Notes\n*\n* -   Downstream consumers of this function should **not** rely on specific integer values (e.g., `TWO_SIDED == 0`). Instead, the function should be used in an opaque manner.\n*\n* @param {string} alternative - alternative hypothesis string\n* @returns {(integer|null)} integer value or null\n*\n* @example\n* var v = str2enum( 'greater' );\n* // returns <number>\n*/\nfunction str2enum( alternative ) {\n\tvar v = ENUM[ alternative ];\n\treturn ( isNumber( v ) ) ? v : null; // note: we include this guard to prevent walking the prototype chain\n}\n\n\n// EXPORTS //\n\nexport default str2enum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport enum2str from '@stdlib/stats-base-ztest-alternative-enum2str';\nimport str2enum from '@stdlib/stats-base-ztest-alternative-str2enum';\n\n\n// MAIN //\n\n/**\n* Returns the alternative hypothesis string associated with a supported Z-test alternative hypothesis value.\n*\n* @param {*} value - alternative hypothesis value\n* @returns {(string|null)} alternative hypothesis string or null\n*\n* @example\n* import str2enum from '@stdlib/stats-base-ztest-alternative-str2enum';\n*\n* var v = resolve( str2enum( 'greater' ) );\n* // returns 'greater'\n*/\nfunction resolve( value ) {\n\tvar t = ( typeof value );\n\tif ( t === 'string' ) {\n\t\treturn ( str2enum( value ) === null ) ? null : value;\n\t}\n\tif ( t === 'number' ) {\n\t\treturn enum2str( value );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolve;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Compute the principal square root of a double-precision floating-point number.\n*\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} principal square root\n*\n* @example\n* var v = sqrt( 4.0 );\n* // returns 2.0\n*\n* v = sqrt( 9.0 );\n* // returns 3.0\n*\n* v = sqrt( 0.0 );\n* // returns 0.0\n*\n* v = sqrt( -4.0 );\n* // returns NaN\n*\n* v = sqrt( NaN );\n* // returns NaN\n*/\nvar sqrt = Math.sqrt; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default sqrt;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ctors from './ctors.js';\n\n\n// VARIABLES //\n\nvar bool;\n\n\n// FUNCTIONS //\n\n/**\n* Returns a boolean indicating if an environment is little endian.\n*\n* @private\n* @returns {boolean} boolean indicating if an environment is little endian\n*\n* @example\n* var bool = isLittleEndian();\n* // returns <boolean>\n*/\nfunction isLittleEndian() {\n\tvar uint16view;\n\tvar uint8view;\n\n\tuint16view = new ctors[ 'uint16' ]( 1 );\n\n\t/*\n\t* Set the uint16 view to a value having distinguishable lower and higher order words.\n\t*\n\t* 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)\n\t*/\n\tuint16view[ 0 ] = 0x1234;\n\n\t// Create a uint8 view on top of the uint16 buffer:\n\tuint8view = new ctors[ 'uint8' ]( uint16view.buffer );\n\n\t// If little endian, the least significant byte will be first...\n\treturn ( uint8view[ 0 ] === 0x34 );\n}\n\n\n// MAIN //\n\nbool = isLittleEndian();\n\n\n// EXPORTS //\n\nexport default bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint8Array from '@stdlib/array-uint8';\nimport Uint16Array from '@stdlib/array-uint16';\n\n\n// MAIN //\n\nvar ctors = {\n\t'uint16': Uint16Array,\n\t'uint8': Uint8Array\n};\n\n\n// EXPORTS //\n\nexport default ctors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert-is-little-endian';\n\n\n// MAIN //\n\nvar HIGH;\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n} else {\n\tHIGH = 0; // first index\n}\n\n\n// EXPORTS //\n\nexport default HIGH;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array-uint32';\nimport Float64Array from '@stdlib/array-float64';\nimport HIGH from './high.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - input value\n* @returns {uinteger32} higher order word\n*\n* @example\n* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011\n* // returns 1774486211\n*/\nfunction getHighWord( x ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\treturn UINT32_VIEW[ HIGH ];\n}\n\n\n// EXPORTS //\n\nexport default getHighWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert-is-little-endian';\n\n\n// MAIN //\n\nvar HIGH;\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n} else {\n\tHIGH = 0; // first index\n}\n\n\n// EXPORTS //\n\nexport default HIGH;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array-uint32';\nimport Float64Array from '@stdlib/array-float64';\nimport HIGH from './high.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Sets the more significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - double\n* @param {uinteger32} high - unsigned 32-bit integer to replace the higher order word of `x`\n* @returns {number} double having the same lower order word as `x`\n*\n* @example\n* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101\n*\n* var y = setHighWord( 3.14e201, high ); // => 0 00000000000 0000000000000000010110010011110010110101100010000010\n* // returns 1.18350528745e-313\n*\n* @example\n* import PINF from '@stdlib/constants-float64-pinf'; // => 0 11111111111 00000000000000000000 00000000000000000000000000000000\n*\n* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000\n*\n* // Set the higher order bits of `+infinity` to return `1`:\n* var y = setHighWord( PINF, high ); // => 0 01111111111 0000000000000000000000000000000000000000000000000000\n* // returns 1.0\n*/\nfunction setHighWord( x, high ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\tUINT32_VIEW[ HIGH ] = ( high >>> 0 ); // identity bit shift to ensure integer\n\treturn FLOAT64_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nexport default setHighWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The bias of a double-precision floating-point number's exponent.\n*\n* @module @stdlib/constants-float64-exponent-bias\n* @type {integer32}\n*\n* @example\n* import FLOAT64_EXPONENT_BIAS from '@stdlib/constants-float64-exponent-bias';\n* // returns 1023\n*/\n\n\n// MAIN //\n\n/**\n* Bias of a double-precision floating-point number's exponent.\n*\n* ## Notes\n*\n* The bias can be computed via\n*\n* ```tex\n* \\mathrm{bias} = 2^{k-1} - 1\n* ```\n*\n* where \\\\(k\\\\) is the number of bits in the exponent; here, \\\\(k = 11\\\\).\n*\n* @constant\n* @type {integer32}\n* @default 1023\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_EXPONENT_BIAS = 1023|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_EXPONENT_BIAS;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_log.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport setHighWord from '@stdlib/number-float64-base-set-high-word';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport BIAS from '@stdlib/constants-float64-exponent-bias';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport polyvalP from './polyval_p.js';\nimport polyvalQ from './polyval_q.js';\n\n\n// VARIABLES //\n\nvar LN2_HI = 6.93147180369123816490e-01; // 3FE62E42 FEE00000\nvar LN2_LO = 1.90821492927058770002e-10; // 3DEA39EF 35793C76\nvar TWO54 = 1.80143985094819840000e+16;  // 0x43500000, 0x00000000\nvar ONE_THIRD = 0.33333333333333333;\n\n// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111\nvar HIGH_SIGNIFICAND_MASK = 0x000fffff|0; // asm type annotation\n\n// 0x7ff00000 = 2146435072 => 0 11111111111 00000000000000000000 => biased exponent: 2047 = 1023+1023 => 2^1023\nvar HIGH_MAX_NORMAL_EXP = 0x7ff00000|0; // asm type annotation\n\n// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022\nvar HIGH_MIN_NORMAL_EXP = 0x00100000|0; // asm type annotation\n\n// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1\nvar HIGH_BIASED_EXP_0 = 0x3ff00000|0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of a double-precision floating-point number.\n*\n* @param {NonNegativeNumber} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = ln( 4.0 );\n* // returns ~1.386\n*\n* @example\n* var v = ln( 0.0 );\n* // returns -Infinity\n*\n* @example\n* var v = ln( Infinity );\n* // returns Infinity\n*\n* @example\n* var v = ln( NaN );\n* // returns NaN\n*\n* @example\n* var v = ln( -4.0 );\n* // returns NaN\n*/\nfunction ln( x ) {\n\tvar hfsq;\n\tvar hx;\n\tvar t2;\n\tvar t1;\n\tvar k;\n\tvar R;\n\tvar f;\n\tvar i;\n\tvar j;\n\tvar s;\n\tvar w;\n\tvar z;\n\n\tif ( x === 0.0 ) {\n\t\treturn NINF;\n\t}\n\tif ( isnan( x ) || x < 0.0 ) {\n\t\treturn NaN;\n\t}\n\thx = getHighWord( x );\n\tk = 0|0; // asm type annotation\n\tif ( hx < HIGH_MIN_NORMAL_EXP ) {\n\t\t// Case: 0 < x < 2**-1022\n\t\tk -= 54|0; // asm type annotation\n\n\t\t// Subnormal number, scale up `x`:\n\t\tx *= TWO54;\n\t\thx = getHighWord( x );\n\t}\n\tif ( hx >= HIGH_MAX_NORMAL_EXP ) {\n\t\treturn x + x;\n\t}\n\tk += ( ( hx>>20 ) - BIAS )|0; // asm type annotation\n\thx &= HIGH_SIGNIFICAND_MASK;\n\ti = ( (hx+0x95f64) & 0x100000 )|0; // asm type annotation\n\n\t// Normalize `x` or `x/2`...\n\tx = setHighWord( x, hx|(i^HIGH_BIASED_EXP_0) );\n\tk += ( i>>20 )|0; // asm type annotation\n\tf = x - 1.0;\n\tif ( (HIGH_SIGNIFICAND_MASK&(2+hx)) < 3 ) {\n\t\t// Case: -2**-20 <= f < 2**-20\n\t\tif ( f === 0.0 ) {\n\t\t\tif ( k === 0 ) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\treturn (k * LN2_HI) + (k * LN2_LO);\n\t\t}\n\t\tR = f * f * ( 0.5 - (ONE_THIRD*f) );\n\t\tif ( k === 0 ) {\n\t\t\treturn f - R;\n\t\t}\n\t\treturn (k * LN2_HI) - ( (R-(k*LN2_LO)) - f );\n\t}\n\ts = f / (2.0 + f);\n\tz = s * s;\n\ti = ( hx - 0x6147a )|0; // asm type annotation\n\tw = z * z;\n\tj = ( 0x6b851 - hx )|0; // asm type annotation\n\tt1 = w * polyvalP( w );\n\tt2 = z * polyvalQ( w );\n\ti |= j;\n\tR = t2 + t1;\n\tif ( i > 0 ) {\n\t\thfsq = 0.5 * f * f;\n\t\tif ( k === 0 ) {\n\t\t\treturn f - ( hfsq - (s * (hfsq+R)) );\n\t\t}\n\t\treturn (k * LN2_HI) - ( hfsq - ((s*(hfsq+R))+(k*LN2_LO)) - f );\n\t}\n\tif ( k === 0 ) {\n\t\treturn f - (s*(f-R));\n\t}\n\treturn (k * LN2_HI) - ( ( (s*(f-R)) - (k*LN2_LO) ) - f );\n}\n\n\n// EXPORTS //\n\nexport default ln;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.3999999999940942;\n\t}\n\treturn 0.3999999999940942 + (x * (0.22222198432149784 + (x * 0.15313837699209373))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.6666666666666735;\n\t}\n\treturn 0.6666666666666735 + (x * (0.2857142874366239 + (x * (0.1818357216161805 + (x * 0.14798198605116586))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_48_0/boost/math/special_functions/detail/erf_inv.hpp}. This implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport ln from '@stdlib/math-base-special-ln';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport rationalFcnR1 from './rational_p1q1.js';\nimport rationalFcnR2 from './rational_p2q2.js';\nimport rationalFcnR3 from './rational_p3q3.js';\nimport rationalFcnR4 from './rational_p4q4.js';\nimport rationalFcnR5 from './rational_p5q5.js';\n\n\n// VARIABLES //\n\nvar Y1 = 8.91314744949340820313e-2;\nvar Y2 = 2.249481201171875;\nvar Y3 = 8.07220458984375e-1;\nvar Y4 = 9.3995571136474609375e-1;\nvar Y5 = 9.8362827301025390625e-1;\n\n\n// MAIN //\n\n/**\n* Evaluates the inverse error function.\n*\n* ## Method\n*\n* 1.  For \\\\(|x| \\leq 0.5\\\\), we evaluate the inverse error function using the rational approximation\n*\n*     ```tex\n*     \\operatorname{erf^{-1}}(x) = x(x+10)(\\mathrm{Y} + \\operatorname{R}(x))\n*     ```\n*\n*     where \\\\(Y\\\\) is a constant and \\\\(\\operatorname{R}(x)\\\\) is optimized for a low absolute error compared to \\\\(|Y|\\\\).\n*\n*     <!-- <note> -->\n*\n*     Max error \\\\(2.001849\\mbox{e-}18\\\\). Maximum deviation found (error term at infinite precision) \\\\(8.030\\mbox{e-}21\\\\).\n*\n*     <!-- </note> -->\n*\n* 2.  For \\\\(0.5 > 1-|x| \\geq 0\\\\), we evaluate the inverse error function using the rational approximation\n*\n*     ```tex\n*     \\operatorname{erf^{-1}} = \\frac{\\sqrt{-2 \\cdot \\ln(1-x)}}{\\mathrm{Y} + \\operatorname{R}(1-x)}\n*     ```\n*\n*     where \\\\(Y\\\\) is a constant, and \\\\(\\operatorname{R}(q)\\\\) is optimized for a low absolute error compared to \\\\(Y\\\\).\n*\n*     <!-- <note> -->\n*\n*     Max error \\\\(7.403372\\mbox{e-}17\\\\). Maximum deviation found (error term at infinite precision) \\\\(4.811\\mbox{e-}20\\\\).\n*\n*     <!-- </note> -->\n*\n* 3.  For \\\\(1-|x| < 0.25\\\\), we have a series of rational approximations all of the general form\n*\n*     ```tex\n*     p = \\sqrt{-\\ln(1-x)}\n*     ```\n*\n*     Accordingly, the result is given by\n*\n*     ```tex\n*     \\operatorname{erf^{-1}}(x) = p(\\mathrm{Y} + \\operatorname{R}(p-B))\n*     ```\n*\n*     where \\\\(Y\\\\) is a constant, \\\\(B\\\\) is the lowest value of \\\\(p\\\\) for which the approximation is valid, and \\\\(\\operatorname{R}(x-B)\\\\) is optimized for a low absolute error compared to \\\\(Y\\\\).\n*\n*     <!-- <note> -->\n*\n*     Almost all code will only go through the first or maybe second approximation.  After that we are dealing with very small input values.\n*\n*     -   If \\\\(p < 3\\\\), max error \\\\(1.089051\\mbox{e-}20\\\\).\n*     -   If \\\\(p < 6\\\\), max error \\\\(8.389174\\mbox{e-}21\\\\).\n*     -   If \\\\(p < 18\\\\), max error \\\\(1.481312\\mbox{e-}19\\\\).\n*     -   If \\\\(p < 44\\\\), max error \\\\(5.697761\\mbox{e-}20\\\\).\n*     -   If \\\\(p \\geq 44\\\\), max error \\\\(1.279746\\mbox{e-}20\\\\).\n*\n*     <!-- </note> -->\n*\n*     <!-- <note> -->\n*\n*     The Boost library can accommodate \\\\(80\\\\) and \\\\(128\\\\) bit long doubles. JavaScript only supports a \\\\(64\\\\) bit double (IEEE 754). Accordingly, the smallest \\\\(p\\\\) (in JavaScript at the time of this writing) is \\\\(\\sqrt{-\\ln(\\sim5\\mbox{e-}324)} = 27.284429111150214\\\\).\n*\n*     <!-- </note> -->\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var y = erfinv( 0.5 );\n* // returns ~0.4769\n*\n* @example\n* var y = erfinv( 0.8 );\n* // returns ~0.9062\n*\n* @example\n* var y = erfinv( 0.0 );\n* // returns 0.0\n*\n* @example\n* var y = erfinv( -0.0 );\n* // returns -0.0\n*\n* @example\n* var y = erfinv( -1.0 );\n* // returns -Infinity\n*\n* @example\n* var y = erfinv( 1.0 );\n* // returns Infinity\n*\n* @example\n* var y = erfinv( NaN );\n* // returns NaN\n*/\nfunction erfinv( x ) {\n\tvar sign;\n\tvar ax;\n\tvar qs;\n\tvar q;\n\tvar g;\n\tvar r;\n\n\t// Special case: NaN\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\t// Special case: 1\n\tif ( x === 1.0 ) {\n\t\treturn PINF;\n\t}\n\t// Special case: -1\n\tif ( x === -1.0 ) {\n\t\treturn NINF;\n\t}\n\t// Special case: +-0\n\tif ( x === 0.0 ) {\n\t\treturn x;\n\t}\n\t// Special case: |x| > 1 (range error)\n\tif ( x > 1.0 || x < -1.0 ) {\n\t\treturn NaN;\n\t}\n\t// Argument reduction (reduce to interval [0,1]). If `x` is negative, we can safely negate the value, taking advantage of the error function being an odd function; i.e., `erf(-x) = -erf(x)`.\n\tif ( x < 0.0 ) {\n\t\tsign = -1.0;\n\t\tax = -x;\n\t} else {\n\t\tsign = 1.0;\n\t\tax = x;\n\t}\n\tq = 1.0 - ax;\n\n\t// |x| <= 0.5\n\tif ( ax <= 0.5 ) {\n\t\tg = ax * ( ax + 10.0 );\n\t\tr = rationalFcnR1( ax );\n\t\treturn sign * ( (g*Y1) + (g*r) );\n\t}\n\t// 1-|x| >= 0.25\n\tif ( q >= 0.25 ) {\n\t\tg = sqrt( -2.0 * ln(q) );\n\t\tq -= 0.25;\n\t\tr = rationalFcnR2( q );\n\t\treturn sign * ( g / (Y2+r) );\n\t}\n\tq = sqrt( -ln( q ) );\n\n\t// q < 3\n\tif ( q < 3.0 ) {\n\t\tqs = q - 1.125;\n\t\tr = rationalFcnR3( qs );\n\t\treturn sign * ( (Y3*q) + (r*q) );\n\t}\n\t// q < 6\n\tif ( q < 6.0 ) {\n\t\tqs = q - 3.0;\n\t\tr = rationalFcnR4( qs );\n\t\treturn sign * ( (Y4*q) + (r*q) );\n\t}\n\t// q < 18\n\tqs = q - 6.0;\n\tr = rationalFcnR5( qs );\n\treturn sign * ( (Y5*q) + (r*q) );\n}\n\n\n// EXPORTS //\n\nexport default erfinv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.0005087819496582806;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.0005087819496582806 + (x * (-0.008368748197417368 + (x * (0.03348066254097446 + (x * (-0.012692614766297404 + (x * (-0.03656379714117627 + (x * (0.02198786811111689 + (x * (0.008226878746769157 + (x * (-0.005387729650712429 + (x * (0.0 + (x * 0.0))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (-0.9700050433032906 + (x * (-1.5657455823417585 + (x * (1.5622155839842302 + (x * (0.662328840472003 + (x * (-0.7122890234154284 + (x * (-0.05273963823400997 + (x * (0.07952836873415717 + (x * (-0.0023339375937419 + (x * 0.0008862163904564247))))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (0.0 + (x * (-0.005387729650712429 + (x * (0.008226878746769157 + (x * (0.02198786811111689 + (x * (-0.03656379714117627 + (x * (-0.012692614766297404 + (x * (0.03348066254097446 + (x * (-0.008368748197417368 + (x * -0.0005087819496582806))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.0008862163904564247 + (x * (-0.0023339375937419 + (x * (0.07952836873415717 + (x * (-0.05273963823400997 + (x * (-0.7122890234154284 + (x * (0.662328840472003 + (x * (1.5622155839842302 + (x * (-1.5657455823417585 + (x * (-0.9700050433032906 + (x * 1.0))))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.20243350835593876;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.20243350835593876 + (x * (0.10526468069939171 + (x * (8.3705032834312 + (x * (17.644729840837403 + (x * (-18.851064805871424 + (x * (-44.6382324441787 + (x * (17.445385985570866 + (x * (21.12946554483405 + (x * -3.6719225470772936))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (6.242641248542475 + (x * (3.971343795334387 + (x * (-28.66081804998 + (x * (-20.14326346804852 + (x * (48.560921310873994 + (x * (10.826866735546016 + (x * (-22.643693341313973 + (x * 1.7211476576120028))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -3.6719225470772936 + (x * (21.12946554483405 + (x * (17.445385985570866 + (x * (-44.6382324441787 + (x * (-18.851064805871424 + (x * (17.644729840837403 + (x * (8.3705032834312 + (x * (0.10526468069939171 + (x * -0.20243350835593876))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.7211476576120028 + (x * (-22.643693341313973 + (x * (10.826866735546016 + (x * (48.560921310873994 + (x * (-20.14326346804852 + (x * (-28.66081804998 + (x * (3.971343795334387 + (x * (6.242641248542475 + (x * 1.0))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.1311027816799519;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.1311027816799519 + (x * (-0.16379404719331705 + (x * (0.11703015634199525 + (x * (0.38707973897260434 + (x * (0.3377855389120359 + (x * (0.14286953440815717 + (x * (0.029015791000532906 + (x * (0.0021455899538880526 + (x * (-6.794655751811263e-7 + (x * (2.8522533178221704e-8 + (x * -6.81149956853777e-10))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (3.4662540724256723 + (x * (5.381683457070069 + (x * (4.778465929458438 + (x * (2.5930192162362027 + (x * (0.848854343457902 + (x * (0.15226433829533179 + (x * (0.011059242293464892 + (x * (0.0 + (x * (0.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -6.81149956853777e-10 + (x * (2.8522533178221704e-8 + (x * (-6.794655751811263e-7 + (x * (0.0021455899538880526 + (x * (0.029015791000532906 + (x * (0.14286953440815717 + (x * (0.3377855389120359 + (x * (0.38707973897260434 + (x * (0.11703015634199525 + (x * (-0.16379404719331705 + (x * -0.1311027816799519))))))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.0 + (x * (0.0 + (x * (0.0 + (x * (0.011059242293464892 + (x * (0.15226433829533179 + (x * (0.848854343457902 + (x * (2.5930192162362027 + (x * (4.778465929458438 + (x * (5.381683457070069 + (x * (3.4662540724256723 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.0350353787183178;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.0350353787183178 + (x * (-0.0022242652921344794 + (x * (0.018557330651423107 + (x * (0.009508047013259196 + (x * (0.0018712349281955923 + (x * (0.00015754461742496055 + (x * (0.00000460469890584318 + (x * (-2.304047769118826e-10 + (x * 2.6633922742578204e-12))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (1.3653349817554064 + (x * (0.7620591645536234 + (x * (0.22009110576413124 + (x * (0.03415891436709477 + (x * (0.00263861676657016 + (x * (0.00007646752923027944 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 2.6633922742578204e-12 + (x * (-2.304047769118826e-10 + (x * (0.00000460469890584318 + (x * (0.00015754461742496055 + (x * (0.0018712349281955923 + (x * (0.009508047013259196 + (x * (0.018557330651423107 + (x * (-0.0022242652921344794 + (x * -0.0350353787183178))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.0 + (x * (0.0 + (x * (0.00007646752923027944 + (x * (0.00263861676657016 + (x * (0.03415891436709477 + (x * (0.22009110576413124 + (x * (0.7620591645536234 + (x * (1.3653349817554064 + (x * 1.0))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.016743100507663373;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.016743100507663373 + (x * (-0.0011295143874558028 + (x * (0.001056288621524929 + (x * (0.00020938631748758808 + (x * (0.000014962478375834237 + (x * (4.4969678992770644e-7 + (x * (4.625961635228786e-9 + (x * (-2.811287356288318e-14 + (x * 9.905570997331033e-17))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.5914293448864175 + (x * (0.1381518657490833 + (x * (0.016074608709367652 + (x * (0.0009640118070051656 + (x * (0.000027533547476472603 + (x * (2.82243172016108e-7 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 9.905570997331033e-17 + (x * (-2.811287356288318e-14 + (x * (4.625961635228786e-9 + (x * (4.4969678992770644e-7 + (x * (0.000014962478375834237 + (x * (0.00020938631748758808 + (x * (0.001056288621524929 + (x * (-0.0011295143874558028 + (x * -0.016743100507663373))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.0 + (x * (0.0 + (x * (2.82243172016108e-7 + (x * (0.000027533547476472603 + (x * (0.0009640118070051656 + (x * (0.016074608709367652 + (x * (0.1381518657490833 + (x * (0.5914293448864175 + (x * 1.0))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nexport default evalrational;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Creates a function which always returns the same value.\n*\n* @param {*} [value] - value to always return\n* @returns {Function} constant function\n*\n* @example\n* var fcn = wrap( 3.14 );\n*\n* var v = fcn();\n* // returns 3.14\n*\n* v = fcn();\n* // returns 3.14\n*\n* v = fcn();\n* // returns 3.14\n*/\nfunction wrap( value ) {\n\treturn constantFunction;\n\n\t/**\n\t* Constant function.\n\t*\n\t* @private\n\t* @returns {*} constant value\n\t*/\n\tfunction constantFunction() {\n\t\treturn value;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default wrap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-quantile';\nimport erfinv from '@stdlib/math-base-special-erfinv';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function of a normal distribution.\n*\n* @param {number} mu - mean\n* @param {NonNegativeNumber} sigma - standard deviation\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 10.0, 2.0 );\n* var y = quantile( 0.5 );\n* // returns 10.0\n*\n* y = quantile( 0.8 );\n* // returns ~11.683\n*/\nfunction factory( mu, sigma ) {\n\tvar A;\n\tvar B;\n\tif ( isnan( mu ) || isnan( sigma ) || sigma < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( sigma === 0.0 ) {\n\t\tdegenerate( mu );\n\t}\n\tA = mu;\n\tB = sigma * sqrt( 2.0 );\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a normal distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn A + ( B * erfinv( (2.0*p) - 1.0 ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Degenerate distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-degenerate-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-degenerate-quantile';\n*\n* var y = quantile( 0.5, 2.0 );\n* // returns 2.0\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-degenerate-quantile';\n*\n* var quantile = factory( 10.0 );\n*\n* var y = quantile( 0.5 );\n* // returns 10.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a degenerate distribution centered at `mu`.\n*\n* @param {Probability} p - input value\n* @param {number} mu - constant value of the distribution\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.5, 2.0 );\n* // returns 2.0\n*\n* @example\n* var y = quantile( 0.9, 4.0 );\n* // returns 4.0\n*\n* @example\n* var y = quantile( 1.1, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN );\n* // returns NaN\n*/\nfunction quantile( p, mu ) {\n\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\treturn NaN;\n\t}\n\treturn mu;\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function of a degenerate distribution centered at a provided mean value.\n*\n* @param {number} mu - value at which to center the distribution\n* @returns {Function} function to evaluate the quantile function\n*\n* @example\n* var quantile = factory( 5.0 );\n*\n* var y = quantile( 0.3 );\n* // returns 5.0\n*\n* y = quantile( 0.1 );\n* // returns 5.0\n*\n* y = quantile( 1.1 );\n* // returns NaN\n*/\nfunction factory( mu ) {\n\tif ( isnan( mu ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function of a degenerate distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn mu;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Normal distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-normal-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-normal-quantile';\n*\n* var y = quantile( 0.8, 0.0, 1.0 );\n* // returns ~0.842\n*\n* var myQuantile = quantile.factory( 10.0, 2.0 );\n* y = myQuantile( 0.5 );\n* // returns 10.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport erfinv from '@stdlib/math-base-special-erfinv';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a normal distribution with mean `mu` and standard deviation `sigma` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {number} mu - mean\n* @param {NonNegativeNumber} sigma - standard deviation\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 0.0, 1.0 );\n* // returns ~0.842\n*\n* @example\n* var y = quantile( 0.5, 4.0, 2.0 );\n* // returns 4.0\n*\n* @example\n* var y = quantile( 1.1, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative standard deviation:\n* var y = quantile( 0.5, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction quantile( p, mu, sigma ) {\n\tvar A;\n\tvar B;\n\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tisnan( p ) ||\n\t\tsigma < 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn mu;\n\t}\n\tA = mu;\n\tB = sigma * sqrt( 2.0 );\n\treturn A + (B * erfinv( (2.0*p) - 1.0 ));\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: implementation (?)\n\n/**\n* Rounds a double-precision floating-point number toward positive infinity.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = ceil( -4.2 );\n* // returns -4.0\n*\n* @example\n* var v = ceil( 9.99999 );\n* // returns 10.0\n*\n* @example\n* var v = ceil( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = ceil( NaN );\n* // returns NaN\n*/\nvar ceil = Math.ceil; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default ceil;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\nimport ceil from '@stdlib/math-base-special-ceil';\n\n\n// MAIN //\n\n/**\n* Rounds a double-precision floating-point number toward zero.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = trunc( -4.2 );\n* // returns -4.0\n*\n* @example\n* var v = trunc( 9.99999 );\n* // returns 9.0\n*\n* @example\n* var v = trunc( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = trunc( -0.0 );\n* // returns -0.0\n*\n* @example\n* var v = trunc( NaN );\n* // returns NaN\n*\n* @example\n* var v = trunc( Infinity );\n* // returns Infinity\n*\n* @example\n* var v = trunc( -Infinity );\n* // returns -Infinity\n*/\nfunction trunc( x ) {\n\tif ( x < 0.0 ) {\n\t\treturn ceil( x );\n\t}\n\treturn floor( x );\n}\n\n\n// EXPORTS //\n\nexport default trunc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The maximum biased base 2 exponent for a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-max-base2-exponent\n* @type {integer32}\n*\n* @example\n* import FLOAT64_MAX_BASE2_EXPONENT from '@stdlib/constants-float64-max-base2-exponent';\n* // returns 1023\n*/\n\n\n// MAIN //\n\n/**\n* The maximum biased base 2 exponent for a double-precision floating-point number.\n*\n* ```text\n* 11111111110 => 2046 - BIAS = 1023\n* ```\n*\n* where `BIAS = 1023`.\n*\n* @constant\n* @type {integer32}\n* @default 1023\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_BASE2_EXPONENT = 1023|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX_BASE2_EXPONENT;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-max-base2-exponent-subnormal\n* @type {integer32}\n*\n* @example\n* import FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL from '@stdlib/constants-float64-max-base2-exponent-subnormal';\n* // returns -1023\n*/\n\n\n// MAIN //\n\n/**\n* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* ```text\n* 00000000000 => 0 - BIAS = -1023\n* ```\n*\n* where `BIAS = 1023`.\n*\n* @constant\n* @type {integer32}\n* @default -1023\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = -1023|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-min-base2-exponent-subnormal\n* @type {integer32}\n*\n* @example\n* import FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL from '@stdlib/constants-float64-min-base2-exponent-subnormal';\n* // returns -1074\n*/\n\n\n// MAIN //\n\n/**\n* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* ```text\n* -(BIAS+(52-1)) = -(1023+51) = -1074\n* ```\n*\n* where `BIAS = 1023` and `52` is the number of digits in the significand.\n*\n* @constant\n* @type {integer32}\n* @default -1074\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = -1074|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is infinite.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is infinite\n*\n* @example\n* var bool = isInfinite( Infinity );\n* // returns true\n*\n* @example\n* var bool = isInfinite( -Infinity );\n* // returns true\n*\n* @example\n* var bool = isInfinite( 5.0 );\n* // returns false\n*\n* @example\n* var bool = isInfinite( NaN );\n* // returns false\n*/\nfunction isInfinite( x ) {\n\treturn (x === PINF || x === NINF);\n}\n\n\n// EXPORTS //\n\nexport default isInfinite;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* High word mask for the sign bit of a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-high-word-sign-mask\n* @type {uinteger32}\n*\n* @example\n* import FLOAT64_HIGH_WORD_SIGN_MASK from '@stdlib/constants-float64-high-word-sign-mask';\n* // returns 2147483648\n*/\n\n\n// MAIN //\n\n/**\n* High word mask for the sign bit of a double-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for the sign bit of a double-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2147483648 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 1 00000000000 00000000000000000000\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x80000000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_HIGH_WORD_SIGN_MASK = 0x80000000>>>0; // eslint-disable-line id-length\n\n\n// EXPORTS //\n\nexport default FLOAT64_HIGH_WORD_SIGN_MASK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert-is-little-endian';\n\n\n// MAIN //\n\nvar indices;\nvar HIGH;\nvar LOW;\n\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n\tLOW = 0; // first index\n} else {\n\tHIGH = 0; // first index\n\tLOW = 1; // second index\n}\nindices = {\n\t'HIGH': HIGH,\n\t'LOW': LOW\n};\n\n\n// EXPORTS //\n\nexport default indices;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* High word mask for excluding the sign bit of a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-high-word-abs-mask\n* @type {uinteger32}\n*\n* @example\n* import FLOAT64_HIGH_WORD_ABS_MASK from '@stdlib/constants-float64-high-word-abs-mask';\n* // returns 2147483647\n*/\n\n\n// MAIN //\n\n/**\n* High word mask for excluding the sign bit of a double-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for excluding the sign bit of a double-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2147483647 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 11111111111 11111111111111111111\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x7fffffff\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_HIGH_WORD_ABS_MASK = 0x7fffffff>>>0; // eslint-disable-line id-length\n\n\n// EXPORTS //\n\nexport default FLOAT64_HIGH_WORD_ABS_MASK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert-is-little-endian';\n\n\n// MAIN //\n\nvar indices;\nvar HIGH;\nvar LOW;\n\nif ( isLittleEndian === true ) {\n\tHIGH = 1; // second index\n\tLOW = 0; // first index\n} else {\n\tHIGH = 0; // first index\n\tLOW = 1; // second index\n}\nindices = {\n\t'HIGH': HIGH,\n\t'LOW': LOW\n};\n\n\n// EXPORTS //\n\nexport default indices;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array-uint32';\nimport Float64Array from '@stdlib/array-float64';\nimport indices from './indices.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\nvar HIGH = indices.HIGH;\nvar LOW = indices.LOW;\n\n\n// MAIN //\n\n/**\n* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @private\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* import Uint32Array from '@stdlib/array-uint32';\n*\n* var out = new Uint32Array( 2 );\n*\n* var w = toWords( 3.14e201, out, 1, 0 );\n* // returns <Uint32Array>[ 1774486211, 2479577218 ]\n*\n* var bool = ( w === out );\n* // returns true\n*/\nfunction toWords( x, out, stride, offset ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\tout[ offset ] = UINT32_VIEW[ HIGH ];\n\tout[ offset + stride ] = UINT32_VIEW[ LOW ];\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default toWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport fcn from './assign.js';\n\n\n// MAIN //\n\n/**\n* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* @param {number} x - input value\n* @returns {Array<number>} output array\n*\n* @example\n* var w = toWords( 3.14e201 );\n* // returns [ 1774486211, 2479577218 ]\n*/\nfunction toWords( x ) {\n\treturn fcn( x, [ 0>>>0, 0>>>0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default toWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Split a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* @module @stdlib/number-float64-base-to-words\n*\n* @example\n* import toWords from '@stdlib/number-float64-base-to-words';\n*\n* var w = toWords( 3.14e201 );\n* // returns [ 1774486211, 2479577218 ]\n*\n* @example\n* import Uint32Array from '@stdlib/array-uint32';\n* import toWords from '@stdlib/number-float64-base-to-words';\n*\n* var out = new Uint32Array( 2 );\n*\n* var w = toWords.assign( 3.14e201, out, 1, 0 );\n* // returns <Uint32Array>[ 1774486211, 2479577218 ]\n*\n* var bool = ( w === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array-uint32';\nimport Float64Array from '@stdlib/array-float64';\nimport indices from './indices.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\nvar HIGH = indices.HIGH;\nvar LOW = indices.LOW;\n\n\n// MAIN //\n\n/**\n* Creates a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 should we place the higher order bits? If little endian, the second; if big endian, the first.\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {uinteger32} high - higher order word (unsigned 32-bit integer)\n* @param {uinteger32} low - lower order word (unsigned 32-bit integer)\n* @returns {number} floating-point number\n*\n* @example\n* var v = fromWords( 1774486211, 2479577218 );\n* // returns 3.14e201\n*\n* @example\n* var v = fromWords( 3221823995, 1413754136 );\n* // returns -3.141592653589793\n*\n* @example\n* var v = fromWords( 0, 0 );\n* // returns 0.0\n*\n* @example\n* var v = fromWords( 2147483648, 0 );\n* // returns -0.0\n*\n* @example\n* var v = fromWords( 2146959360, 0 );\n* // returns NaN\n*\n* @example\n* var v = fromWords( 2146435072, 0 );\n* // returns Infinity\n*\n* @example\n* var v = fromWords( 4293918720, 0 );\n* // returns -Infinity\n*/\nfunction fromWords( high, low ) {\n\tUINT32_VIEW[ HIGH ] = high;\n\tUINT32_VIEW[ LOW ] = low;\n\treturn FLOAT64_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nexport default fromWords;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport SIGN_MASK from '@stdlib/constants-float64-high-word-sign-mask';\nimport ABS_MASK from '@stdlib/constants-float64-high-word-abs-mask';\nimport toWords from '@stdlib/number-float64-base-to-words';\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport fromWords from '@stdlib/number-float64-base-from-words';\n\n\n// VARIABLES //\n\n// High/low words workspace:\nvar WORDS = [ 0, 0 ];\n\n\n// MAIN //\n\n/**\n* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `y`.\n*\n* @param {number} x - number from which to derive a magnitude\n* @param {number} y - number from which to derive a sign\n* @returns {number} a double-precision floating-point number\n*\n* @example\n* var z = copysign( -3.14, 10.0 );\n* // returns 3.14\n*\n* @example\n* var z = copysign( 3.14, -1.0 );\n* // returns -3.14\n*\n* @example\n* var z = copysign( 1.0, -0.0 );\n* // returns -1.0\n*\n* @example\n* var z = copysign( -3.14, -0.0 );\n* // returns -3.14\n*\n* @example\n* var z = copysign( -0.0, 1.0 );\n* // returns 0.0\n*/\nfunction copysign( x, y ) {\n\tvar hx;\n\tvar hy;\n\n\t// Split `x` into higher and lower order words:\n\ttoWords.assign( x, WORDS, 1, 0 );\n\thx = WORDS[ 0 ];\n\n\t// Turn off the sign bit of `x`:\n\thx &= ABS_MASK;\n\n\t// Extract the higher order word from `y`:\n\thy = getHighWord( y );\n\n\t// Leave only the sign bit of `y` turned on:\n\thy &= SIGN_MASK;\n\n\t// Copy the sign bit of `y` to `x`:\n\thx |= hy;\n\n\t// Return a new value having the same magnitude as `x`, but with the sign of `y`:\n\treturn fromWords( hx, WORDS[ 1 ] );\n}\n\n\n// EXPORTS //\n\nexport default copysign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Smallest positive double-precision floating-point normal number.\n*\n* @module @stdlib/constants-float64-smallest-normal\n* @type {number}\n*\n* @example\n* import FLOAT64_SMALLEST_NORMAL from '@stdlib/constants-float64-smallest-normal';\n* // returns 2.2250738585072014e-308\n*/\n\n\n// MAIN //\n\n/**\n* The smallest positive double-precision floating-point normal number.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* \\frac{1}{2^{1023-1}}\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 00000000001 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default 2.2250738585072014e-308\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_SMALLEST_NORMAL = 2.2250738585072014e-308;\n\n\n// EXPORTS //\n\nexport default FLOAT64_SMALLEST_NORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the absolute value of a double-precision floating-point number `x`.\n*\n* @param {number} x - input value\n* @returns {number} absolute value\n*\n* @example\n* var v = abs( -1.0 );\n* // returns 1.0\n*\n* @example\n* var v = abs( 2.0 );\n* // returns 2.0\n*\n* @example\n* var v = abs( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = abs( -0.0 );\n* // returns 0.0\n*\n* @example\n* var v = abs( NaN );\n* // returns NaN\n*/\nfunction abs( x ) {\n\treturn Math.abs( x ); // eslint-disable-line stdlib/no-builtin-math\n}\n\n\n// EXPORTS //\n\nexport default abs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport FLOAT64_SMALLEST_NORMAL from '@stdlib/constants-float64-smallest-normal';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs from '@stdlib/math-base-special-abs';\n\n\n// VARIABLES //\n\n// (1<<52)\nvar SCALAR = 4503599627370496;\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\) and assigns results to a provided output array.\n*\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* import pow from '@stdlib/math-base-special-pow';\n*\n* var out = normalize( 3.14e-319, [ 0.0, 0 ], 1, 0 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0,exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var out = normalize( 0.0, [ 0.0, 0 ], 1, 0 );\n* // returns [ 0.0, 0 ];\n*\n* @example\n* import PINF from '@stdlib/constants-float64-pinf';\n*\n* var out = normalize( PINF, [ 0.0, 0 ], 1, 0 );\n* // returns [ Infinity, 0 ]\n*\n* @example\n* import NINF from '@stdlib/constants-float64-ninf';\n*\n* var out = normalize( NINF, [ 0.0, 0 ], 1, 0 );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var out = normalize( NaN, [ 0.0, 0 ], 1, 0 );\n* // returns [ NaN, 0 ]\n*/\nfunction normalize( x, out, stride, offset ) {\n\tif ( isnan( x ) || isInfinite( x ) ) {\n\t\tout[ offset ] = x;\n\t\tout[ offset + stride ] = 0;\n\t\treturn out;\n\t}\n\tif ( x !== 0.0 && abs( x ) < FLOAT64_SMALLEST_NORMAL ) {\n\t\tout[ offset ] = x * SCALAR;\n\t\tout[ offset + stride ] = -52;\n\t\treturn out;\n\t}\n\tout[ offset ] = x;\n\tout[ offset + stride ] = 0;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default normalize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @module @stdlib/number-float64-base-normalize\n*\n* @example\n* import normalize from '@stdlib/number-float64-base-normalize';\n* import pow from '@stdlib/math-base-special-pow';\n*\n* var out = normalize( 3.14e-319 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0, exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import normalize from '@stdlib/number-float64-base-normalize';\n*\n* var out = new Float64Array( 2 );\n*\n* var v = normalize.assign( 3.14e-319, out, 1, 0 );\n* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport fcn from './assign.js';\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @param {number} x - input value\n* @returns {NumberArray} output array\n*\n* @example\n* import pow from '@stdlib/math-base-special-pow';\n*\n* var out = normalize( 3.14e-319 );\n* // returns [ 1.4141234400356668e-303, -52 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2.0,exp) === 3.14e-319 );\n* // returns true\n*\n* @example\n* var out = normalize( 0.0 );\n* // returns [ 0.0, 0 ]\n*\n* @example\n* import PINF from '@stdlib/constants-float64-pinf';\n*\n* var out = normalize( PINF );\n* // returns [ Infinity, 0 ]\n*\n* @example\n* import NINF from '@stdlib/constants-float64-ninf';\n*\n* var out = normalize( NINF );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var out = normalize( NaN );\n* // returns [ NaN, 0 ]\n*/\nfunction normalize( x ) {\n\treturn fcn( x, [ 0.0, 0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default normalize;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* High word mask for the exponent of a double-precision floating-point number.\n*\n* @module @stdlib/constants-float64-high-word-exponent-mask\n* @type {uinteger32}\n*\n* @example\n* import FLOAT64_HIGH_WORD_EXPONENT_MASK from '@stdlib/constants-float64-high-word-exponent-mask';\n* // returns 2146435072\n*/\n\n\n// MAIN //\n\n/**\n* High word mask for the exponent of a double-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for the exponent of a double-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2146435072 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 11111111111 00000000000000000000\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x7ff00000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_HIGH_WORD_EXPONENT_MASK = 0x7ff00000;\n\n\n// EXPORTS //\n\nexport default FLOAT64_HIGH_WORD_EXPONENT_MASK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// NOTES //\n\n/*\n* => ldexp: load exponent (see [The Open Group]{@link http://pubs.opengroup.org/onlinepubs/9699919799/functions/ldexp.html} and [cppreference]{@link http://en.cppreference.com/w/c/numeric/math/ldexp}).\n*/\n\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport BIAS from '@stdlib/constants-float64-exponent-bias';\nimport MAX_EXPONENT from '@stdlib/constants-float64-max-base2-exponent';\nimport MAX_SUBNORMAL_EXPONENT from '@stdlib/constants-float64-max-base2-exponent-subnormal';\nimport MIN_SUBNORMAL_EXPONENT from '@stdlib/constants-float64-min-base2-exponent-subnormal';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport copysign from '@stdlib/math-base-special-copysign';\nimport { assign as normalize } from '@stdlib/number-float64-base-normalize';\nimport floatExp from '@stdlib/number-float64-base-exponent';\nimport toWords from '@stdlib/number-float64-base-to-words';\nimport fromWords from '@stdlib/number-float64-base-from-words';\n\n\n// VARIABLES //\n\n// 1/(1<<52) = 1/(2**52) = 1/4503599627370496\nvar TWO52_INV = 2.220446049250313e-16;\n\n// Exponent all 0s: 1 00000000000 11111111111111111111 => 2148532223\nvar CLEAR_EXP_MASK = 0x800fffff>>>0; // asm type annotation\n\n// Normalization workspace:\nvar FRAC = [ 0.0, 0.0 ];\n\n// High/low words workspace:\nvar WORDS = [ 0, 0 ];\n\n\n// MAIN //\n\n/**\n* Multiplies a double-precision floating-point number by an integer power of two.\n*\n* @param {number} frac - fraction\n* @param {integer} exp - exponent\n* @returns {number} double-precision floating-point number\n*\n* @example\n* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8\n* // returns 4.0\n*\n* @example\n* var x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)\n* // returns 1.0\n*\n* @example\n* var x = ldexp( 0.0, 20 );\n* // returns 0.0\n*\n* @example\n* var x = ldexp( -0.0, 39 );\n* // returns -0.0\n*\n* @example\n* var x = ldexp( NaN, -101 );\n* // returns NaN\n*\n* @example\n* var x = ldexp( Infinity, 11 );\n* // returns Infinity\n*\n* @example\n* var x = ldexp( -Infinity, -118 );\n* // returns -Infinity\n*/\nfunction ldexp( frac, exp ) {\n\tvar high;\n\tvar m;\n\tif (\n\t\texp === 0 ||\n\t\tfrac === 0.0 || // handles +-0\n\t\tisnan( frac ) ||\n\t\tisInfinite( frac )\n\t) {\n\t\treturn frac;\n\t}\n\t// Normalize the input fraction:\n\tnormalize( frac, FRAC, 1, 0 );\n\tfrac = FRAC[ 0 ];\n\texp += FRAC[ 1 ];\n\n\t// Extract the exponent from `frac` and add it to `exp`:\n\texp += floatExp( frac );\n\n\t// Check for underflow/overflow...\n\tif ( exp < MIN_SUBNORMAL_EXPONENT ) {\n\t\treturn copysign( 0.0, frac );\n\t}\n\tif ( exp > MAX_EXPONENT ) {\n\t\tif ( frac < 0.0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\treturn PINF;\n\t}\n\t// Check for a subnormal and scale accordingly to retain precision...\n\tif ( exp <= MAX_SUBNORMAL_EXPONENT ) {\n\t\texp += 52;\n\t\tm = TWO52_INV;\n\t} else {\n\t\tm = 1.0;\n\t}\n\t// Split the fraction into higher and lower order words:\n\ttoWords.assign( frac, WORDS, 1, 0 );\n\thigh = WORDS[ 0 ];\n\n\t// Clear the exponent bits within the higher order word:\n\thigh &= CLEAR_EXP_MASK;\n\n\t// Set the exponent bits to the new exponent:\n\thigh |= ((exp+BIAS) << 20);\n\n\t// Create a new floating-point number:\n\treturn m * fromWords( high, WORDS[ 1 ] );\n}\n\n\n// EXPORTS //\n\nexport default ldexp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getHighWord from '@stdlib/number-float64-base-get-high-word';\nimport EXP_MASK from '@stdlib/constants-float64-high-word-exponent-mask';\nimport BIAS from '@stdlib/constants-float64-exponent-bias';\n\n\n// MAIN //\n\n/**\n* Returns an integer corresponding to the unbiased exponent of a double-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {integer32} unbiased exponent\n*\n* @example\n* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307\n* // returns -1019\n*\n* @example\n* var exp = exponent( -3.14 );\n* // returns 1\n*\n* @example\n* var exp = exponent( 0.0 );\n* // returns -1023\n*\n* @example\n* var exp = exponent( NaN );\n* // returns 1024\n*/\nfunction exponent( x ) {\n\t// Extract from the input value a higher order word (unsigned 32-bit integer) which contains the exponent:\n\tvar high = getHighWord( x );\n\n\t// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:\n\thigh = ( high & EXP_MASK ) >>> 20;\n\n\t// Remove the bias and return:\n\treturn (high - BIAS)|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nexport default exponent;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyrights, licenses, and long comment were part of the original implementation available as part of [Go]{@link https://github.com/golang/go/blob/cb07765045aed5104a3df31507564ac99e6ddce8/src/math/exp.go}, which in turn was based on an implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_exp.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (c) 2009 The Go Authors. All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without\n* modification, are permitted provided that the following conditions are\n* met:\n*\n*    * Redistributions of source code must retain the above copyright\n* notice, this list of conditions and the following disclaimer.\n*    * Redistributions in binary form must reproduce the above\n* copyright notice, this list of conditions and the following disclaimer\n* in the documentation and/or other materials provided with the\n* distribution.\n*    * Neither the name of Google Inc. nor the names of its\n* contributors may be used to endorse or promote products derived from\n* this software without specific prior written permission.\n*\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n* \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n* ```\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport trunc from '@stdlib/math-base-special-trunc';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport expmulti from './expmulti.js';\n\n\n// VARIABLES //\n\nvar LN2_HI = 6.93147180369123816490e-01;\nvar LN2_LO = 1.90821492927058770002e-10;\nvar LOG2_E = 1.44269504088896338700e+00;\nvar OVERFLOW = 7.09782712893383973096e+02;\nvar UNDERFLOW = -7.45133219101941108420e+02;\nvar NEARZERO = 1.0 / (1 << 28); // 2^-28\nvar NEG_NEARZERO = -NEARZERO;\n\n\n// MAIN //\n\n/**\n* Evaluates the natural exponential function.\n*\n* ## Method\n*\n* 1.  We reduce \\\\( x \\\\) to an \\\\( r \\\\) so that \\\\( |r| \\leq 0.5 \\cdot \\ln(2) \\approx 0.34658 \\\\). Given \\\\( x \\\\), we find an \\\\( r \\\\) and integer \\\\( k \\\\) such that\n*\n*     ```tex\n*     \\begin{align*}\n*     x &= k \\cdot \\ln(2) + r \\\\\n*     |r| &\\leq 0.5 \\cdot \\ln(2)\n*     \\end{align*}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     \\\\( r \\\\) can be represented as \\\\( r = \\mathrm{hi} - \\mathrm{lo} \\\\) for better accuracy.\n*\n*     <!-- </note> -->\n*\n* 2.  We approximate of \\\\( e^{r} \\\\) by a special rational function on the interval \\\\(\\[0,0.34658]\\\\):\n*\n*     ```tex\n*     \\begin{align*}\n*     R\\left(r^2\\right) &= r \\cdot \\frac{ e^{r}+1 }{ e^{r}-1 } \\\\\n*     &= 2 + \\frac{r^2}{6} - \\frac{r^4}{360} + \\ldots\n*     \\end{align*}\n*     ```\n*\n*     We use a special Remes algorithm on \\\\(\\[0,0.34658]\\\\) to generate a polynomial of degree \\\\(5\\\\) to approximate \\\\(R\\\\). The maximum error of this polynomial approximation is bounded by \\\\(2^{-59}\\\\). In other words,\n*\n*     ```tex\n*     R(z) \\sim 2 + P_1 z + P_2 z^2 + P_3 z^3 + P_4 z^4 + P_5 z^5\n*     ```\n*\n*     where \\\\( z = r^2 \\\\) and\n*\n*     ```tex\n*     \\left|  2 + P_1 z + \\ldots + P_5 z^5  - R(z) \\right| \\leq 2^{-59}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     The values of \\\\( P_1 \\\\) to \\\\( P_5 \\\\) are listed in the source code.\n*\n*     <!-- </note> -->\n*\n*     The computation of \\\\( e^{r} \\\\) thus becomes\n*\n*     ```tex\n*     \\begin{align*}\n*     e^{r} &= 1 + \\frac{2r}{R-r} \\\\\n*           &= 1 + r + \\frac{r \\cdot R_1(r)}{2 - R_1(r)}\\ \\text{for better accuracy}\n*     \\end{align*}\n*     ```\n*\n*     where\n*\n*     ```tex\n*     R_1(r) = r - P_1\\ r^2 + P_2\\ r^4 + \\ldots + P_5\\ r^{10}\n*     ```\n*\n* 3.  We scale back to obtain \\\\( e^{x} \\\\). From step 1, we have\n*\n*     ```tex\n*     e^{x} = 2^k e^{r}\n*     ```\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* e^\\infty &= \\infty \\\\\n* e^{-\\infty} &= 0 \\\\\n* e^{\\mathrm{NaN}} &= \\mathrm{NaN} \\\\\n* e^0 &= 1\\ \\mathrm{is\\ exact\\ for\\ finite\\ argument\\ only}\n* \\end{align*}\n* ```\n*\n* ## Notes\n*\n* -   According to an error analysis, the error is always less than \\\\(1\\\\) ulp (unit in the last place).\n*\n* -   For an IEEE double,\n*\n*     -   if \\\\(x > 7.09782712893383973096\\mbox{e+}02\\\\), then \\\\(e^{x}\\\\) overflows\n*     -   if \\\\(x < -7.45133219101941108420\\mbox{e+}02\\\\), then \\\\(e^{x}\\\\) underflows\n*\n* -   The hexadecimal values included in the source code are the intended ones for the used constants. Decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the intended hexadecimal values.\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = exp( 4.0 );\n* // returns ~54.5982\n*\n* @example\n* var v = exp( -9.0 );\n* // returns ~1.234e-4\n*\n* @example\n* var v = exp( 0.0 );\n* // returns 1.0\n*\n* @example\n* var v = exp( NaN );\n* // returns NaN\n*/\nfunction exp( x ) {\n\tvar hi;\n\tvar lo;\n\tvar k;\n\n\tif ( isnan( x ) || x === PINF ) {\n\t\treturn x;\n\t}\n\tif ( x === NINF ) {\n\t\treturn 0.0;\n\t}\n\tif ( x > OVERFLOW ) {\n\t\treturn PINF;\n\t}\n\tif ( x < UNDERFLOW ) {\n\t\treturn 0.0;\n\t}\n\tif (\n\t\tx > NEG_NEARZERO &&\n\t\tx < NEARZERO\n\t) {\n\t\treturn 1.0 + x;\n\t}\n\t// Reduce and compute `r = hi - lo` for extra precision...\n\tif ( x < 0.0 ) {\n\t\tk = trunc( (LOG2_E*x) - 0.5 );\n\t} else {\n\t\tk = trunc( (LOG2_E*x) + 0.5 );\n\t}\n\thi = x - (k*LN2_HI);\n\tlo = k * LN2_LO;\n\n\treturn expmulti( hi, lo, k );\n}\n\n\n// EXPORTS //\n\nexport default exp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyrights, licenses, and long comment were part of the original implementation available as part of [Go]{@link https://github.com/golang/go/blob/cb07765045aed5104a3df31507564ac99e6ddce8/src/math/exp.go}, which in turn was based on an implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_exp.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (c) 2009 The Go Authors. All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without\n* modification, are permitted provided that the following conditions are\n* met:\n*\n*    * Redistributions of source code must retain the above copyright\n* notice, this list of conditions and the following disclaimer.\n*    * Redistributions in binary form must reproduce the above\n* copyright notice, this list of conditions and the following disclaimer\n* in the documentation and/or other materials provided with the\n* distribution.\n*    * Neither the name of Google Inc. nor the names of its\n* contributors may be used to endorse or promote products derived from\n* this software without specific prior written permission.\n*\n* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n* \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n* ```\n*\n* ```text\n* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ldexp from '@stdlib/math-base-special-ldexp';\nimport polyvalP from './polyval_p.js';\n\n\n// MAIN //\n\n/**\n* Computes \\\\(e^{r} 2^k\\\\) where \\\\(r = \\mathrm{hi} - \\mathrm{lo}\\\\) and \\\\(|r| \\leq \\ln(2)/2\\\\).\n*\n* @private\n* @param {number} hi - upper bound\n* @param {number} lo - lower bound\n* @param {integer} k - power of 2\n* @returns {number} function value\n*/\nfunction expmulti( hi, lo, k ) {\n\tvar r;\n\tvar t;\n\tvar c;\n\tvar y;\n\n\tr = hi - lo;\n\tt = r * r;\n\tc = r - ( t*polyvalP( t ) );\n\ty = 1.0 - ( lo - ( (r*c)/(2.0-c) ) - hi );\n\n\treturn ldexp( y, k );\n}\n\n\n// EXPORTS //\n\nexport default expmulti;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.16666666666666602;\n\t}\n\treturn 0.16666666666666602 + (x * (-0.0027777777777015593 + (x * (0.00006613756321437934 + (x * (-0.0000016533902205465252 + (x * 4.1381367970572385e-8))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLittleEndian from '@stdlib/assert-is-little-endian';\n\n\n// MAIN //\n\nvar LOW;\nif ( isLittleEndian === true ) {\n\tLOW = 0; // first index\n} else {\n\tLOW = 1; // second index\n}\n\n\n// EXPORTS //\n\nexport default LOW;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Uint32Array from '@stdlib/array-uint32';\nimport Float64Array from '@stdlib/array-float64';\nimport LOW from './low.js';\n\n\n// VARIABLES //\n\nvar FLOAT64_VIEW = new Float64Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );\n\n\n// MAIN //\n\n/**\n* Sets the less significant 32 bits of a double-precision floating-point number.\n*\n* ## Notes\n*\n* ```text\n* float64 (64 bits)\n* f := fraction (significand/mantissa) (52 bits)\n* e := exponent (11 bits)\n* s := sign bit (1 bit)\n*\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |                                Float64                                |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* |              Uint32               |               Uint32              |\n* |-------- -------- -------- -------- -------- -------- -------- --------|\n* ```\n*\n* If little endian (more significant bits last):\n*\n* ```text\n*                         <-- lower      higher -->\n* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |\n* ```\n*\n* If big endian (more significant bits first):\n*\n* ```text\n*                         <-- higher      lower -->\n* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |\n* ```\n*\n* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.\n*\n* ## References\n*\n* -   [Open Group][1]\n*\n* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm\n*\n* @param {number} x - double\n* @param {uinteger32} low - unsigned 32-bit integer to replace the lower order word of `x`\n* @returns {number} double having the same higher order word as `x`\n*\n* @example\n* var low = 5 >>> 0; // => 00000000000000000000000000000101\n*\n* var x = 3.14e201; // => 0 11010011100 01001000001011000011 10010011110010110101100010000010\n*\n* var y = setLowWord( x, low ); // => 0 11010011100 01001000001011000011 00000000000000000000000000000101\n* // returns 3.139998651394392e+201\n*\n* @example\n* import PINF from '@stdlib/constants-float64-pinf';\n* import NINF from '@stdlib/constants-float64-ninf';\n*\n* var low = 12345678;\n*\n* var y = setLowWord( PINF, low );\n* // returns NaN\n*\n* y = setLowWord( NINF, low );\n* // returns NaN\n*\n* y = setLowWord( NaN, low );\n* // returns NaN\n*/\nfunction setLowWord( x, low ) {\n\tFLOAT64_VIEW[ 0 ] = x;\n\tUINT32_VIEW[ LOW ] = ( low >>> 0 ); // identity bit shift to ensure integer\n\treturn FLOAT64_VIEW[ 0 ];\n}\n\n\n// EXPORTS //\n\nexport default setLowWord;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_erf.c}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport setLowWord from '@stdlib/number-float64-base-set-low-word';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport polyvalPP from './polyval_pp.js';\nimport polyvalQQ from './polyval_qq.js';\nimport polyvalPA from './polyval_pa.js';\nimport polyvalQA from './polyval_qa.js';\nimport polyvalRA from './polyval_ra.js';\nimport polyvalSA from './polyval_sa.js';\nimport polyvalRB from './polyval_rb.js';\nimport polyvalSB from './polyval_sb.js';\n\n\n// VARIABLES //\n\nvar TINY = 1.0e-300;\n\n// 2**-56 = 1/(2**56) = 1/72057594037927940\nvar SMALL = 1.3877787807814457e-17;\n\nvar ERX = 8.45062911510467529297e-1;  // 0x3FEB0AC1, 0x60000000\n\nvar PPC = 1.28379167095512558561e-1;  // 0x3FC06EBA, 0x8214DB68\nvar QQC = 1.0;\n\nvar PAC = -2.36211856075265944077e-3; // 0xBF6359B8, 0xBEF77538\nvar QAC = 1.0;\n\nvar RAC = -9.86494403484714822705e-3; // 0xBF843412, 0x600D6435\nvar SAC = 1.0;\n\nvar RBC = -9.86494292470009928597e-3; // 0xBF843412, 0x39E86F4A\nvar SBC = 1.0;\n\n\n// MAIN //\n\n/**\n* Evaluates the complementary error function.\n*\n* ```tex\n* \\operatorname{erf}(x) = \\frac{2}{\\sqrt{\\pi}} \\int^{x}_{0} e^{-t^2}\\ \\mathrm{dt}\n* ```\n*\n* Note that\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{erfc}(x) &= 1 - \\operatorname{erf}(x) \\\\\n* \\operatorname{erf}(-x) &= -\\operatorname{erf}(x) \\\\\n* \\operatorname{erfc}(-x) &= 2 - \\operatorname{erfc}(x)\n* \\end{align*}\n* ```\n*\n* ## Method\n*\n* 1.  For \\\\(|x| \\in [0, 0.84375)\\\\),\n*\n*     ```tex\n*     \\operatorname{erf}(x) = x + x \\cdot \\operatorname{R}(x^2)\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\operatorname{erfc}(x) = \\begin{cases}\n*     1 - \\operatorname{erf}(x) & \\textrm{if}\\ x \\in (-.84375,0.25) \\\\\n*     0.5 + ((0.5-x)-x \\mathrm{R}) & \\textrm{if}\\ x \\in [0.25,0.84375)\n*     \\end{cases}\n*     ```\n*\n*     where \\\\(R = P/Q\\\\) and where \\\\(P\\\\) is an odd polynomial of degree \\\\(8\\\\) and \\\\(Q\\\\) is an odd polynomial of degree \\\\(10\\\\).\n*\n*     ```tex\n*     \\biggl| \\mathrm{R} - \\frac{\\operatorname{erf}(x)-x}{x} \\biggr| \\leq 2^{-57.90}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     The formula is derived by noting\n*\n*     ```tex\n*     \\operatorname{erf}(x) = \\frac{2}{\\sqrt{\\pi}}\\biggl(x - \\frac{x^3}{3} + \\frac{x^5}{10} - \\frac{x^7}{42} + \\ldots \\biggr)\n*     ```\n*\n*     and that\n*\n*     ```tex\n*     \\frac{2}{\\sqrt{\\pi}} = 1.128379167095512573896158903121545171688\n*     ```\n*\n*     is close to unity. The interval is chosen because the fix point of \\\\(\\operatorname{erf}(x)\\\\) is near \\\\(0.6174\\\\) (i.e., \\\\(\\operatorname{erf(x)} = x\\\\) when \\\\(x\\\\) is near \\\\(0.6174\\\\)), and, by some experiment, \\\\(0.84375\\\\) is chosen to guarantee the error is less than one ulp for \\\\(\\operatorname{erf}(x)\\\\).\n*\n*     <!-- </note> -->\n*\n* 2.  For \\\\(|x| \\in [0.84375,1.25)\\\\), let \\\\(s = |x|-1\\\\), and \\\\(c = 0.84506291151\\\\) rounded to single (\\\\(24\\\\) bits)\n*\n*     ```tex\n*     \\operatorname{erf}(x) = \\operatorname{sign}(x) \\cdot \\biggl(c + \\frac{\\operatorname{P1}(s)}{\\operatorname{Q1}(s)}\\biggr)\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\operatorname{erfc}(x) = \\begin{cases}\n*     (1-c) - \\frac{\\operatorname{P1}(s)}{\\operatorname{Q1}(s)} & \\textrm{if}\\ x > 0 \\\\\n*     1 + \\biggl(c + \\frac{\\operatorname{P1}(s)}{\\operatorname{Q1}(s)}\\biggr) & \\textrm{if}\\ x < 0\n*     \\end{cases}\n*     ```\n*\n*     where\n*\n*     ```tex\n*     \\biggl|\\frac{\\mathrm{P1}}{\\mathrm{Q1}} - (\\operatorname{erf}(|x|)-c)\\biggr| \\leq 2^{-59.06}\n*     ```\n*\n*     <!-- <note> -->\n*\n*     Here, we use the Taylor series expansion at \\\\(x = 1\\\\)\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{erf}(1+s) &= \\operatorname{erf}(1) + s\\cdot \\operatorname{poly}(s) \\\\\n*     &= 0.845.. + \\frac{\\operatorname{P1}(s)}{\\operatorname{Q1}(s)}\n*     \\end{align*}\n*     ```\n*\n*     using a rational approximation to approximate\n*\n*     ```tex\n*     \\operatorname{erf}(1+s) - (c = (\\mathrm{single})0.84506291151)\n*     ```\n*\n*     <!-- </note> -->\n*\n*     Note that, for \\\\(x \\in [0.84375,1.25)\\\\), \\\\(|\\mathrm{P1}/\\mathrm{Q1}| < 0.078\\\\), where\n*\n*     -   \\\\(\\operatorname{P1}(s)\\\\) is a degree \\\\(6\\\\) polynomial in \\\\(s\\\\)\n*     -   \\\\(\\operatorname{Q1}(s)\\\\) is a degree \\\\(6\\\\) polynomial in \\\\(s\\\\)\n*\n* 3.  For \\\\(x \\in [1.25,1/0.35)\\\\),\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{erfc}(x) &= \\frac{1}{x}e^{-x^2-0.5625+(\\mathrm{R1}/\\mathrm{S1})} \\\\\n*     \\operatorname{erf}(x) &= 1 - \\operatorname{erfc}(x)\n*     \\end{align*}\n*     ```\n*\n*     where\n*\n*     -   \\\\(\\operatorname{R1}(z)\\\\) is a degree \\\\(7\\\\) polynomial in \\\\(z\\\\), where \\\\(z = 1/x^2\\\\)\n*     -   \\\\(\\operatorname{S1}(z)\\\\) is a degree \\\\(8\\\\) polynomial in \\\\(z\\\\)\n*\n* 4.  For \\\\(x \\in [1/0.35,28)\\\\),\n*\n*     ```tex\n*     \\operatorname{erfc}(x) = \\begin{cases}\n*     \\frac{1}{x} e^{-x^2-0.5625+(\\mathrm{R2}/\\mathrm{S2})} & \\textrm{if}\\ x > 0 \\\\\n*     2.0 - \\frac{1}{x} e^{-x^2-0.5625+(\\mathrm{R2}/\\mathrm{S2})} & \\textrm{if}\\ -6 < x < 0 \\\\\n*     2.0 - \\mathrm{tiny} & \\textrm{if}\\ x \\leq -6\n*     \\end{cases}\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\operatorname{erf}(x) = \\begin{cases}\n*     \\operatorname{sign}(x) \\cdot (1.0 - \\operatorname{erfc}(x)) & \\textrm{if}\\ x < 6 \\\\\n*     \\operatorname{sign}(x) \\cdot (1.0 - \\mathrm{tiny}) & \\textrm{otherwise}\n*     \\end{cases}\n*     ```\n*\n*     where\n*\n*     -   \\\\(\\operatorname{R2}(z)\\\\) is a degree \\\\(6\\\\) polynomial in \\\\(z\\\\), where \\\\(z = 1/x^2\\\\)\n*     -   \\\\(\\operatorname{S2}(z)\\\\) is a degree \\\\(7\\\\) polynomial in \\\\(z\\\\)\n*\n* 5.  For \\\\(x \\in [28, \\infty)\\\\),\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{erf}(x) &= \\operatorname{sign}(x) \\cdot (1 - \\mathrm{tiny}) & \\textrm{(raise inexact)}\n*     \\end{align*}\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\operatorname{erfc}(x) = \\begin{cases}\n*     \\mathrm{tiny} \\cdot \\mathrm{tiny} & \\textrm{if}\\ x > 0\\ \\textrm{(raise underflow)} \\\\\n*     2 - \\mathrm{tiny} & \\textrm{if}\\ x < 0\n*     \\end{cases}\n*     ```\n*\n* ## Special Cases\n*\n* ```tex\n* \\begin{align*}\n* \\operatorname{erf}(0) &= 0 \\\\\n* \\operatorname{erf}(-0) &= -0 \\\\\n* \\operatorname{erf}(\\infty) &= 1 \\\\\n* \\operatorname{erf}(-\\infty) &= -1 \\\\\n* \\operatorname{erfc}(0) &= 1 \\\\\n* \\operatorname{erfc}(\\infty) &= 0 \\\\\n* \\operatorname{erfc}(-\\infty) &= 2 \\\\\n* \\operatorname{erf}(\\mathrm{NaN}) &= \\mathrm{NaN} \\\\\n* \\operatorname{erfc}(\\mathrm{NaN}) &= \\mathrm{NaN}\n* \\end{align*}\n* ```\n*\n* ## Notes\n*\n* -   To compute \\\\(\\exp(-x^2-0.5625+(\\mathrm{R}/\\mathrm{S}))\\\\), let \\\\(s\\\\) be a single precision number and \\\\(s := x\\\\); then\n*\n*     ```tex\n*     -x^2 = -s^2 + (s-x)(s+x)\n*     ```\n*\n*     and\n*\n*     ```tex\n*     e^{-x^2-0.5626+(\\mathrm{R}/\\mathrm{S})} = e^{-s^2-0.5625} e^{(s-x)(s+x)+(\\mathrm{R}/\\mathrm{S})}\n*     ```\n*\n* -   `#4` and `#5` make use of the asymptotic series\n*\n*     ```tex\n*     \\operatorname{erfc}(x) \\approx \\frac{e^{-x^2}}{x\\sqrt{\\pi}} (1 + \\operatorname{poly}(1/x^2))\n*     ```\n*\n*     We use a rational approximation to approximate\n*\n*     ```tex\n*     g(s) = f(1/x^2) = \\ln(\\operatorname{erfc}(x) \\cdot x) - x^2 + 0.5625\n*     ```\n*\n* -   The error bound for \\\\(\\mathrm{R1}/\\mathrm{S1}\\\\) is\n*\n*     ```tex\n*     |\\mathrm{R1}/\\mathrm{S1} - f(x)| < 2^{-62.57}\n*     ```\n*\n*     and for \\\\(\\mathrm{R2}/\\mathrm{S2}\\\\) is\n*\n*     ```tex\n*     |\\mathrm{R2}/\\mathrm{S2} - f(x)| < 2^{-61.52}\n*     ```\n*\n* @param {number} x - input value\n* @returns {number} function value\n*\n* @example\n* var y = erfc( 2.0 );\n* // returns ~0.0047\n*\n* @example\n* var y = erfc( -1.0 );\n* // returns ~1.8427\n*\n* @example\n* var y = erfc( 0.0 );\n* // returns 1.0\n*\n* @example\n* var y = erfc( Infinity );\n* // returns 0.0\n*\n* @example\n* var y = erfc( -Infinity );\n* // returns 2.0\n*\n* @example\n* var y = erfc( NaN );\n* // returns NaN\n*/\nfunction erfc( x ) {\n\tvar sign;\n\tvar ax;\n\tvar z;\n\tvar r;\n\tvar s;\n\tvar y;\n\tvar p;\n\tvar q;\n\n\t// Special case: NaN\n\tif ( isnan( x ) ) {\n\t\treturn NaN;\n\t}\n\t// Special case: +infinity\n\tif ( x === PINF ) {\n\t\treturn 0.0;\n\t}\n\t// Special case: -infinity\n\tif ( x === NINF ) {\n\t\treturn 2.0;\n\t}\n\t// Special case: +-0\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\tif ( x < 0.0 ) {\n\t\tsign = true;\n\t\tax = -x;\n\t} else {\n\t\tsign = false;\n\t\tax = x;\n\t}\n\t// |x| < 0.84375\n\tif ( ax < 0.84375 ) {\n\t\tif ( ax < SMALL ) {\n\t\t\treturn 1.0 - x; // raise inexact\n\t\t}\n\t\tz = x * x;\n\t\tr = PPC + ( z*polyvalPP( z ) );\n\t\ts = QQC + ( z*polyvalQQ( z ) );\n\t\ty = r / s;\n\n\t\t// x < 1/4\n\t\tif ( x < 0.25 ) {\n\t\t\treturn 1.0 - ( x + (x*y) );\n\t\t}\n\t\tr = x * y;\n\t\tr += x - 0.5;\n\t\treturn 0.5 - r;\n\t}\n\t// 0.84375 <= |x| < 1.25\n\tif ( ax < 1.25 ) {\n\t\ts = ax - 1.0;\n\t\tp = PAC + ( s*polyvalPA( s ) );\n\t\tq = QAC + ( s*polyvalQA( s ) );\n\t\tif ( sign ) {\n\t\t\treturn 1.0 + ERX + (p/q);\n\t\t}\n\t\treturn 1.0 - ERX - (p/q);\n\t}\n\t// |x| < 28\n\tif ( ax < 28.0 ) {\n\t\ts = 1.0 / (ax*ax);\n\n\t\t// |x| < 1/0.35 ~ 2.857143\n\t\tif ( ax < 2.857142857142857 ) {\n\t\t\tr = RAC + ( s*polyvalRA( s ) );\n\t\t\ts = SAC + ( s*polyvalSA( s ) );\n\t\t}\n\t\t// |x| >= 1/0.35 ~ 2.857143\n\t\telse {\n\t\t\t// x < -6\n\t\t\tif ( x < -6.0 ) {\n\t\t\t\treturn 2.0 - TINY; // raise inexact\n\t\t\t}\n\t\t\tr = RBC + ( s*polyvalRB( s ) );\n\t\t\ts = SBC + ( s*polyvalSB( s ) );\n\t\t}\n\t\tz = setLowWord( ax, 0 ); // pseudo-single (20-bit) precision x\n\t\tr = exp( -(z*z) - 0.5625 ) * exp( ((z-ax)*(z+ax)) + (r/s) );\n\t\tif ( sign ) {\n\t\t\treturn 2.0 - (r/ax);\n\t\t}\n\t\treturn r/ax;\n\t}\n\tif ( sign ) {\n\t\treturn 2.0 - TINY; // raise inexact; ~2\n\t}\n\treturn TINY * TINY; // raise inexact; ~0\n}\n\n\n// EXPORTS //\n\nexport default erfc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.3250421072470015;\n\t}\n\treturn -0.3250421072470015 + (x * (-0.02848174957559851 + (x * (-0.005770270296489442 + (x * -0.000023763016656650163))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.39791722395915535;\n\t}\n\treturn 0.39791722395915535 + (x * (0.0650222499887673 + (x * (0.005081306281875766 + (x * (0.00013249473800432164 + (x * -0.000003960228278775368))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.41485611868374833;\n\t}\n\treturn 0.41485611868374833 + (x * (-0.3722078760357013 + (x * (0.31834661990116175 + (x * (-0.11089469428239668 + (x * (0.035478304325618236 + (x * -0.002166375594868791))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 0.10642088040084423;\n\t}\n\treturn 0.10642088040084423 + (x * (0.540397917702171 + (x * (0.07182865441419627 + (x * (0.12617121980876164 + (x * (0.01363708391202905 + (x * 0.011984499846799107))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.6938585727071818;\n\t}\n\treturn -0.6938585727071818 + (x * (-10.558626225323291 + (x * (-62.375332450326006 + (x * (-162.39666946257347 + (x * (-184.60509290671104 + (x * (-81.2874355063066 + (x * -9.814329344169145))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 19.651271667439257;\n\t}\n\treturn 19.651271667439257 + (x * (137.65775414351904 + (x * (434.56587747522923 + (x * (645.3872717332679 + (x * (429.00814002756783 + (x * (108.63500554177944 + (x * (6.570249770319282 + (x * -0.0604244152148581))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.799283237680523;\n\t}\n\treturn -0.799283237680523 + (x * (-17.757954917754752 + (x * (-160.63638485582192 + (x * (-637.5664433683896 + (x * (-1025.0951316110772 + (x * -483.5191916086514))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 30.33806074348246;\n\t}\n\treturn 30.33806074348246 + (x * (325.7925129965739 + (x * (1536.729586084437 + (x * (3199.8582195085955 + (x * (2553.0504064331644 + (x * (474.52854120695537 + (x * -22.44095244658582))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default evalpoly;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) of a degenerate distribution centered at a provided mean value.\n*\n* @param {number} mu - constant value of distribution\n* @returns {Function} function to evaluate the cumulative distribution function\n*\n* @example\n* var cdf = factory( 5.0 );\n*\n* var y = cdf( 3.0 );\n* // returns 0.0\n*\n* y = cdf( 6.0 );\n* // returns 1.0\n*\n* y = cdf( NaN );\n* // returns NaN\n*/\nfunction factory( mu ) {\n\tif ( isnan( mu ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) of a degenerate distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated cumulative distribution function\n\t*\n\t* @example\n\t* var y = cdf( 10.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn (x < mu) ? 0.0 : 1.0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as degenerate } from '@stdlib/stats-base-dists-degenerate-cdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport erfc from '@stdlib/math-base-special-erfc';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Normal distribution.\n*\n* @param {number} mu - mean\n* @param {NonNegativeNumber} sigma - standard deviation\n* @returns {Function} function to evaluate the cumulative distribution function\n*\n* @example\n* var cdf = factory( 10.0, 2.0 );\n* var y = cdf( 10.0 );\n* // returns 0.5\n*\n* y = cdf( 12.0 );\n* // returns ~0.841\n*/\nfunction factory( mu, sigma ) {\n\tvar denom;\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma < 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn degenerate( mu );\n\t}\n\tdenom = sigma * sqrt( 2.0 );\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Normal distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tvar xc;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\txc = x - mu;\n\t\treturn 0.5 * erfc( -xc / denom );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Degenerate distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-degenerate-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-degenerate-cdf';\n*\n* var y = cdf( 2.0, 5.0 );\n* // returns 0.0\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-degenerate-cdf';\n*\n* var cdf = factory( 5.0 );\n*\n* var y = cdf( 3.0 );\n* // returns 0.0\n*\n* y = cdf( 6.0 );\n* // returns 1.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a degenerate distribution with mean value `mu`.\n*\n* @param {number} x - input value\n* @param {number} mu - constant value of distribution\n* @returns {Probability} evaluated cumulative distribution function\n*\n* @example\n* var y = cdf( 2.0, 3.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( 4.0, 3.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( 3.0, 3.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( NaN, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN );\n* // returns NaN\n*/\nfunction cdf( x, mu ) {\n\tif ( isnan( x ) || isnan( mu ) ) {\n\t\treturn NaN;\n\t}\n\treturn (x < mu) ? 0.0 : 1.0;\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Normal distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats-base-dists-normal-cdf\n*\n* @example\n* import cdf from '@stdlib/stats-base-dists-normal-cdf';\n*\n* var y = cdf( 2.0, 0.0, 1.0 );\n* // returns ~0.977\n*\n* var myCDF = cdf.factory( 10.0, 2.0 );\n* y = myCDF( 10.0 );\n* // returns 0.5\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport erfc from '@stdlib/math-base-special-erfc';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Normal distribution with mean `mu` and standard deviation `sigma` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - mean\n* @param {NonNegativeNumber} sigma - standard deviation\n* @returns {Probability} evaluated cumulative distribution function\n*\n* @example\n* var y = cdf( 2.0, 0.0, 1.0 );\n* // returns ~0.977\n*\n* @example\n* var y = cdf( -1.0, -1.0, 2.0 );\n* // returns 0.5\n*\n* @example\n* var y = cdf( -1.0, 4.0, 2.0 );\n* // returns ~0.006\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative standard deviation:\n* var y = cdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, mu, sigma ) {\n\tvar denom;\n\tvar xc;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn (x < mu) ? 0.0 : 1.0;\n\t}\n\tdenom = sigma * sqrt( 2.0 );\n\txc = x - mu;\n\treturn 0.5 * erfc( -xc/denom );\n}\n\n\n// EXPORTS //\n\nexport default cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dsumpw( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = x[ ix ];\n\t\ts1 = x[ ix+stride ];\n\t\ts2 = x[ ix+(2*stride) ];\n\t\ts3 = x[ ix+(3*stride) ];\n\t\ts4 = x[ ix+(4*stride) ];\n\t\ts5 = x[ ix+(5*stride) ];\n\t\ts6 = x[ ix+(6*stride) ];\n\t\ts7 = x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += x[ ix ];\n\t\t\ts1 += x[ ix+stride ];\n\t\t\ts2 += x[ ix+(2*stride) ];\n\t\t\ts3 += x[ ix+(3*stride) ];\n\t\t\ts4 += x[ ix+(4*stride) ];\n\t\t\ts5 += x[ ix+(5*stride) ];\n\t\t\ts6 += x[ ix+(6*stride) ];\n\t\t\ts7 += x[ ix+(7*stride) ];\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dsumpw( n, x, stride, ix ) + dsumpw( N-n, x, stride, ix+(n*stride) );\n}\n\n\n// EXPORTS //\n\nexport default dsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport dsumpw from './dsumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sum from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsumpw( N, x, 1 );\n* // returns 1.0\n*/\nfunction dsumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default dsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each double-precision floating-point strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dapxsumpw( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dapxsumpw( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = alpha + x[ ix ];\n\t\ts1 = alpha + x[ ix+stride ];\n\t\ts2 = alpha + x[ ix+(2*stride) ];\n\t\ts3 = alpha + x[ ix+(3*stride) ];\n\t\ts4 = alpha + x[ ix+(4*stride) ];\n\t\ts5 = alpha + x[ ix+(5*stride) ];\n\t\ts6 = alpha + x[ ix+(6*stride) ];\n\t\ts7 = alpha + x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += alpha + x[ ix ];\n\t\t\ts1 += alpha + x[ ix+stride ];\n\t\t\ts2 += alpha + x[ ix+(2*stride) ];\n\t\t\ts3 += alpha + x[ ix+(3*stride) ];\n\t\t\ts4 += alpha + x[ ix+(4*stride) ];\n\t\t\ts5 += alpha + x[ ix+(5*stride) ];\n\t\t\ts6 += alpha + x[ ix+(6*stride) ];\n\t\t\ts7 += alpha + x[ ix+(7*stride) ];\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dapxsumpw( n, alpha, x, stride, ix ) + dapxsumpw( N-n, alpha, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dsumpw } from '@stdlib/blas-ext-base-dsumpw';\nimport { ndarray as dapxsumpw } from '@stdlib/blas-ext-base-dapxsumpw';\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a double-precision floating-point strided array using a two-pass error correction algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} arithmetic mean\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dmeanpn( 4, x, 2, 1 );\n* // returns 1.25\n*/\nfunction dmeanpn( N, x, strideX, offsetX ) {\n\tvar mu;\n\tvar c;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\treturn x[ offsetX ];\n\t}\n\t// Compute an estimate for the mean:\n\tmu = dsumpw( N, x, strideX, offsetX ) / N;\n\n\t// Compute an error term:\n\tc = dapxsumpw( N, -mu, x, strideX, offsetX ) / N;\n\n\treturn mu + c;\n}\n\n\n// EXPORTS //\n\nexport default dmeanpn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a double-precision floating-point strided array using a two-pass error correction algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} arithmetic mean\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dmeanpn( x.length, x, 1 );\n* // returns ~0.3333\n*/\nfunction dmeanpn( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dmeanpn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dmeanpn } from '@stdlib/stats-strided-dmeanpn';\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a double-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} arithmetic mean\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dmean( 4, x, 2, 1 );\n* // returns 1.25\n*/\nfunction dmean( N, x, strideX, offsetX ) {\n\treturn dmeanpn( N, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default dmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport dapxsumpw from './dapxsumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dapxsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sum from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a constant to each double-precision floating-point strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dapxsumpw( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dapxsumpw( N, alpha, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, alpha, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default dapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport dmeanpn from './dmeanpn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dmeanpn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dmeanpn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport dmean from './dmean.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dmean, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport dmeanpn from '@stdlib/stats-strided-dmeanpn';\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a double-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} arithmetic mean\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dmean( x.length, x, 1 );\n* // returns ~0.3333\n*/\nfunction dmean( N, x, strideX ) {\n\treturn dmeanpn( N, x, strideX );\n}\n\n\n// EXPORTS //\n\nexport default dmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport resolveStr from '@stdlib/stats-base-ztest-alternative-resolve-str';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport { factory as quantile } from '@stdlib/stats-base-dists-normal-quantile';\nimport { factory as cdf } from '@stdlib/stats-base-dists-normal-cdf';\nimport { ndarray as dmean } from '@stdlib/stats-strided-dmean';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport Float64Array from '@stdlib/array-float64';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// VARIABLES //\n\nvar normalCDF = cdf( 0.0, 1.0 );\nvar normalQuantile = quantile( 0.0, 1.0 );\n\n// Initialize a workspace for storing confidence intervals:\nvar WORKSPACE = new Float64Array( 2 );\n\n\n// MAIN //\n\n/**\n* Computes a one-sample Z-test for a double-precision floating-point strided array using alternative indexing semantics.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {(integer|string)} alternative - alternative hypothesis\n* @param {number} alpha - significance level\n* @param {number} mu - mean under the null hypothesis\n* @param {PositiveNumber} sigma - known standard deviation\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @param {Object} out - output results object\n* @returns {Object} results object\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import Results from '@stdlib/stats-base-ztest-one-sample-results-float64';\n*\n* var x = new Float64Array( [ 4.0, 4.0, 6.0, 6.0, 5.0 ] );\n*\n* var results = new Results();\n* var out = dztest( x.length, 'two-sided', 0.05, 0.0, 1.0, x, 1, 0, results );\n* // returns {...}\n*\n* var bool = ( out === results );\n* // returns true\n*/\nfunction dztest( N, alternative, alpha, mu, sigma, x, strideX, offsetX, out ) {\n\tvar pValue;\n\tvar stderr;\n\tvar xmean;\n\tvar stat;\n\tvar alt;\n\tvar q;\n\n\talt = resolveStr( alternative );\n\tif (\n\t\tN <= 0 ||\n\t\tisnan( alpha ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0 ||\n\t\talpha < 0.0 ||\n\t\talpha > 1.0\n\t) {\n\t\tWORKSPACE[ 0 ] = NaN;\n\t\tWORKSPACE[ 1 ] = NaN;\n\t\tout.rejected = false;\n\t\tout.alternative = alt;\n\t\tout.alpha = NaN;\n\t\tout.pValue = NaN;\n\t\tout.statistic = NaN;\n\t\tout.ci = WORKSPACE;\n\t\tout.nullValue = NaN;\n\t\tout.sd = NaN;\n\t\treturn out;\n\t}\n\t// Compute the standard error of the mean:\n\tstderr = sigma / sqrt( N );\n\n\t// Compute the arithmetic mean of the input array:\n\txmean = dmean( N, x, strideX, offsetX );\n\n\t// Compute the test statistic (i.e., the z-score, which is the distance of the sample mean from the population mean in units of standard error):\n\tstat = ( xmean - mu ) / stderr;\n\n\t// Compute the p-value and confidence interval...\n\tif ( alt === 'less' ) {\n\t\tpValue = normalCDF( stat );\n\t\tq = normalQuantile( 1.0-alpha );\n\t\tWORKSPACE[ 0 ] = NINF;\n\t\tWORKSPACE[ 1 ] = mu + ( (stat+q)*stderr );\n\t} else if ( alt === 'greater' ) {\n\t\tpValue = 1.0 - normalCDF( stat );\n\t\tq = normalQuantile( 1.0-alpha );\n\t\tWORKSPACE[ 0 ] = mu + ( (stat-q)*stderr );\n\t\tWORKSPACE[ 1 ] = PINF;\n\t} else { // alt == 'two-sided'\n\t\tpValue = 2.0 * normalCDF( -abs( stat ) );\n\t\tq = normalQuantile( 1.0-(alpha/2.0) );\n\t\tWORKSPACE[ 0 ] = mu + ( (stat-q)*stderr );\n\t\tWORKSPACE[ 1 ] = mu + ( (stat+q)*stderr );\n\t}\n\t// Return test results:\n\tout.rejected = ( pValue <= alpha );\n\tout.alternative = alt;\n\tout.alpha = alpha;\n\tout.pValue = pValue;\n\tout.statistic = stat;\n\tout.ci = WORKSPACE;\n\tout.nullValue = mu;\n\tout.sd = stderr;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dztest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport dztest from './dztest.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dztest, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dztest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes a one-sample Z-test for a double-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {(integer|string)} alternative - alternative hypothesis\n* @param {number} alpha - significance level\n* @param {number} mu - mean under the null hypothesis\n* @param {PositiveNumber} sigma - known standard deviation\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {Object} out - output results object\n* @returns {Object} results object\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import Results from '@stdlib/stats-base-ztest-one-sample-results-float64';\n*\n* var x = new Float64Array( [ 4.0, 4.0, 6.0, 6.0, 5.0 ] );\n*\n* var results = new Results();\n* var out = dztest( x.length, 'two-sided', 0.05, 0.0, 1.0, x, 1, results );\n* // returns {...}\n*\n* var bool = ( out === results );\n* // returns true\n*/\nfunction dztest( N, alternative, alpha, mu, sigma, x, strideX, out ) {\n\treturn ndarray( N, alternative, alpha, mu, sigma, x, strideX, stride2offset( N, strideX ), out ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dztest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport resolveStr from '@stdlib/stats-base-ztest-alternative-resolve-str';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport { factory as quantile } from '@stdlib/stats-base-dists-normal-quantile';\nimport { factory as cdf } from '@stdlib/stats-base-dists-normal-cdf';\nimport { ndarray as dmean } from '@stdlib/stats-strided-dmean';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport Float64Array from '@stdlib/array-float64';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// VARIABLES //\n\nvar normalCDF = cdf( 0.0, 1.0 );\nvar normalQuantile = quantile( 0.0, 1.0 );\n\n// Initialize a workspace for storing confidence intervals:\nvar WORKSPACE = new Float64Array( 2 );\n\n\n// MAIN //\n\n/**\n* Computes a two-sample Z-test for two double-precision floating-point strided arrays using alternative indexing semantics.\n*\n* @param {PositiveInteger} NX - number of indexed elements in `x`\n* @param {PositiveInteger} NY - number of indexed elements in `y`\n* @param {(integer|string)} alternative - alternative hypothesis\n* @param {number} alpha - significance level\n* @param {number} diff - difference in means under the null hypothesis\n* @param {PositiveNumber} sigmax - known standard deviation of `x`\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {PositiveNumber} sigmay - known standard deviation of `y`\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @param {Object} out - output results object\n* @returns {Object} results object\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import Results from '@stdlib/stats-base-ztest-two-sample-results-float64';\n*\n* var x = new Float64Array( [ 4.0, 4.0, 6.0, 6.0, 5.0 ] );\n* var y = new Float64Array( [ 3.0, 3.0, 5.0, 7.0, 7.0 ] );\n*\n* var results = new Results();\n* var out = dztest2( x.length, y.length, 'two-sided', 0.05, 0.0, 1.0, x, 1, 0, 2.0, y, 1, 0, results );\n* // returns {...}\n*\n* var bool = ( out === results );\n* // returns true\n*/\nfunction dztest2( NX, NY, alternative, alpha, diff, sigmax, x, strideX, offsetX, sigmay, y, strideY, offsetY, out ) { // eslint-disable-line max-len, max-params\n\tvar pValue;\n\tvar stderr;\n\tvar xmean;\n\tvar ymean;\n\tvar xvar;\n\tvar yvar;\n\tvar stat;\n\tvar alt;\n\tvar q;\n\n\talt = resolveStr( alternative );\n\tif (\n\t\tNX <= 0 ||\n\t\tNY <= 0 ||\n\t\tisnan( alpha ) ||\n\t\tisnan( diff ) ||\n\t\tisnan( sigmax ) ||\n\t\tisnan( sigmay ) ||\n\t\tsigmax <= 0.0 ||\n\t\tsigmay <= 0.0 ||\n\t\talpha < 0.0 ||\n\t\talpha > 1.0\n\t) {\n\t\tWORKSPACE[ 0 ] = NaN;\n\t\tWORKSPACE[ 1 ] = NaN;\n\t\tout.rejected = false;\n\t\tout.alternative = alt;\n\t\tout.alpha = NaN;\n\t\tout.pValue = NaN;\n\t\tout.statistic = NaN;\n\t\tout.ci = WORKSPACE;\n\t\tout.nullValue = NaN;\n\t\tout.xmean = NaN;\n\t\tout.ymean = NaN;\n\t\treturn out;\n\t}\n\t// Compute the standard error of the mean:\n\txvar = sigmax * sigmax;\n\tyvar = sigmay * sigmay;\n\tstderr = sqrt( ( xvar / NX ) + ( yvar / NY ) );\n\n\t// Compute the arithmetic means of the input arrays:\n\txmean = dmean( NX, x, strideX, offsetX );\n\tymean = dmean( NY, y, strideY, offsetY );\n\n\t// Compute the test statistic (i.e., the z-score, which is the standardized difference between the sample means of x and y, adjusted by the hypothesized difference, in units of the standard error):\n\tstat = ( xmean - ymean - diff ) / stderr;\n\n\t// Compute the p-value and confidence interval...\n\tif ( alt === 'less' ) {\n\t\tpValue = normalCDF( stat );\n\t\tq = normalQuantile( 1.0 - alpha );\n\t\tWORKSPACE[ 0 ] = NINF;\n\t\tWORKSPACE[ 1 ] = diff + ( ( stat + q ) * stderr );\n\t} else if ( alt === 'greater' ) {\n\t\tpValue = 1.0 - normalCDF( stat );\n\t\tq = normalQuantile( 1.0 - alpha );\n\t\tWORKSPACE[ 0 ] = diff + ( ( stat - q ) * stderr );\n\t\tWORKSPACE[ 1 ] = PINF;\n\t} else { // alt == 'two-sided'\n\t\tpValue = 2.0 * normalCDF( -abs( stat ) );\n\t\tq = normalQuantile( 1.0 - ( alpha / 2.0 ) );\n\t\tWORKSPACE[ 0 ] = diff + ( ( stat - q ) * stderr );\n\t\tWORKSPACE[ 1 ] = diff + ( ( stat + q ) * stderr );\n\t}\n\t// Return test results:\n\tout.rejected = ( pValue <= alpha );\n\tout.alpha = alpha;\n\tout.pValue = pValue;\n\tout.statistic = stat;\n\tout.ci = WORKSPACE;\n\tout.alternative = alt;\n\tout.nullValue = diff;\n\tout.xmean = xmean;\n\tout.ymean = ymean;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dztest2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport dztest2 from './dztest2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dztest2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dztest2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes a two-sample Z-test for two double-precision floating-point strided arrays.\n*\n* @param {PositiveInteger} NX - number of indexed elements in `x`\n* @param {PositiveInteger} NY - number of indexed elements in `y`\n* @param {(integer|string)} alternative - alternative hypothesis\n* @param {number} alpha - significance level\n* @param {number} diff - difference in means under the null hypothesis\n* @param {PositiveNumber} sigmax - known standard deviation of `x`\n* @param {Float64Array} x - first input array\n* @param {integer} strideX - stride length for `x`\n* @param {PositiveNumber} sigmay - known standard deviation of `y`\n* @param {Float64Array} y - second input array\n* @param {integer} strideY - stride length for `y`\n* @param {Object} out - output results object\n* @returns {Object} results object\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import Results from '@stdlib/stats-base-ztest-two-sample-results-float64';\n*\n* var x = new Float64Array( [ 4.0, 4.0, 6.0, 6.0, 5.0 ] );\n* var y = new Float64Array( [ 3.0, 3.0, 5.0, 7.0, 7.0 ] );\n*\n* var results = new Results();\n* var out = dztest2( x.length, y.length, 'two-sided', 0.05, 0.0, 1.0, x, 1, 2.0, y, 1, results );\n* // returns {...}\n*\n* var bool = ( out === results );\n* // returns true\n*/\nfunction dztest2( NX, NY, alternative, alpha, diff, sigmax, x, strideX, sigmay, y, strideY, out ) { // eslint-disable-line max-len, max-params\n\treturn ndarray( NX, NY, alternative, alpha, diff, sigmax, x, strideX, stride2offset( NX, strideX ), sigmay, y, strideY, stride2offset( NY, strideY ), out ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dztest2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar SETTERS = {\n\t'float64': setFloat64,\n\t'float32': setFloat32,\n\t'int32': setInt32,\n\t'int16': setInt16,\n\t'int8': setInt8,\n\t'uint32': setUint32,\n\t'uint16': setUint16,\n\t'uint8': setUint8,\n\t'uint8c': setUint8c,\n\t'generic': setGeneric,\n\t'default': setArrayLike\n};\n\n\n// FUNCTIONS //\n\n/**\n* Sets an element in a `Float64Array`.\n*\n* @private\n* @param {Float64Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @param {number} value - value to set\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var arr = new Float64Array( 4 );\n*\n* setFloat64( arr, 2, 3.0 );\n*\n* var v = arr[ 2 ];\n* // returns 3.0\n*/\nfunction setFloat64( arr, idx, value ) {\n\tarr[ idx ] = value;\n}\n\n/**\n* Sets an element in a `Float32Array`.\n*\n* @private\n* @param {Float32Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @param {number} value - value to set\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var arr = new Float32Array( 4 );\n*\n* setFloat32( arr, 2, 3.0 );\n*\n* var v = arr[ 2 ];\n* // returns 3.0\n*/\nfunction setFloat32( arr, idx, value ) {\n\tarr[ idx ] = value;\n}\n\n/**\n* Sets an element in an `Int32Array`.\n*\n* @private\n* @param {Int32Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @param {number} value - value to set\n*\n* @example\n* import Int32Array from '@stdlib/array-int32';\n*\n* var arr = new Int32Array( 4 );\n*\n* setInt32( arr, 2, 3 );\n*\n* var v = arr[ 2 ];\n* // returns 3\n*/\nfunction setInt32( arr, idx, value ) {\n\tarr[ idx ] = value;\n}\n\n/**\n* Sets an element in an `Int16Array`.\n*\n* @private\n* @param {Int16Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @param {number} value - value to set\n*\n* @example\n* import Int16Array from '@stdlib/array-int16';\n*\n* var arr = new Int16Array( 4 );\n*\n* setInt16( arr, 2, 3 );\n*\n* var v = arr[ 2 ];\n* // returns 3\n*/\nfunction setInt16( arr, idx, value ) {\n\tarr[ idx ] = value;\n}\n\n/**\n* Sets an element in an `Int8Array`.\n*\n* @private\n* @param {Int8Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @param {number} value - value to set\n*\n* @example\n* import Int8Array from '@stdlib/array-int8';\n*\n* var arr = new Int8Array( 4 );\n*\n* setInt8( arr, 2, 3 );\n*\n* var v = arr[ 2 ];\n* // returns 3\n*/\nfunction setInt8( arr, idx, value ) {\n\tarr[ idx ] = value;\n}\n\n/**\n* Sets an element in a `Uint32Array`.\n*\n* @private\n* @param {Uint32Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @param {number} value - value to set\n*\n* @example\n* import Uint32Array from '@stdlib/array-uint32';\n*\n* var arr = new Uint32Array( 4 );\n*\n* setUint32( arr, 2, 3 );\n*\n* var v = arr[ 2 ];\n* // returns 3\n*/\nfunction setUint32( arr, idx, value ) {\n\tarr[ idx ] = value;\n}\n\n/**\n* Sets an element in a `Uint16Array`.\n*\n* @private\n* @param {Uint16Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @param {number} value - value to set\n*\n* @example\n* import Uint16Array from '@stdlib/array-uint16';\n*\n* var arr = new Uint16Array( 4 );\n*\n* setUint16( arr, 2, 3 );\n*\n* var v = arr[ 2 ];\n* // returns 3\n*/\nfunction setUint16( arr, idx, value ) {\n\tarr[ idx ] = value;\n}\n\n/**\n* Sets an element in a `Uint8Array`.\n*\n* @private\n* @param {Uint8Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @param {number} value - value to set\n*\n* @example\n* import Uint8Array from '@stdlib/array-uint8';\n*\n* var arr = new Uint8Array( 4 );\n*\n* setUint8( arr, 2, 3 );\n*\n* var v = arr[ 2 ];\n* // returns 3\n*/\nfunction setUint8( arr, idx, value ) {\n\tarr[ idx ] = value;\n}\n\n/**\n* Sets an element in a `Uint8ClampedArray`.\n*\n* @private\n* @param {Uint8ClampedArray} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @param {number} value - value to set\n*\n* @example\n* import Uint8ClampedArray from '@stdlib/array-uint8c';\n*\n* var arr = new Uint8ClampedArray( 4 );\n*\n* setUint8c( arr, 2, 3 );\n*\n* var v = arr[ 2 ];\n* // returns 3\n*/\nfunction setUint8c( arr, idx, value ) {\n\tarr[ idx ] = value;\n}\n\n/**\n* Sets an element in a generic `Array`.\n*\n* @private\n* @param {Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @param {*} value - value to set\n*\n* @example\n* var arr = [ 1, 2, 3, 4 ];\n*\n* setGeneric( arr, 2, 3 );\n*\n* var v = arr[ 2 ];\n* // returns 3\n*/\nfunction setGeneric( arr, idx, value ) {\n\tarr[ idx ] = value;\n}\n\n/**\n* Sets an element in an indexed array-like object.\n*\n* @private\n* @param {Collection} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @param {*} value - value to set\n*\n* @example\n* var arr = [ 1, 2, 3, 4 ];\n*\n* setArrayLike( arr, 2, 3 );\n*\n* var v = arr[ 2 ];\n* // returns 3\n*/\nfunction setArrayLike( arr, idx, value ) {\n\tarr[ idx ] = value;\n}\n\n\n// MAIN //\n\n/**\n* Returns an accessor function for setting an element in an indexed array-like object.\n*\n* @param {string} dtype - array dtype\n* @returns {Function} accessor\n*\n* @example\n* import dtype from '@stdlib/array-dtype';\n*\n* var arr = [ 1, 2, 3, 4 ];\n*\n* var set = setter( dtype( arr ) );\n* set( arr, 2, 3 );\n*\n* var v = arr[ 2 ];\n* // returns 3\n*/\nfunction setter( dtype ) {\n\tvar f = SETTERS[ dtype ];\n\tif ( typeof f === 'function' ) {\n\t\treturn f;\n\t}\n\treturn SETTERS.default;\n}\n\n\n// EXPORTS //\n\nexport default setter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar SETTERS = {\n\t'complex128': setComplex128,\n\t'complex64': setComplex64,\n\t'default': setArrayLike\n};\n\n\n// FUNCTIONS //\n\n/**\n* Sets an element in a `Complex128Array`.\n*\n* @private\n* @param {Complex128Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @param {(Collection|Complex|ComplexArray)} value - value(s)\n*\n* @example\n* import Complex128Array from '@stdlib/array-complex128';\n* import Complex128 from '@stdlib/complex-float64-ctor';\n* import real from '@stdlib/complex-float64-real';\n* import imag from '@stdlib/complex-float64-imag';\n*\n* var arr = new Complex128Array( [ 1, 2, 3, 4 ] );\n*\n* setComplex128( arr, 1, new Complex128( 10.0, 11.0 ) );\n* var v = arr.get( 1 );\n* // returns <Complex128>\n*\n* var re = real( v );\n* // returns 10.0\n*\n* var im = imag( v );\n* // returns 11.0\n*/\nfunction setComplex128( arr, idx, value ) {\n\tarr.set( value, idx );\n}\n\n/**\n* Sets an element in a `Complex64Array`.\n*\n* @private\n* @param {Complex64Array} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @param {(Collection|Complex|ComplexArray)} value - value(s)\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32-ctor';\n* import realf from '@stdlib/complex-float32-real';\n* import imagf from '@stdlib/complex-float32-imag';\n*\n* var arr = new Complex64Array( [ 1, 2, 3, 4 ] );\n*\n* setComplex64( arr, 1, new Complex64( 10.0, 11.0 ) );\n* var v = arr.get( 1 );\n* // returns <Complex64>\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 11.0\n*/\nfunction setComplex64( arr, idx, value ) {\n\tarr.set( value, idx );\n}\n\n/**\n* Sets an element in an array-like object supporting the get/set protocol.\n*\n* @private\n* @param {Collection} arr - input array\n* @param {NonNegativeInteger} idx - element index\n* @param {(Collection|Complex|ComplexArray)} value - value(s)\n*\n* @example\n* var arr = [ 1, 2, 3, 4 ];\n*\n* function get( idx ) {\n*    return arr[ idx ];\n* }\n*\n* function set( value, idx ) {\n*    arr[ idx ] = value;\n* }\n*\n* arr.get = get;\n* arr.set = set;\n*\n* setArrayLike( arr, 2, 10 );\n*\n* var v = arr[ 2 ];\n* // returns 10\n*/\nfunction setArrayLike( arr, idx, value ) {\n\tarr.set( value, idx );\n}\n\n\n// MAIN //\n\n/**\n* Returns an accessor function for setting an element in an array-like object supporting the get/set protocol.\n*\n* @param {string} dtype - array dtype\n* @returns {Function} accessor\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32-ctor';\n* import realf from '@stdlib/complex-float32-real';\n* import imagf from '@stdlib/complex-float32-imag';\n* import dtype from '@stdlib/array-dtype';\n*\n* var arr = new Complex64Array( [ 1, 2, 3, 4 ] );\n*\n* var set = setter( dtype( arr ) );\n* set( arr, 1, new Complex64( 10.0, 11.0 ) );\n*\n* var v = arr.get( 1 );\n* // returns <Complex64>\n*\n* var re = realf( v );\n* // returns 10.0\n*\n* var im = imagf( v );\n* // returns 11.0\n*/\nfunction setter( dtype ) {\n\tvar f = SETTERS[ dtype ];\n\tif ( typeof f === 'function' ) {\n\t\treturn f;\n\t}\n\treturn SETTERS.default;\n}\n\n\n// EXPORTS //\n\nexport default setter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isAccessorArray from '@stdlib/array-base-assert-is-accessor-array';\nimport getter from '@stdlib/array-base-getter';\nimport setter from '@stdlib/array-base-setter';\nimport accessorGetter from '@stdlib/array-base-accessor-getter';\nimport accessorSetter from '@stdlib/array-base-accessor-setter';\nimport dtype from '@stdlib/array-dtype';\n\n\n// MAIN //\n\n/**\n* Converts an array-like to an object likely to have the same \"shape\".\n*\n* ## Notes\n*\n* -   This function is intended as a potential performance optimization. In V8, for example, even if two objects share common properties, if those properties were added in different orders or if one object has additional properties not shared by the other object, then those objects will have different \"hidden\" classes. If a function is provided many objects having different \"shapes\", some JavaScript VMs (e.g., V8) will consider the function \"megamorphic\" and fail to perform various runtime optimizations. Accordingly, the intent of this function is to standardize the \"shape\" of the object holding array meta data to ensure that internal functions operating on arrays are provided consistent argument \"shapes\".\n*\n* -   The returned object has the following properties:\n*\n*     -   **data**: reference to the input array.\n*     -   **dtype**: array data type.\n*     -   **accessorProtocol**: `boolean` indicating whether the input array uses accessors for getting and setting elements.\n*     -   **accessors**: a two-element array whose first element is an accessor for retrieving an array element and whose second element is an accessor for setting an array element.\n*\n* @param {Collection} x - array-like object\n* @returns {Object} object containing array meta data\n*\n* @example\n* var obj = arraylike2object( [ 1, 2, 3, 4 ] );\n* // returns {...}\n*/\nfunction arraylike2object( x ) {\n\tvar dt = dtype( x );\n\tif ( isAccessorArray( x ) ) {\n\t\treturn {\n\t\t\t'data': x,\n\t\t\t'dtype': dt,\n\t\t\t'accessorProtocol': true,\n\t\t\t'accessors': [\n\t\t\t\taccessorGetter( dt ),\n\t\t\t\taccessorSetter( dt )\n\t\t\t]\n\t\t};\n\t}\n\treturn {\n\t\t'data': x,\n\t\t'dtype': dt,\n\t\t'accessorProtocol': false,\n\t\t'accessors': [\n\t\t\tgetter( dt ),\n\t\t\tsetter( dt )\n\t\t]\n\t};\n}\n\n\n// EXPORTS //\n\nexport default arraylike2object;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero';\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} maximum value\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = max( 4, x, 2, 1 );\n* // returns 4.0\n*/\nfunction max( N, x, strideX, offsetX ) {\n\tvar max;\n\tvar ix;\n\tvar o;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\treturn x[ offsetX ];\n\t}\n\tix = offsetX;\n\tmax = x[ ix ];\n\tfor ( i = 1; i < N; i++ ) {\n\t\tix += strideX;\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v > max || ( v === max && isPositiveZero( v ) ) ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max;\n}\n\n\n// EXPORTS //\n\nexport default max;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero';\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a strided array.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} maximum value\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = max( 4, arraylike2object( x ), 2, 1 );\n* // returns 4.0\n*/\nfunction max( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar get;\n\tvar max;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[ 0 ];\n\n\tif ( N === 1 || strideX === 0 ) {\n\t\treturn get( xbuf, offsetX );\n\t}\n\tix = offsetX;\n\tmax = get( xbuf, ix );\n\tfor ( i = 1; i < N; i++ ) {\n\t\tix += strideX;\n\t\tv = get( xbuf, ix );\n\t\tif ( isnan( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v > max || ( v === max && isPositiveZero( v ) ) ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max;\n}\n\n\n// EXPORTS //\n\nexport default max;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero';\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a strided array via a callback function.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - input array\n* @param {integer} strideX - index increment\n* @param {NonNegativeInteger} offsetX - starting index\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - execution context\n* @returns {number} maximum value\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var v = maxBy( x.length, x, 1, 0, accessor );\n* // returns 8.0\n*/\nfunction maxBy( N, x, strideX, offsetX, clbk, thisArg ) {\n\tvar max;\n\tvar ix;\n\tvar o;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX, clbk, thisArg );\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tv = clbk.call( thisArg, x[ offsetX ], 0, offsetX, x );\n\t\tif ( v === void 0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn v;\n\t}\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tmax = clbk.call( thisArg, x[ ix ], i, ix, x );\n\t\tif ( max !== void 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tv = clbk.call( thisArg, x[ ix ], i, ix, x );\n\t\tif ( v === void 0 ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( isnan( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v > max || ( v === max && isPositiveZero( v ) ) ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max;\n}\n\n\n// EXPORTS //\n\nexport default maxBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isPositiveZero from '@stdlib/math-base-assert-is-positive-zero';\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a strided array via a callback function.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - execution context\n* @returns {number} maximum value\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = toAccessorArray( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var v = maxBy( x.length, arraylike2object( x ), 1, 0, accessor );\n* // returns 8.0\n*/\nfunction maxBy( N, x, strideX, offsetX, clbk, thisArg ) {\n\tvar xbuf;\n\tvar get;\n\tvar max;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[ 0 ];\n\n\tif ( N === 1 || strideX === 0 ) {\n\t\tv = clbk.call( thisArg, get( xbuf, offsetX ), 0, offsetX, xbuf );\n\t\tif ( v === void 0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn v;\n\t}\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tmax = clbk.call( thisArg, get( xbuf, ix ), i, ix, xbuf );\n\t\tif ( max !== void 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tv = clbk.call( thisArg, get( xbuf, ix ), i, ix, xbuf );\n\t\tif ( v === void 0 ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( isnan( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v > max || ( v === max && isPositiveZero( v ) ) ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max;\n}\n\n\n// EXPORTS //\n\nexport default maxBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero';\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the minimum value of a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} minimum value\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = min( 4, x, 2, 1 );\n* // returns -2.0\n*/\nfunction min( N, x, strideX, offsetX ) {\n\tvar min;\n\tvar ix;\n\tvar o;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\treturn x[ offsetX ];\n\t}\n\tix = offsetX;\n\tmin = x[ ix ];\n\tfor ( i = 1; i < N; i++ ) {\n\t\tix += strideX;\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v < min || ( v === min && isNegativeZero( v ) ) ) {\n\t\t\tmin = v;\n\t\t}\n\t}\n\treturn min;\n}\n\n\n// EXPORTS //\n\nexport default min;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero';\n\n\n// MAIN //\n\n/**\n* Computes the minimum value of a strided array.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} minimum value\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = min( 4, arraylike2object( x ), 2, 1 );\n* // returns -2.0\n*/\nfunction min( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar get;\n\tvar min;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[ 0 ];\n\n\tif ( N === 1 || strideX === 0 ) {\n\t\treturn get( xbuf, offsetX );\n\t}\n\tix = offsetX;\n\tmin = get( xbuf, ix );\n\tfor ( i = 1; i < N; i++ ) {\n\t\tix += strideX;\n\t\tv = get( xbuf, ix );\n\t\tif ( isnan( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v < min || ( v === min && isNegativeZero( v ) ) ) {\n\t\t\tmin = v;\n\t\t}\n\t}\n\treturn min;\n}\n\n\n// EXPORTS //\n\nexport default min;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero';\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the minimum value of a strided array via a callback function.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - input array\n* @param {integer} strideX - index increment\n* @param {NonNegativeInteger} offsetX - starting index\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - execution context\n* @returns {number} minimum value\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var v = minBy( x.length, x, 1, 0, accessor );\n* // returns -10.0\n*/\nfunction minBy( N, x, strideX, offsetX, clbk, thisArg ) {\n\tvar min;\n\tvar ix;\n\tvar o;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX, clbk, thisArg );\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tv = clbk.call( thisArg, x[ offsetX ], 0, offsetX, x );\n\t\tif ( v === void 0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn v;\n\t}\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tmin = clbk.call( thisArg, x[ ix ], i, ix, x );\n\t\tif ( min !== void 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tv = clbk.call( thisArg, x[ ix ], i, ix, x );\n\t\tif ( v === void 0 ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( isnan( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v < min || ( v === min && isNegativeZero( v ) ) ) {\n\t\t\tmin = v;\n\t\t}\n\t}\n\treturn min;\n}\n\n\n// EXPORTS //\n\nexport default minBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero';\n\n\n// MAIN //\n\n/**\n* Computes the minimum value of a strided array via a callback function.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - execution context\n* @returns {number} minimum value\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = toAccessorArray( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var v = minBy( x.length, arraylike2object( x ), 1, 0, accessor );\n* // returns -10.0\n*/\nfunction minBy( N, x, strideX, offsetX, clbk, thisArg ) {\n\tvar xbuf;\n\tvar get;\n\tvar min;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[ 0 ];\n\n\tif ( N === 1 || strideX === 0 ) {\n\t\tv = clbk.call( thisArg, get( xbuf, offsetX ), 0, offsetX, xbuf );\n\t\tif ( v === void 0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn v;\n\t}\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tmin = clbk.call( thisArg, get( xbuf, ix ), i, ix, xbuf );\n\t\tif ( min !== void 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tv = clbk.call( thisArg, get( xbuf, ix ), i, ix, xbuf );\n\t\tif ( v === void 0 ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( isnan( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v < min || ( v === min && isNegativeZero( v ) ) ) {\n\t\t\tmin = v;\n\t\t}\n\t}\n\treturn min;\n}\n\n\n// EXPORTS //\n\nexport default minBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the range of a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} range\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = range( 4, x, 2, 1 );\n* // returns 6.0\n*/\nfunction range( N, x, strideX, offsetX ) {\n\tvar max;\n\tvar min;\n\tvar ix;\n\tvar o;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( x[ offsetX ] ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tmin = x[ ix ];\n\tmax = min;\n\tfor ( i = 1; i < N; i++ ) {\n\t\tix += strideX;\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v < min ) {\n\t\t\tmin = v;\n\t\t} else if ( v > max ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max - min;\n}\n\n\n// EXPORTS //\n\nexport default range;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Computes the range of a strided array.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - strideX length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} range\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = range( 4, arraylike2object( x ), 2, 1 );\n* // returns 6.0\n*/\nfunction range( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar get;\n\tvar max;\n\tvar min;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[ 0 ];\n\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnan( get( xbuf, offsetX ) ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tmin = get( xbuf, ix );\n\tmax = min;\n\tfor ( i = 1; i < N; i++ ) {\n\t\tix += strideX;\n\t\tv = get( xbuf, ix );\n\t\tif ( isnan( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v < min ) {\n\t\t\tmin = v;\n\t\t} else if ( v > max ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max - min;\n}\n\n\n// EXPORTS //\n\nexport default range;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if a single-precision floating-point numeric value is `NaN`.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is `NaN`\n*\n* @example\n* var bool = isnanf( NaN );\n* // returns true\n*\n* @example\n* var bool = isnanf( 7.0 );\n* // returns false\n*/\nfunction isnanf( x ) {\n\treturn ( x !== x );\n}\n\n\n// EXPORTS //\n\nexport default isnanf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the maximum value of a strided array.\n*\n* @module @stdlib/stats-strided-max\n*\n* @example\n* import max from '@stdlib/stats-strided-max';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = max( x.length, x, 1 );\n* // returns 2.0\n*\n* @example\n* import max from '@stdlib/stats-strided-max';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = max.ndarray( 4, x, 2, 1 );\n* // returns 4.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} maximum value\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = max( x.length, x, 1 );\n* // returns 2.0\n*/\nfunction max( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default max;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the maximum value of a strided array via a callback function.\n*\n* @module @stdlib/stats-strided-max-by\n*\n* @example\n* import maxBy from '@stdlib/stats-strided-max-by';\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* var v = maxBy( x.length, x, 1, accessor );\n* // returns 8.0\n*\n* @example\n* import maxBy from '@stdlib/stats-strided-max-by';\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* var v = maxBy.ndarray( x.length, x, 1, 0, accessor );\n* // returns 8.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a strided array via a callback function.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - input array\n* @param {integer} strideX - index increment\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - execution context\n* @returns {number} maximum value\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var v = maxBy( x.length, x, 1, accessor );\n* // returns 8.0\n*/\nfunction maxBy( N, x, strideX, clbk, thisArg ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ), clbk, thisArg );\n}\n\n\n// EXPORTS //\n\nexport default maxBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the minimum value of a strided array.\n*\n* @module @stdlib/stats-strided-min\n*\n* @example\n* import min from '@stdlib/stats-strided-min';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = min( x.length, x, 1 );\n* // returns -2.0\n*\n* @example\n* import min from '@stdlib/stats-strided-min';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = min.ndarray( 4, x, 2, 1 );\n* // returns -2.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the minimum value of a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} minimum value\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = min( N, x, 1 );\n* // returns -2.0\n*/\nfunction min( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default min;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the minimum value of a strided array via a callback function.\n*\n* @module @stdlib/stats-strided-min-by\n*\n* @example\n* import minBy from '@stdlib/stats-strided-min-by';\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* var v = minBy( x.length, x, 1, accessor );\n* // returns -10.0\n*\n* @example\n* import minBy from '@stdlib/stats-strided-min-by';\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* var v = minBy.ndarray( x.length, x, 1, 0, accessor );\n* // returns -10.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the minimum value of a strided array via a callback function.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - input array\n* @param {integer} strideX - index increment\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - execution context\n* @returns {number} minimum value\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var v = minBy( x.length, x, 1, accessor );\n* // returns -10.0\n*/\nfunction minBy( N, x, strideX, clbk, thisArg ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ), clbk, thisArg );\n}\n\n\n// EXPORTS //\n\nexport default minBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the range of a strided array.\n*\n* @module @stdlib/stats-strided-range\n*\n* @example\n* import range from '@stdlib/stats-strided-range';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = range( x.length, x, 1 );\n* // returns 4.0\n*\n* @example\n* import range from '@stdlib/stats-strided-range';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = range.ndarray( 4, x, 2, 1 );\n* // returns 6.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the range of a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} range\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = range( x.length, x, 1 );\n* // returns 4.0\n*/\nfunction range( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default range;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Single-precision floating-point positive infinity.\n*\n* @module @stdlib/constants-float32-pinf\n* @type {number}\n*\n* @example\n* import FLOAT32_PINF from '@stdlib/constants-float32-pinf';\n* // returns +infinity\n*/\n\n// MODULES //\n\nimport Float32Array from '@stdlib/array-float32';\nimport Uint32Array from '@stdlib/array-uint32';\n\n\n// VARIABLES //\n\nvar FLOAT32_VIEW = new Float32Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT32_VIEW.buffer );\nvar v;\n\n\n// MAIN //\n\n/**\n* Single-precision floating-point positive infinity.\n*\n* ## Notes\n*\n* Single-precision floating-point positive infinity has the bit sequence\n*\n* ```binarystring\n* 0 11111111 00000000000000000000000\n* ```\n*\n* This bit sequence corresponds to the unsigned 32-bit integer `2139095040` and to the HEX value `0x7f800000`.\n*\n* @constant\n* @type {number}\n* @default 0x7f800000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_PINF = 0x7f800000;\n\n// Set the ArrayBuffer bit sequence:\nUINT32_VIEW[ 0 ] = FLOAT32_PINF;\n\nv = FLOAT32_VIEW[ 0 ];\n\n\n// EXPORTS //\n\nexport default v;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float32-pinf';\n\n\n// MAIN //\n\n/**\n* Tests if a single-precision floating-point numeric value is positive zero.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is positive zero\n*\n* @example\n* var bool = isPositiveZerof( 0.0 );\n* // returns true\n*\n* @example\n* var bool = isPositiveZerof( -0.0 );\n* // returns false\n*/\nfunction isPositiveZerof( x ) {\n\treturn (x === 0.0 && 1.0/x === PINF);\n}\n\n\n// EXPORTS //\n\nexport default isPositiveZerof;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnanf from '@stdlib/math-base-assert-is-nanf';\nimport isPositiveZerof from '@stdlib/math-base-assert-is-positive-zerof';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative maximum of single-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float32Array( x.length );\n*\n* var v = scumax( 4, x, 2, 1, y, 1, 0 );\n* // returns <Float32Array>[ 1.0, 1.0, 2.0, 4.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction scumax( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar max;\n\tvar ix;\n\tvar iy;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\tmax = x[ ix ];\n\ty[ iy ] = max;\n\n\tiy += strideY;\n\ti = 1;\n\tif ( isnanf( max ) === false ) {\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( isnanf( v ) ) {\n\t\t\t\tmax = v;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( v > max || ( v === max && isPositiveZerof( v ) ) ) {\n\t\t\t\tmax = v;\n\t\t\t}\n\t\t\ty[ iy ] = max;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\tif ( isnanf( max ) ) {\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ty[ iy ] = max;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scumax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport scumax from './scumax.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( scumax, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scumax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative maximum of single-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float32Array( x.length );\n*\n* var v = scumax( x.length, x, 1, y, 1 );\n* // returns <Float32Array>[ 1.0, 1.0, 2.0 ]\n*/\nfunction scumax( N, x, strideX, y, strideY ) {\n\tvar ox = stride2offset( N, strideX );\n\tvar oy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ox, y, strideY, oy );\n}\n\n\n// EXPORTS //\n\nexport default scumax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Single-precision floating-point negative infinity.\n*\n* @module @stdlib/constants-float32-ninf\n* @type {number}\n*\n* @example\n* import FLOAT32_NINF from '@stdlib/constants-float32-ninf';\n* // returns -infinity\n*/\n\n// MODULES //\n\nimport Float32Array from '@stdlib/array-float32';\nimport Uint32Array from '@stdlib/array-uint32';\n\n\n// VARIABLES //\n\nvar FLOAT32_VIEW = new Float32Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT32_VIEW.buffer );\nvar v;\n\n\n// MAIN //\n\n/**\n* Single-precision floating-point negative infinity.\n*\n* ## Notes\n*\n* Single-precision floating-point negative infinity has the bit sequence\n*\n* ```binarystring\n* 1 11111111 00000000000000000000000\n* ```\n*\n* This bit sequence corresponds to the unsigned 32-bit integer `4286578688` and to the HEX value `0xff800000`.\n*\n* @constant\n* @type {number}\n* @default 0xff800000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_NINF = 0xff800000;\n\n// Set the ArrayBuffer bit sequence:\nUINT32_VIEW[ 0 ] = FLOAT32_NINF;\n\nv = FLOAT32_VIEW[ 0 ];\n\n\n// EXPORTS //\n\nexport default v;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport NINF from '@stdlib/constants-float32-ninf';\n\n\n// MAIN //\n\n/**\n* Tests if a single-precision floating-point numeric value is negative zero.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is negative zero\n*\n* @example\n* var bool = isNegativeZerof( -0.0 );\n* // returns true\n*\n* @example\n* var bool = isNegativeZerof( 0.0 );\n* // returns false\n*/\nfunction isNegativeZerof( x ) {\n\treturn (x === 0.0 && 1.0/x === NINF);\n}\n\n\n// EXPORTS //\n\nexport default isNegativeZerof;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnanf from '@stdlib/math-base-assert-is-nanf';\nimport isNegativeZerof from '@stdlib/math-base-assert-is-negative-zerof';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative minimum of single-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float32Array( x.length );\n*\n* var v = scumin( 4, x, 2, 1, y, 1, 0 );\n* // returns <Float32Array>[ 1.0, -2.0, -2.0, -2.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction scumin( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar min;\n\tvar ix;\n\tvar iy;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\tmin = x[ ix ];\n\ty[ iy ] = min;\n\n\tiy += strideY;\n\ti = 1;\n\tif ( isnanf( min ) === false ) {\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( isnanf( v ) ) {\n\t\t\t\tmin = v;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( v < min || ( v === min && isNegativeZerof( v ) ) ) {\n\t\t\t\tmin = v;\n\t\t\t}\n\t\t\ty[ iy ] = min;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\tif ( isnanf( min ) ) {\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ty[ iy ] = min;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scumin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnanf from '@stdlib/math-base-assert-is-nanf';\nimport isPositiveZerof from '@stdlib/math-base-assert-is-positive-zerof';\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a single-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} maximum value\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = smax( 4, x, 2, 1 );\n* // returns 4.0\n*/\nfunction smax( N, x, strideX, offsetX ) {\n\tvar max;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\treturn x[ offsetX ];\n\t}\n\tix = offsetX;\n\tmax = x[ ix ];\n\tfor ( i = 1; i < N; i++ ) {\n\t\tix += strideX;\n\t\tv = x[ ix ];\n\t\tif ( isnanf( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v > max || ( v === max && isPositiveZerof( v ) ) ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max;\n}\n\n\n// EXPORTS //\n\nexport default smax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnanf from '@stdlib/math-base-assert-is-nanf';\nimport isNegativeZerof from '@stdlib/math-base-assert-is-negative-zerof';\n\n\n// MAIN //\n\n/**\n* Computes the minimum value of a single-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} minimum value\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = smin( 4, x, 2, 1 );\n* // returns -2.0\n*/\nfunction smin( N, x, strideX, offsetX ) {\n\tvar min;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\treturn x[ offsetX ];\n\t}\n\tix = offsetX;\n\tmin = x[ ix ];\n\tfor ( i = 1; i < N; i++ ) {\n\t\tix += strideX;\n\t\tv = x[ ix ];\n\t\tif ( isnanf( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v < min || ( v === min && isNegativeZerof( v ) ) ) {\n\t\t\tmin = v;\n\t\t}\n\t}\n\treturn min;\n}\n\n\n// EXPORTS //\n\nexport default smin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport isnanf from '@stdlib/math-base-assert-is-nanf';\n\n\n// MAIN //\n\n/**\n* Computes the range of a single-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} range\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = srange( 4, x, 2, 1 );\n* // returns 6.0\n*/\nfunction srange( N, x, strideX, offsetX ) {\n\tvar max;\n\tvar min;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tif ( isnanf( x[ offsetX ] ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tmin = x[ ix ];\n\tmax = min;\n\tfor ( i = 1; i < N; i++ ) {\n\t\tix += strideX;\n\t\tv = x[ ix ];\n\t\tif ( isnanf( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v < min ) {\n\t\t\tmin = v;\n\t\t} else if ( v > max ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn float64ToFloat32( max - min );\n}\n\n\n// EXPORTS //\n\nexport default srange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport scumin from './scumin.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( scumin, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default scumin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative minimum of single-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} output array\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float32Array( x.length );\n*\n* var v = scumin( x.length, x, 1, y, 1 );\n* // returns <Float32Array>[ 1.0, -2.0, -2.0 ]\n*/\nfunction scumin( N, x, strideX, y, strideY ) {\n\tvar ox = stride2offset( N, strideX );\n\tvar oy = stride2offset( N, strideY );\n\treturn ndarray( N, x, strideX, ox, y, strideY, oy );\n}\n\n\n// EXPORTS //\n\nexport default scumin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport smax from './smax.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( smax, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default smax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a single-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} maximum value\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = smax( x.length, x, 1 );\n* // returns 2.0\n*/\nfunction smax( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default smax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport smin from './smin.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( smin, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default smin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the minimum value of a single-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} minimum value\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = smin( x.length, x, 1 );\n* // returns -2.0\n*/\nfunction smin( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default smin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport srange from './srange.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( srange, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default srange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the range of a single-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} range\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = srange( x.length, x, 1 );\n* // returns 4.0\n*/\nfunction srange( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default srange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = ssumpw( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction ssumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = x[ ix ];\n\t\ts1 = x[ ix+stride ];\n\t\ts2 = x[ ix+(2*stride) ];\n\t\ts3 = x[ ix+(3*stride) ];\n\t\ts4 = x[ ix+(4*stride) ];\n\t\ts5 = x[ ix+(5*stride) ];\n\t\ts6 = x[ ix+(6*stride) ];\n\t\ts7 = x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 = float64ToFloat32( s0 + x[ ix ] );\n\t\t\ts1 = float64ToFloat32( s1 + x[ ix+stride ] );\n\t\t\ts2 = float64ToFloat32( s2 + x[ ix+(2*stride) ] );\n\t\t\ts3 = float64ToFloat32( s3 + x[ ix+(3*stride) ] );\n\t\t\ts4 = float64ToFloat32( s4 + x[ ix+(4*stride) ] );\n\t\t\ts5 = float64ToFloat32( s5 + x[ ix+(5*stride) ] );\n\t\t\ts6 = float64ToFloat32( s6 + x[ ix+(6*stride) ] );\n\t\t\ts7 = float64ToFloat32( s7 + x[ ix+(7*stride) ] );\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = float64ToFloat32( float64ToFloat32( float64ToFloat32(s0+s1) + float64ToFloat32(s2+s3) ) + float64ToFloat32( float64ToFloat32(s4+s5) + float64ToFloat32(s6+s7) ) ); // eslint-disable-line max-len\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( ssumpw( n, x, stride, ix ) + ssumpw( N-n, x, stride, ix+(n*stride) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default ssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport ssumpw from './ssumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( ssumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default ssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport sum from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = ssumpw( N, x, 1 );\n* // returns 1.0\n*/\nfunction ssumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + x[ ix ] );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default ssumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = sapxsumpw( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction sapxsumpw( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ offset ] );\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + float64ToFloat32( alpha + x[ ix ] ) );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = float64ToFloat32( alpha + x[ ix ] );\n\t\ts1 = float64ToFloat32( alpha + x[ ix+stride ] );\n\t\ts2 = float64ToFloat32( alpha + x[ ix+(2*stride) ] );\n\t\ts3 = float64ToFloat32( alpha + x[ ix+(3*stride) ] );\n\t\ts4 = float64ToFloat32( alpha + x[ ix+(4*stride) ] );\n\t\ts5 = float64ToFloat32( alpha + x[ ix+(5*stride) ] );\n\t\ts6 = float64ToFloat32( alpha + x[ ix+(6*stride) ] );\n\t\ts7 = float64ToFloat32( alpha + x[ ix+(7*stride) ] );\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 = float64ToFloat32( s0 + float64ToFloat32( alpha + x[ ix ] ) );\n\t\t\ts1 = float64ToFloat32( s1 + float64ToFloat32( alpha + x[ ix+stride ] ) );\n\t\t\ts2 = float64ToFloat32( s2 + float64ToFloat32( alpha + x[ ix+(2*stride) ] ) );\n\t\t\ts3 = float64ToFloat32( s3 + float64ToFloat32( alpha + x[ ix+(3*stride) ] ) );\n\t\t\ts4 = float64ToFloat32( s4 + float64ToFloat32( alpha + x[ ix+(4*stride) ] ) );\n\t\t\ts5 = float64ToFloat32( s5 + float64ToFloat32( alpha + x[ ix+(5*stride) ] ) );\n\t\t\ts6 = float64ToFloat32( s6 + float64ToFloat32( alpha + x[ ix+(6*stride) ] ) );\n\t\t\ts7 = float64ToFloat32( s7 + float64ToFloat32( alpha + x[ ix+(7*stride) ] ) );\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = float64ToFloat32( float64ToFloat32( float64ToFloat32(s0+s1) + float64ToFloat32(s2+s3) ) + float64ToFloat32( float64ToFloat32(s4+s5) + float64ToFloat32(s6+s7) ) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + float64ToFloat32( alpha + x[ ix ] ) );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( sapxsumpw( n, alpha, x, stride, ix ) + sapxsumpw( N-n, alpha, x, stride, ix+(n*stride) ) );\n}\n\n\n// EXPORTS //\n\nexport default sapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport { ndarray as ssumpw } from '@stdlib/blas-ext-base-ssumpw';\nimport { ndarray as sapxsumpw } from '@stdlib/blas-ext-base-sapxsumpw';\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a single-precision floating-point strided array using a two-pass error correction algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} arithmetic mean\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = smeanpn( 4, x, 2, 1 );\n* // returns 1.25\n*/\nfunction smeanpn( N, x, strideX, offsetX ) {\n\tvar mu;\n\tvar c;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\treturn x[ offsetX ];\n\t}\n\t// Compute an estimate for the mean:\n\tmu = float64ToFloat32( ssumpw( N, x, strideX, offsetX ) / N );\n\n\t// Compute an error term:\n\tc = float64ToFloat32( sapxsumpw( N, -mu, x, strideX, offsetX ) / N );\n\n\treturn float64ToFloat32( mu + c );\n}\n\n\n// EXPORTS //\n\nexport default smeanpn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a single-precision floating-point strided array using a two-pass error correction algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} arithmetic mean\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = smeanpn( x.length, x, 1 );\n* // returns ~0.3333\n*/\nfunction smeanpn( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default smeanpn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as smeanpn } from '@stdlib/stats-strided-smeanpn';\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a single-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} arithmetic mean\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = smean( 4, x, 2, 1 );\n* // returns 1.25\n*/\nfunction smean( N, x, strideX, offsetX ) {\n\treturn smeanpn( N, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default smean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport sapxsumpw from './sapxsumpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sapxsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport sum from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a constant to each single-precision floating-point strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = sapxsumpw( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction sapxsumpw( N, alpha, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn float64ToFloat32( alpha + x[ 0 ] );\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + float64ToFloat32( alpha + x[ ix ] ) );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, alpha, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default sapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport smeanpn from './smeanpn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( smeanpn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default smeanpn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport smean from './smean.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( smean, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default smean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport smeanpn from '@stdlib/stats-strided-smeanpn';\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a single-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} arithmetic mean\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = smean( x.length, x, 1 );\n* // returns ~0.3333\n*/\nfunction smean( N, x, strideX ) {\n\treturn smeanpn( N, x, strideX );\n}\n\n\n// EXPORTS //\n\nexport default smean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport resolveStr from '@stdlib/stats-base-ztest-alternative-resolve-str';\nimport isnanf from '@stdlib/math-base-assert-is-nanf';\nimport { factory as quantile } from '@stdlib/stats-base-dists-normal-quantile';\nimport { factory as cdf } from '@stdlib/stats-base-dists-normal-cdf';\nimport { ndarray as smean } from '@stdlib/stats-strided-smean';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport Float32Array from '@stdlib/array-float32';\nimport PINF from '@stdlib/constants-float32-pinf';\nimport NINF from '@stdlib/constants-float32-ninf';\nimport f32 from '@stdlib/number-float64-base-to-float32';\n\n\n// VARIABLES //\n\nvar normalCDF = cdf( 0.0, 1.0 );\nvar normalQuantile = quantile( 0.0, 1.0 );\n\n// Initialize a workspace for storing confidence intervals:\nvar WORKSPACE = new Float32Array( 2 );\n\n\n// MAIN //\n\n/**\n* Computes a one-sample Z-test for a single-precision floating-point strided array using alternative indexing semantics.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {(integer|string)} alternative - alternative hypothesis\n* @param {number} alpha - significance level\n* @param {number} mu - mean under the null hypothesis\n* @param {PositiveNumber} sigma - known standard deviation\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @param {Object} out - output results object\n* @returns {Object} results object\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n* import Results from '@stdlib/stats-base-ztest-one-sample-results-float32';\n*\n* var x = new Float32Array( [ 4.0, 4.0, 6.0, 6.0, 5.0 ] );\n*\n* var results = new Results();\n* var out = sztest( x.length, 'two-sided', 0.05, 0.0, 1.0, x, 1, 0, results );\n* // returns {...}\n*\n* var bool = ( out === results );\n* // returns true\n*/\nfunction sztest( N, alternative, alpha, mu, sigma, x, strideX, offsetX, out ) {\n\tvar pValue;\n\tvar stderr;\n\tvar xmean;\n\tvar stat;\n\tvar alt;\n\tvar q;\n\n\talt = resolveStr( alternative );\n\tif (\n\t\tN <= 0 ||\n\t\tisnanf( alpha ) ||\n\t\tisnanf( mu ) ||\n\t\tisnanf( sigma ) ||\n\t\tsigma <= 0.0 ||\n\t\talpha < 0.0 ||\n\t\talpha > 1.0\n\t) {\n\t\tWORKSPACE[ 0 ] = NaN;\n\t\tWORKSPACE[ 1 ] = NaN;\n\t\tout.rejected = false;\n\t\tout.alternative = alt;\n\t\tout.alpha = NaN;\n\t\tout.pValue = NaN;\n\t\tout.statistic = NaN;\n\t\tout.ci = WORKSPACE;\n\t\tout.nullValue = NaN;\n\t\tout.sd = NaN;\n\t\treturn out;\n\t}\n\t// \"Cast\" input values to single-precision:\n\talpha = f32( alpha );\n\tmu = f32( mu );\n\tsigma = f32( sigma );\n\n\t// Compute the standard error of the mean:\n\tstderr = sigma / sqrt( N ); // note: intentionally evaluated in double-precision to avoid `N` exceeding max safe float32 integer\n\n\t// Compute the arithmetic mean of the input array:\n\txmean = smean( N, x, strideX, offsetX );\n\n\t// Compute the test statistic (i.e., the z-score, which is the distance of the sample mean from the population mean in units of standard error):\n\tstat = ( xmean - mu ) / stderr;\n\n\t// Compute the p-value and confidence interval...\n\tif ( alt === 'less' ) {\n\t\tpValue = normalCDF( stat );\n\t\tq = normalQuantile( 1.0-alpha );\n\t\tWORKSPACE[ 0 ] = NINF;\n\t\tWORKSPACE[ 1 ] = mu + ( (stat+q)*stderr );\n\t} else if ( alt === 'greater' ) {\n\t\tpValue = 1.0 - normalCDF( stat );\n\t\tq = normalQuantile( 1.0-alpha );\n\t\tWORKSPACE[ 0 ] = mu + ( (stat-q)*stderr );\n\t\tWORKSPACE[ 1 ] = PINF;\n\t} else { // alt == 'two-sided'\n\t\tpValue = 2.0 * normalCDF( -abs( stat ) );\n\t\tq = normalQuantile( 1.0-(alpha/2.0) );\n\t\tWORKSPACE[ 0 ] = mu + ( (stat-q)*stderr );\n\t\tWORKSPACE[ 1 ] = mu + ( (stat+q)*stderr );\n\t}\n\t// Return test results:\n\tout.rejected = ( pValue <= alpha );\n\tout.alternative = alt;\n\tout.alpha = alpha;\n\tout.pValue = f32( pValue );\n\tout.statistic = f32( stat );\n\tout.ci = WORKSPACE;\n\tout.nullValue = mu;\n\tout.sd = f32( stderr );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default sztest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport sztest from './sztest.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sztest, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sztest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes a one-sample Z-test for a single-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {(integer|string)} alternative - alternative hypothesis\n* @param {number} alpha - significance level\n* @param {number} mu - mean under the null hypothesis\n* @param {PositiveNumber} sigma - known standard deviation\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {Object} out - output results object\n* @returns {Object} results object\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n* import Results from '@stdlib/stats-base-ztest-one-sample-results-float32';\n*\n* var x = new Float32Array( [ 4.0, 4.0, 6.0, 6.0, 5.0 ] );\n*\n* var results = new Results();\n* var out = sztest( x.length, 'two-sided', 0.05, 0.0, 1.0, x, 1, results );\n* // returns {...}\n*\n* var bool = ( out === results );\n* // returns true\n*/\nfunction sztest( N, alternative, alpha, mu, sigma, x, strideX, out ) {\n\treturn ndarray( N, alternative, alpha, mu, sigma, x, strideX, stride2offset( N, strideX ), out ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sztest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport resolveStr from '@stdlib/stats-base-ztest-alternative-resolve-str';\nimport isnanf from '@stdlib/math-base-assert-is-nanf';\nimport { factory as quantile } from '@stdlib/stats-base-dists-normal-quantile';\nimport { factory as cdf } from '@stdlib/stats-base-dists-normal-cdf';\nimport { ndarray as smean } from '@stdlib/stats-strided-smean';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport Float32Array from '@stdlib/array-float32';\nimport PINF from '@stdlib/constants-float32-pinf';\nimport NINF from '@stdlib/constants-float32-ninf';\nimport f32 from '@stdlib/number-float64-base-to-float32';\n\n\n// VARIABLES //\n\nvar normalCDF = cdf( 0.0, 1.0 );\nvar normalQuantile = quantile( 0.0, 1.0 );\n\n// Initialize a workspace for storing confidence intervals:\nvar WORKSPACE = new Float32Array( 2 );\n\n\n// MAIN //\n\n/**\n* Computes a two-sample Z-test for two single-precision floating-point strided arrays using alternative indexing semantics.\n*\n* @param {PositiveInteger} NX - number of indexed elements in `x`\n* @param {PositiveInteger} NY - number of indexed elements in `y`\n* @param {(integer|string)} alternative - alternative hypothesis\n* @param {number} alpha - significance level\n* @param {number} diff - difference in means under the null hypothesis\n* @param {PositiveNumber} sigmax - known standard deviation of `x`\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {PositiveNumber} sigmay - known standard deviation of `y`\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @param {Object} out - output results object\n* @returns {Object} results object\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n* import Results from '@stdlib/stats-base-ztest-two-sample-results-float32';\n*\n* var x = new Float32Array( [ 4.0, 4.0, 6.0, 6.0, 5.0 ] );\n* var y = new Float32Array( [ 3.0, 3.0, 5.0, 7.0, 7.0 ] );\n*\n* var results = new Results();\n* var out = sztest2( x.length, y.length, 'two-sided', 0.05, 0.0, 1.0, x, 1, 0, 2.0, y, 1, 0, results );\n* // returns {...}\n*\n* var bool = ( out === results );\n* // returns true\n*/\nfunction sztest2( NX, NY, alternative, alpha, diff, sigmax, x, strideX, offsetX, sigmay, y, strideY, offsetY, out ) { // eslint-disable-line max-len, max-params\n\tvar pValue;\n\tvar stderr;\n\tvar xmean;\n\tvar ymean;\n\tvar xvar;\n\tvar yvar;\n\tvar stat;\n\tvar alt;\n\tvar q;\n\n\talt = resolveStr( alternative );\n\tif (\n\t\tNX <= 0 ||\n\t\tNY <= 0 ||\n\t\tisnanf( alpha ) ||\n\t\tisnanf( diff ) ||\n\t\tisnanf( sigmax ) ||\n\t\tisnanf( sigmay ) ||\n\t\tsigmax <= 0.0 ||\n\t\tsigmay <= 0.0 ||\n\t\talpha < 0.0 ||\n\t\talpha > 1.0\n\t) {\n\t\tWORKSPACE[ 0 ] = NaN;\n\t\tWORKSPACE[ 1 ] = NaN;\n\t\tout.rejected = false;\n\t\tout.alternative = alt;\n\t\tout.alpha = NaN;\n\t\tout.pValue = NaN;\n\t\tout.statistic = NaN;\n\t\tout.ci = WORKSPACE;\n\t\tout.nullValue = NaN;\n\t\tout.xmean = NaN;\n\t\tout.ymean = NaN;\n\t\treturn out;\n\t}\n\n\t// \"Cast\" input values to single-precision:\n\talpha = f32( alpha );\n\tdiff = f32( diff );\n\tsigmax = f32( sigmax );\n\tsigmay = f32( sigmay );\n\n\t// Compute the standard error of the mean:\n\txvar = sigmax * sigmax;\n\tyvar = sigmay * sigmay;\n\tstderr = sqrt( ( xvar / NX ) + ( yvar / NY ) );\n\n\t// Compute the arithmetic means of the input arrays:\n\txmean = smean( NX, x, strideX, offsetX );\n\tymean = smean( NY, y, strideY, offsetY );\n\n\t// Compute the test statistic (i.e., the z-score, which is the standardized difference between the sample means of x and y, adjusted by the hypothesized difference, in units of the standard error):\n\tstat = ( xmean - ymean - diff ) / stderr;\n\n\t// Compute the p-value and confidence interval...\n\tif ( alt === 'less' ) {\n\t\tpValue = normalCDF( stat );\n\t\tq = normalQuantile( 1.0 - alpha );\n\t\tWORKSPACE[ 0 ] = NINF;\n\t\tWORKSPACE[ 1 ] = diff + ( ( stat + q ) * stderr );\n\t} else if ( alt === 'greater' ) {\n\t\tpValue = 1.0 - normalCDF( stat );\n\t\tq = normalQuantile( 1.0 - alpha );\n\t\tWORKSPACE[ 0 ] = diff + ( ( stat - q ) * stderr );\n\t\tWORKSPACE[ 1 ] = PINF;\n\t} else { // alt == 'two-sided'\n\t\tpValue = 2.0 * normalCDF( -abs( stat ) );\n\t\tq = normalQuantile( 1.0 - ( alpha / 2.0 ) );\n\t\tWORKSPACE[ 0 ] = diff + ( ( stat - q ) * stderr );\n\t\tWORKSPACE[ 1 ] = diff + ( ( stat + q ) * stderr );\n\t}\n\t// Return test results:\n\tout.rejected = ( pValue <= alpha );\n\tout.alpha = alpha;\n\tout.pValue = f32( pValue );\n\tout.statistic = f32( stat );\n\tout.ci = WORKSPACE;\n\tout.alternative = alt;\n\tout.nullValue = f32( diff );\n\tout.xmean = xmean;\n\tout.ymean = ymean;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default sztest2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport sztest2 from './sztest2.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sztest2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sztest2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes a two-sample Z-test for two single-precision floating-point strided arrays.\n*\n* @param {PositiveInteger} NX - number of indexed elements in `x`\n* @param {PositiveInteger} NY - number of indexed elements in `y`\n* @param {(integer|string)} alternative - alternative hypothesis\n* @param {number} alpha - significance level\n* @param {number} diff - difference in means under the null hypothesis\n* @param {PositiveNumber} sigmax - known standard deviation of `x`\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - stride length for `x`\n* @param {PositiveNumber} sigmay - known standard deviation of `y`\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - stride length for `y`\n* @param {Object} out - output results object\n* @returns {Object} results object\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n* import Results from '@stdlib/stats-base-ztest-two-sample-results-float32';\n*\n* var x = new Float32Array( [ 4.0, 4.0, 6.0, 6.0, 5.0 ] );\n* var y = new Float32Array( [ 3.0, 3.0, 5.0, 7.0, 7.0 ] );\n*\n* var results = new Results();\n* var out = sztest2( x.length, y.length, 'two-sided', 0.05, 0.0, 1.0, x, 1, 2.0, y, 1, results );\n* // returns {...}\n*\n* var bool = ( out === results );\n* // returns true\n*/\nfunction sztest2( NX, NY, alternative, alpha, diff, sigmax, x, strideX, sigmay, y, strideY, out ) { // eslint-disable-line max-len, max-params\n\treturn ndarray( NX, NY, alternative, alpha, diff, sigmax, x, strideX, stride2offset( NX, strideX ), sigmay, y, strideY, stride2offset( NY, strideY ), out ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sztest2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gsumpw( N, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gsumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = x[ ix ];\n\t\ts1 = x[ ix+stride ];\n\t\ts2 = x[ ix+(2*stride) ];\n\t\ts3 = x[ ix+(3*stride) ];\n\t\ts4 = x[ ix+(4*stride) ];\n\t\ts5 = x[ ix+(5*stride) ];\n\t\ts6 = x[ ix+(6*stride) ];\n\t\ts7 = x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += x[ ix ];\n\t\t\ts1 += x[ ix+stride ];\n\t\t\ts2 += x[ ix+(2*stride) ];\n\t\t\ts3 += x[ ix+(3*stride) ];\n\t\t\ts4 += x[ ix+(4*stride) ];\n\t\t\ts5 += x[ ix+(5*stride) ];\n\t\t\ts6 += x[ ix+(6*stride) ];\n\t\t\ts7 += x[ ix+(7*stride) ];\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gsumpw( n, x, stride, ix ) + gsumpw( N-n, x, stride, ix+(n*stride) );\n}\n\n\n// EXPORTS //\n\nexport default gsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements using pairwise summation.\n*\n* @module @stdlib/blas-ext-base-gsumpw\n*\n* @example\n* import gsumpw from '@stdlib/blas-ext-base-gsumpw';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gsumpw( N, x, 1 );\n* // returns 1.0\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor';\n* import gsumpw from '@stdlib/blas-ext-base-gsumpw';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gsumpw.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sum from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gsumpw( N, x, 1 );\n* // returns 1.0\n*/\nfunction gsumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default gsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gapxsumpw( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsumpw( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = alpha + x[ ix ];\n\t\ts1 = alpha + x[ ix+stride ];\n\t\ts2 = alpha + x[ ix+(2*stride) ];\n\t\ts3 = alpha + x[ ix+(3*stride) ];\n\t\ts4 = alpha + x[ ix+(4*stride) ];\n\t\ts5 = alpha + x[ ix+(5*stride) ];\n\t\ts6 = alpha + x[ ix+(6*stride) ];\n\t\ts7 = alpha + x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += alpha + x[ ix ];\n\t\t\ts1 += alpha + x[ ix+stride ];\n\t\t\ts2 += alpha + x[ ix+(2*stride) ];\n\t\t\ts3 += alpha + x[ ix+(3*stride) ];\n\t\t\ts4 += alpha + x[ ix+(4*stride) ];\n\t\t\ts5 += alpha + x[ ix+(5*stride) ];\n\t\t\ts6 += alpha + x[ ix+(6*stride) ];\n\t\t\ts7 += alpha + x[ ix+(7*stride) ];\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gapxsumpw( n, alpha, x, stride, ix ) + gapxsumpw( N-n, alpha, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as gsumpw } from '@stdlib/blas-ext-base-gsumpw';\nimport { ndarray as gapxsumpw } from '@stdlib/blas-ext-base-gapxsumpw';\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a strided array using a two-pass error correction algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} arithmetic mean\n*\n* @example\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = meanpn( 4, x, 2, 1 );\n* // returns 1.25\n*/\nfunction meanpn( N, x, strideX, offsetX ) {\n\tvar mu;\n\tvar c;\n\tvar o;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\treturn x[ offsetX ];\n\t}\n\t// Compute an estimate for the meanpn:\n\tmu = gsumpw( N, x, strideX, offsetX ) / N;\n\n\t// Compute an error term:\n\tc = gapxsumpw( N, -mu, x, strideX, offsetX ) / N;\n\n\treturn mu + c;\n}\n\n\n// EXPORTS //\n\nexport default meanpn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as gsumpw } from '@stdlib/blas-ext-base-gsumpw';\nimport { ndarray as gapxsumpw } from '@stdlib/blas-ext-base-gapxsumpw';\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a strided array using a two-pass error correction algorithm.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} arithmetic mean\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = meanpn( 4, arraylike2object( x ), 2, 1 );\n* // returns 1.25\n*/\nfunction meanpn( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar get;\n\tvar mu;\n\tvar c;\n\n\txbuf = x.data;\n\tget = x.accessors[ 0 ];\n\n\tif ( N === 1 || strideX === 0 ) {\n\t\treturn get( xbuf, offsetX );\n\t}\n\t// Compute an estimate for the meanpn:\n\tmu = gsumpw( N, xbuf, strideX, offsetX ) / N;\n\n\t// Compute an error term:\n\tc = gapxsumpw( N, -mu, xbuf, strideX, offsetX ) / N;\n\n\treturn mu + c;\n}\n\n\n// EXPORTS //\n\nexport default meanpn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a strided array using a two-pass error correction algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} arithmetic mean\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = meanpn( 3, x, 1 );\n* // returns ~0.3333\n*/\nfunction meanpn( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default meanpn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a constant to each strided array element and compute the sum using pairwise summation.\n*\n* @module @stdlib/blas-ext-base-gapxsumpw\n*\n* @example\n* import gapxsumpw from '@stdlib/blas-ext-base-gapxsumpw';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gapxsumpw( N, 5.0, x, 1 );\n* // returns 16.0\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor';\n* import gapxsumpw from '@stdlib/blas-ext-base-gapxsumpw';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = gapxsumpw.ndarray( N, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sum from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a constant to each strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = gapxsumpw( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction gapxsumpw( N, alpha, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, alpha, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default gapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport meanpn from './meanpn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( meanpn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default meanpn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport meanpn from '@stdlib/stats-strided-meanpn';\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} arithmetic mean\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = mean( x.length, x, 1 );\n* // returns ~0.3333\n*/\nfunction mean( N, x, strideX ) {\n\treturn meanpn( N, x, strideX );\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport mean from './mean.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( mean, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as meanpn } from '@stdlib/stats-strided-meanpn';\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} arithmetic mean\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = mean( 4, x, 2, 1 );\n* // returns 1.25\n*/\nfunction mean( N, x, strideX, offsetX ) {\n\treturn meanpn( N, x, strideX, offsetX );\n}\n\n\n// EXPORTS //\n\nexport default mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport resolveStr from '@stdlib/stats-base-ztest-alternative-resolve-str';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport { factory as quantile } from '@stdlib/stats-base-dists-normal-quantile';\nimport { factory as cdf } from '@stdlib/stats-base-dists-normal-cdf';\nimport { ndarray as mean } from '@stdlib/stats-strided-mean';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport Float64Array from '@stdlib/array-float64';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// VARIABLES //\n\nvar normalCDF = cdf( 0.0, 1.0 );\nvar normalQuantile = quantile( 0.0, 1.0 );\n\n// Initialize a workspace for storing confidence intervals:\nvar WORKSPACE = new Float64Array( 2 );\n\n\n// MAIN //\n\n/**\n* Computes a one-sample Z-test for a strided array using alternative indexing semantics.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {(integer|string)} alternative - alternative hypothesis\n* @param {number} alpha - significance level\n* @param {number} mu - mean under the null hypothesis\n* @param {PositiveNumber} sigma - known standard deviation\n* @param {Collection} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @param {Object} out - output results object\n* @returns {Object} results object\n*\n* @example\n* import Results from '@stdlib/stats-base-ztest-one-sample-results-float64';\n*\n* var x = [ 4.0, 4.0, 6.0, 6.0, 5.0 ];\n*\n* var results = new Results();\n* var out = ztest( x.length, 'two-sided', 0.05, 0.0, 1.0, x, 1, 0, results );\n* // returns {...}\n*\n* var bool = ( out === results );\n* // returns true\n*/\nfunction ztest( N, alternative, alpha, mu, sigma, x, strideX, offsetX, out ) {\n\tvar pValue;\n\tvar stderr;\n\tvar xmean;\n\tvar stat;\n\tvar alt;\n\tvar q;\n\n\talt = resolveStr( alternative );\n\tif (\n\t\tN <= 0 ||\n\t\tisnan( alpha ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0 ||\n\t\talpha < 0.0 ||\n\t\talpha > 1.0\n\t) {\n\t\tWORKSPACE[ 0 ] = NaN;\n\t\tWORKSPACE[ 1 ] = NaN;\n\t\tout.rejected = false;\n\t\tout.alternative = alt;\n\t\tout.alpha = NaN;\n\t\tout.pValue = NaN;\n\t\tout.statistic = NaN;\n\t\tout.ci = WORKSPACE;\n\t\tout.nullValue = NaN;\n\t\tout.sd = NaN;\n\t\treturn out;\n\t}\n\t// Compute the standard error of the mean:\n\tstderr = sigma / sqrt( N );\n\n\t// Compute the arithmetic mean of the input array:\n\txmean = mean( N, x, strideX, offsetX );\n\n\t// Compute the test statistic (i.e., the z-score, which is the distance of the sample mean from the population mean in units of standard error):\n\tstat = ( xmean - mu ) / stderr;\n\n\t// Compute the p-value and confidence interval...\n\tif ( alt === 'less' ) {\n\t\tpValue = normalCDF( stat );\n\t\tq = normalQuantile( 1.0-alpha );\n\t\tWORKSPACE[ 0 ] = NINF;\n\t\tWORKSPACE[ 1 ] = mu + ( (stat+q)*stderr );\n\t} else if ( alt === 'greater' ) {\n\t\tpValue = 1.0 - normalCDF( stat );\n\t\tq = normalQuantile( 1.0-alpha );\n\t\tWORKSPACE[ 0 ] = mu + ( (stat-q)*stderr );\n\t\tWORKSPACE[ 1 ] = PINF;\n\t} else { // alt == 'two-sided'\n\t\tpValue = 2.0 * normalCDF( -abs( stat ) );\n\t\tq = normalQuantile( 1.0-(alpha/2.0) );\n\t\tWORKSPACE[ 0 ] = mu + ( (stat-q)*stderr );\n\t\tWORKSPACE[ 1 ] = mu + ( (stat+q)*stderr );\n\t}\n\t// Return test results:\n\tout.rejected = ( pValue <= alpha );\n\tout.alternative = alt;\n\tout.alpha = alpha;\n\tout.pValue = pValue;\n\tout.statistic = stat;\n\tout.ci = WORKSPACE;\n\tout.nullValue = mu;\n\tout.sd = stderr;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default ztest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a one-sample Z-test for a strided array.\n*\n* @module @stdlib/stats-strided-ztest\n*\n* @example\n* import Results from '@stdlib/stats-base-ztest-one-sample-results-float64';\n* import ztest from '@stdlib/stats-strided-ztest';\n*\n* var x = [ 4.0, 4.0, 6.0, 6.0, 5.0 ];\n*\n* var results = new Results();\n* var out = ztest( x.length, 'two-sided', 0.05, 0.0, 1.0, x, 1, results );\n* // returns {...}\n*\n* var bool = ( out === results );\n* // returns true\n*\n* @example\n* import Results from '@stdlib/stats-base-ztest-one-sample-results-float64';\n* import ztest from '@stdlib/stats-strided-ztest';\n*\n* var x = [ 4.0, 4.0, 6.0, 6.0, 5.0 ];\n*\n* var results = new Results();\n* var out = ztest.ndarray( x.length, 'two-sided', 0.05, 0.0, 1.0, x, 1, 0, results );\n* // returns {...}\n*\n* var bool = ( out === results );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes a one-sample Z-test for a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {(integer|string)} alternative - alternative hypothesis\n* @param {number} alpha - significance level\n* @param {number} mu - mean under the null hypothesis\n* @param {PositiveNumber} sigma - known standard deviation\n* @param {Collection} x - input array\n* @param {integer} strideX - stride length\n* @param {Object} out - output results object\n* @returns {Object} results object\n*\n* @example\n* import Results from '@stdlib/stats-base-ztest-one-sample-results-float64';\n*\n* var x = [ 4.0, 4.0, 6.0, 6.0, 5.0 ];\n*\n* var results = new Results();\n* var out = ztest( x.length, 'two-sided', 0.05, 0.0, 1.0, x, 1, results );\n* // returns {...}\n*\n* var bool = ( out === results );\n* // returns true\n*/\nfunction ztest( N, alternative, alpha, mu, sigma, x, strideX, out ) {\n\treturn ndarray( N, alternative, alpha, mu, sigma, x, strideX, stride2offset( N, strideX ), out ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default ztest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport resolveStr from '@stdlib/stats-base-ztest-alternative-resolve-str';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport { factory as quantile } from '@stdlib/stats-base-dists-normal-quantile';\nimport { factory as cdf } from '@stdlib/stats-base-dists-normal-cdf';\nimport { ndarray as mean } from '@stdlib/stats-strided-mean';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport Float64Array from '@stdlib/array-float64';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// VARIABLES //\n\nvar normalCDF = cdf( 0.0, 1.0 );\nvar normalQuantile = quantile( 0.0, 1.0 );\n\n// Initialize a workspace for storing confidence intervals:\nvar WORKSPACE = new Float64Array( 2 );\n\n\n// MAIN //\n\n/**\n* Computes a two-sample Z-test using alternative indexing semantics.\n*\n* @param {PositiveInteger} NX - number of indexed elements in `x`\n* @param {PositiveInteger} NY - number of indexed elements in `y`\n* @param {(integer|string)} alternative - alternative hypothesis\n* @param {number} alpha - significance level\n* @param {number} diff - difference in means under the null hypothesis\n* @param {PositiveNumber} sigmax - known standard deviation of `x`\n* @param {Collection} x - first input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {PositiveNumber} sigmay - known standard deviation of `y`\n* @param {Collection} y - second input array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @param {Object} out - output results object\n* @returns {Object} results object\n*\n* @example\n* import Results from '@stdlib/stats-base-ztest-two-sample-results-float64';\n*\n* var x = [ 4.0, 4.0, 6.0, 6.0, 5.0 ];\n* var y = [ 3.0, 3.0, 5.0, 7.0, 7.0 ];\n*\n* var results = new Results();\n* var out = ztest2( x.length, y.length, 'two-sided', 0.05, 0.0, 1.0, x, 1, 0, 2.0, y, 1, 0, results );\n* // returns {...}\n*\n* var bool = ( out === results );\n* // returns true\n*/\nfunction ztest2( NX, NY, alternative, alpha, diff, sigmax, x, strideX, offsetX, sigmay, y, strideY, offsetY, out ) { // eslint-disable-line max-len, max-params\n\tvar pValue;\n\tvar stderr;\n\tvar xmean;\n\tvar ymean;\n\tvar xvar;\n\tvar yvar;\n\tvar stat;\n\tvar alt;\n\tvar q;\n\n\talt = resolveStr( alternative );\n\tif (\n\t\tNX <= 0 ||\n\t\tNY <= 0 ||\n\t\tisnan( alpha ) ||\n\t\tisnan( diff ) ||\n\t\tisnan( sigmax ) ||\n\t\tisnan( sigmay ) ||\n\t\tsigmax <= 0.0 ||\n\t\tsigmay <= 0.0 ||\n\t\talpha < 0.0 ||\n\t\talpha > 1.0\n\t) {\n\t\tWORKSPACE[ 0 ] = NaN;\n\t\tWORKSPACE[ 1 ] = NaN;\n\t\tout.rejected = false;\n\t\tout.alternative = alt;\n\t\tout.alpha = NaN;\n\t\tout.pValue = NaN;\n\t\tout.statistic = NaN;\n\t\tout.ci = WORKSPACE;\n\t\tout.nullValue = NaN;\n\t\tout.xmean = NaN;\n\t\tout.ymean = NaN;\n\t\treturn out;\n\t}\n\t// Compute the standard error of the mean:\n\txvar = sigmax * sigmax;\n\tyvar = sigmay * sigmay;\n\tstderr = sqrt( ( xvar / NX ) + ( yvar / NY ) );\n\n\t// Compute the arithmetic means of the input arrays:\n\txmean = mean( NX, x, strideX, offsetX );\n\tymean = mean( NY, y, strideY, offsetY );\n\n\t// Compute the test statistic (i.e., the z-score, which is the standardized difference between the sample means of x and y, adjusted by the hypothesized difference, in units of the standard error):\n\tstat = ( xmean - ymean - diff ) / stderr;\n\n\t// Compute the p-value and confidence interval...\n\tif ( alt === 'less' ) {\n\t\tpValue = normalCDF( stat );\n\t\tq = normalQuantile( 1.0 - alpha );\n\t\tWORKSPACE[ 0 ] = NINF;\n\t\tWORKSPACE[ 1 ] = diff + ( ( stat + q ) * stderr );\n\t} else if ( alt === 'greater' ) {\n\t\tpValue = 1.0 - normalCDF( stat );\n\t\tq = normalQuantile( 1.0 - alpha );\n\t\tWORKSPACE[ 0 ] = diff + ( ( stat - q ) * stderr );\n\t\tWORKSPACE[ 1 ] = PINF;\n\t} else { // alt == 'two-sided'\n\t\tpValue = 2.0 * normalCDF( -abs( stat ) );\n\t\tq = normalQuantile( 1.0 - ( alpha / 2.0 ) );\n\t\tWORKSPACE[ 0 ] = diff + ( ( stat - q ) * stderr );\n\t\tWORKSPACE[ 1 ] = diff + ( ( stat + q ) * stderr );\n\t}\n\t// Return test results:\n\tout.rejected = ( pValue <= alpha );\n\tout.alpha = alpha;\n\tout.pValue = pValue;\n\tout.statistic = stat;\n\tout.ci = WORKSPACE;\n\tout.alternative = alt;\n\tout.nullValue = diff;\n\tout.xmean = xmean;\n\tout.ymean = ymean;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default ztest2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a two-sample Z-test.\n*\n* @module @stdlib/stats-strided-ztest2\n*\n* @example\n* import Results from '@stdlib/stats-base-ztest-two-sample-results-float64';\n* import ztest2 from '@stdlib/stats-strided-ztest2';\n*\n* var x = [ 4.0, 4.0, 6.0, 6.0, 5.0 ];\n* var y = [ 3.0, 3.0, 5.0, 7.0, 7.0 ];\n*\n* var results = new Results();\n* var out = ztest2( x.length, y.length, 'two-sided', 0.05, 0.0, 1.0, x, 1, 2.0, y, 1, results );\n* // returns {...}\n*\n* var bool = ( out === results );\n* // returns true\n*\n* @example\n* import Results from '@stdlib/stats-base-ztest-two-sample-results-float64';\n* import ztest2 from '@stdlib/stats-strided-ztest2';\n*\n* var x = [ 4.0, 4.0, 6.0, 6.0, 5.0 ];\n* var y = [ 3.0, 3.0, 5.0, 7.0, 7.0 ];\n*\n* var results = new Results();\n* var out = ztest2.ndarray( x.length, y.length, 'two-sided', 0.05, 0.0, 1.0, x, 1, 0, 2.0, y, 1, 0, results );\n* // returns {...}\n*\n* var bool = ( out === results );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes a two-sample Z-test.\n*\n* @param {PositiveInteger} NX - number of indexed elements in `x`\n* @param {PositiveInteger} NY - number of indexed elements in `y`\n* @param {(integer|string)} alternative - alternative hypothesis\n* @param {number} alpha - significance level\n* @param {number} diff - difference in means under the null hypothesis\n* @param {PositiveNumber} sigmax - known standard deviation of `x`\n* @param {Collection} x - first input array\n* @param {integer} strideX - stride length for `x`\n* @param {PositiveNumber} sigmay - known standard deviation of `y`\n* @param {Collection} y - second input array\n* @param {integer} strideY - stride length for `y`\n* @param {Object} out - output results object\n* @returns {Object} results object\n*\n* @example\n* import Results from '@stdlib/stats-base-ztest-two-sample-results-float64';\n*\n* var x = [ 4.0, 4.0, 6.0, 6.0, 5.0 ];\n* var y = [ 3.0, 3.0, 5.0, 7.0, 7.0 ];\n*\n* var results = new Results();\n* var out = ztest2( x.length, y.length, 'two-sided', 0.05, 0.0, 1.0, x, 1, 2.0, y, 1, results );\n* // returns {...}\n*\n* var bool = ( out === results );\n* // returns true\n*/\nfunction ztest2( NX, NY, alternative, alpha, diff, sigmax, x, strideX, sigmay, y, strideY, out ) { // eslint-disable-line max-len, max-params\n\treturn ndarray( NX, NY, alternative, alpha, diff, sigmax, x, strideX, stride2offset( NX, strideX ), sigmay, y, strideY, stride2offset( NY, strideY ), out ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default ztest2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name cumax\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/ndarray/cumax}\n*/\nimport cumax from '@stdlib/stats-base-ndarray-cumax';\nsetReadOnly( ns, 'cumax', cumax );\n\n/**\n* @name cumin\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/ndarray/cumin}\n*/\nimport cumin from '@stdlib/stats-base-ndarray-cumin';\nsetReadOnly( ns, 'cumin', cumin );\n\n/**\n* @name dcumax\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/ndarray/dcumax}\n*/\nimport dcumax from '@stdlib/stats-base-ndarray-dcumax';\nsetReadOnly( ns, 'dcumax', dcumax );\n\n/**\n* @name dcumin\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/ndarray/dcumin}\n*/\nimport dcumin from '@stdlib/stats-base-ndarray-dcumin';\nsetReadOnly( ns, 'dcumin', dcumin );\n\n/**\n* @name dmax\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/ndarray/dmax}\n*/\nimport dmax from '@stdlib/stats-base-ndarray-dmax';\nsetReadOnly( ns, 'dmax', dmax );\n\n/**\n* @name dmin\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/ndarray/dmin}\n*/\nimport dmin from '@stdlib/stats-base-ndarray-dmin';\nsetReadOnly( ns, 'dmin', dmin );\n\n/**\n* @name drange\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/ndarray/drange}\n*/\nimport drange from '@stdlib/stats-base-ndarray-drange';\nsetReadOnly( ns, 'drange', drange );\n\n/**\n* @name dztest\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/ndarray/dztest}\n*/\nimport dztest from '@stdlib/stats-base-ndarray-dztest';\nsetReadOnly( ns, 'dztest', dztest );\n\n/**\n* @name dztest2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/ndarray/dztest2}\n*/\nimport dztest2 from '@stdlib/stats-base-ndarray-dztest2';\nsetReadOnly( ns, 'dztest2', dztest2 );\n\n/**\n* @name max\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/ndarray/max}\n*/\nimport max from '@stdlib/stats-base-ndarray-max';\nsetReadOnly( ns, 'max', max );\n\n/**\n* @name maxBy\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/ndarray/max-by}\n*/\nimport maxBy from '@stdlib/stats-base-ndarray-max-by';\nsetReadOnly( ns, 'maxBy', maxBy );\n\n/**\n* @name min\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/ndarray/min}\n*/\nimport min from '@stdlib/stats-base-ndarray-min';\nsetReadOnly( ns, 'min', min );\n\n/**\n* @name minBy\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/ndarray/min-by}\n*/\nimport minBy from '@stdlib/stats-base-ndarray-min-by';\nsetReadOnly( ns, 'minBy', minBy );\n\n/**\n* @name range\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/ndarray/range}\n*/\nimport range from '@stdlib/stats-base-ndarray-range';\nsetReadOnly( ns, 'range', range );\n\n/**\n* @name scumax\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/ndarray/scumax}\n*/\nimport scumax from '@stdlib/stats-base-ndarray-scumax';\nsetReadOnly( ns, 'scumax', scumax );\n\n/**\n* @name scumin\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/ndarray/scumin}\n*/\nimport scumin from '@stdlib/stats-base-ndarray-scumin';\nsetReadOnly( ns, 'scumin', scumin );\n\n/**\n* @name smax\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/ndarray/smax}\n*/\nimport smax from '@stdlib/stats-base-ndarray-smax';\nsetReadOnly( ns, 'smax', smax );\n\n/**\n* @name smin\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/ndarray/smin}\n*/\nimport smin from '@stdlib/stats-base-ndarray-smin';\nsetReadOnly( ns, 'smin', smin );\n\n/**\n* @name srange\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/ndarray/srange}\n*/\nimport srange from '@stdlib/stats-base-ndarray-srange';\nsetReadOnly( ns, 'srange', srange );\n\n/**\n* @name sztest\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/ndarray/sztest}\n*/\nimport sztest from '@stdlib/stats-base-ndarray-sztest';\nsetReadOnly( ns, 'sztest', sztest );\n\n/**\n* @name sztest2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/ndarray/sztest2}\n*/\nimport sztest2 from '@stdlib/stats-base-ndarray-sztest2';\nsetReadOnly( ns, 'sztest2', sztest2 );\n\n/**\n* @name ztest\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/ndarray/ztest}\n*/\nimport ztest from '@stdlib/stats-base-ndarray-ztest';\nsetReadOnly( ns, 'ztest', ztest );\n\n/**\n* @name ztest2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/base/ndarray/ztest2}\n*/\nimport ztest2 from '@stdlib/stats-base-ndarray-ztest2';\nsetReadOnly( ns, 'ztest2', ztest2 );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numelDimension from '@stdlib/ndarray-base-numel-dimension';\nimport getStride from '@stdlib/ndarray-base-stride';\nimport getOffset from '@stdlib/ndarray-base-offset';\nimport getData from '@stdlib/ndarray-base-data-buffer';\nimport { ndarray as strided } from '@stdlib/stats-base-cumax';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative maximum value of a one-dimensional ndarray.\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing an input ndarray and an output ndarray\n* @returns {ndarrayLike} output ndarray\n*\n* @example\n* import ndarray2array from '@stdlib/ndarray-to-array';\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var xbuf = [ 1.0, 3.0, 4.0, 2.0 ];\n* var x = new ndarray( 'generic', xbuf, [ 4 ], [ 1 ], 0, 'row-major' );\n*\n* var ybuf = [ 0.0, 0.0, 0.0, 0.0 ];\n* var y = new ndarray( 'generic', xbuf, [ 4 ], [ 1 ], 0, 'row-major' );\n*\n* var v = cumax( [ x, y ] );\n* // returns <ndarray>\n*\n* var bool = ( v === y );\n* // returns true\n*\n* var arr = ndarray2array( v );\n* // returns [ 1.0, 3.0, 4.0, 4.0 ]\n*/\nfunction cumax( arrays ) {\n\tvar x = arrays[ 0 ];\n\tvar y = arrays[ 1 ];\n\tstrided( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default cumax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numelDimension from '@stdlib/ndarray-base-numel-dimension';\nimport getStride from '@stdlib/ndarray-base-stride';\nimport getOffset from '@stdlib/ndarray-base-offset';\nimport getData from '@stdlib/ndarray-base-data-buffer';\nimport { ndarray as strided } from '@stdlib/stats-base-cumin';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative minimum value of a one-dimensional ndarray.\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing an input ndarray and an output ndarray\n* @returns {ndarrayLike} output ndarray\n*\n* @example\n* import ndarray2array from '@stdlib/ndarray-to-array';\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var xbuf = [ 1.0, 3.0, 4.0, 2.0 ];\n* var x = new ndarray( 'generic', xbuf, [ 4 ], [ 1 ], 0, 'row-major' );\n*\n* var ybuf = [ 0.0, 0.0, 0.0, 0.0 ];\n* var y = new ndarray( 'generic', xbuf, [ 4 ], [ 1 ], 0, 'row-major' );\n*\n* var v = cumin( [ x, y ] );\n* // returns <ndarray>\n*\n* var bool = ( v === y );\n* // returns true\n*\n* var arr = ndarray2array( v );\n* // returns [ 1.0, 1.0, 1.0, 1.0 ]\n*/\nfunction cumin( arrays ) {\n\tvar x = arrays[ 0 ];\n\tvar y = arrays[ 1 ];\n\tstrided( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default cumin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numelDimension from '@stdlib/ndarray-base-numel-dimension';\nimport getStride from '@stdlib/ndarray-base-stride';\nimport getOffset from '@stdlib/ndarray-base-offset';\nimport getData from '@stdlib/ndarray-base-data-buffer';\nimport { ndarray as strided } from '@stdlib/stats-strided-dcumax';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative maximum value of a one-dimensional double-precision floating-point ndarray.\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing an input ndarray and an output ndarray\n* @returns {ndarrayLike} output ndarray\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var xbuf = new Float64Array( [ 1.0, 3.0, 4.0, 2.0 ] );\n* var x = new ndarray( 'float64', xbuf, [ 4 ], [ 1 ], 0, 'row-major' );\n*\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\n* var y = new ndarray( 'float64', xbuf, [ 4 ], [ 1 ], 0, 'row-major' );\n*\n* var v = dcumax( [ x, y ] );\n* // returns <ndarray>\n*\n* var bool = ( v === y );\n* // returns true\n*\n* var arr = ndarray2array( v );\n* // returns [ 1.0, 3.0, 4.0, 4.0 ]\n*/\nfunction dcumax( arrays ) {\n\tvar x = arrays[ 0 ];\n\tvar y = arrays[ 1 ];\n\tstrided( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcumax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numelDimension from '@stdlib/ndarray-base-numel-dimension';\nimport getStride from '@stdlib/ndarray-base-stride';\nimport getOffset from '@stdlib/ndarray-base-offset';\nimport getData from '@stdlib/ndarray-base-data-buffer';\nimport { ndarray as strided } from '@stdlib/stats-strided-dcumin';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative minimum value of a one-dimensional double-precision floating-point ndarray.\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing an input ndarray and an output ndarray\n* @returns {ndarrayLike} output ndarray\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var xbuf = new Float64Array( [ 1.0, 3.0, 4.0, 2.0 ] );\n* var x = new ndarray( 'float64', xbuf, [ 4 ], [ 1 ], 0, 'row-major' );\n*\n* var ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\n* var y = new ndarray( 'float64', xbuf, [ 4 ], [ 1 ], 0, 'row-major' );\n*\n* var v = dcumin( [ x, y ] );\n* // returns <ndarray>\n*\n* var bool = ( v === y );\n* // returns true\n*\n* var arr = ndarray2array( v );\n* // returns [ 1.0, 1.0, 1.0, 1.0 ]\n*/\nfunction dcumin( arrays ) {\n\tvar x = arrays[ 0 ];\n\tvar y = arrays[ 1 ];\n\tstrided( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default dcumin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numelDimension from '@stdlib/ndarray-base-numel-dimension';\nimport getStride from '@stdlib/ndarray-base-stride';\nimport getOffset from '@stdlib/ndarray-base-offset';\nimport getData from '@stdlib/ndarray-base-data-buffer';\nimport { ndarray as strided } from '@stdlib/stats-strided-dmax';\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a one-dimensional double-precision floating-point ndarray.\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing an input ndarray\n* @returns {number} maximum value\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var xbuf = new Float64Array( [ 1.0, 3.0, 4.0, 2.0 ] );\n* var x = new ndarray( 'float64', xbuf, [ 4 ], [ 1 ], 0, 'row-major' );\n*\n* var v = dmax( [ x ] );\n* // returns 4.0\n*/\nfunction dmax( arrays ) {\n\tvar x = arrays[ 0 ];\n\treturn strided( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numelDimension from '@stdlib/ndarray-base-numel-dimension';\nimport getStride from '@stdlib/ndarray-base-stride';\nimport getOffset from '@stdlib/ndarray-base-offset';\nimport getData from '@stdlib/ndarray-base-data-buffer';\nimport { ndarray as strided } from '@stdlib/stats-strided-dmin';\n\n\n// MAIN //\n\n/**\n* Computes the minimum value of a one-dimensional double-precision floating-point ndarray.\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing an input ndarray\n* @returns {number} minimum value\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var xbuf = new Float64Array( [ 1.0, 3.0, 4.0, 2.0 ] );\n* var x = new ndarray( 'float64', xbuf, [ 4 ], [ 1 ], 0, 'row-major' );\n*\n* var v = dmin( [ x ] );\n* // returns 1.0\n*/\nfunction dmin( arrays ) {\n\tvar x = arrays[ 0 ];\n\treturn strided( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dmin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numelDimension from '@stdlib/ndarray-base-numel-dimension';\nimport getStride from '@stdlib/ndarray-base-stride';\nimport getOffset from '@stdlib/ndarray-base-offset';\nimport getData from '@stdlib/ndarray-base-data-buffer';\nimport { ndarray as strided } from '@stdlib/stats-strided-drange';\n\n\n// MAIN //\n\n/**\n* Computes the range of a one-dimensional double-precision floating-point ndarray.\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing an input ndarray\n* @returns {number} range\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var xbuf = new Float64Array( [ 1.0, 3.0, 4.0, 2.0 ] );\n* var x = new ndarray( 'float64', xbuf, [ 4 ], [ 1 ], 0, 'row-major' );\n*\n* var v = drange( [ x ] );\n* // returns 3.0\n*/\nfunction drange( arrays ) {\n\tvar x = arrays[ 0 ];\n\treturn strided( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default drange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numelDimension from '@stdlib/ndarray-base-numel-dimension';\nimport getStride from '@stdlib/ndarray-base-stride';\nimport getOffset from '@stdlib/ndarray-base-offset';\nimport getData from '@stdlib/ndarray-base-data-buffer';\nimport ndarraylike2scalar from '@stdlib/ndarray-base-ndarraylike2scalar';\nimport { ndarray as strided } from '@stdlib/stats-strided-dztest';\n\n\n// MAIN //\n\n/**\n* Computes a one-sample Z-test for a one-dimensional double-precision floating-point ndarray.\n*\n* ## Notes\n*\n* -   The function expects the following ndarrays in order:\n*\n*     -   a one-dimensional input ndarray.\n*     -   a zero-dimensional output ndarray containing a results object.\n*     -   a zero-dimensional ndarray specifying the alternative hypothesis.\n*     -   a zero-dimensional ndarray specifying the significance level.\n*     -   a zero-dimensional ndarray specifying the mean under the null hypothesis.\n*     -   a zero-dimensional ndarray specifying the known standard deviation.\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing ndarrays\n* @returns {ndarrayLike} output ndarray\n*\n* @example\n* import Float64Results from '@stdlib/stats-base-ztest-one-sample-results-float64';\n* import resolveEnum from '@stdlib/stats-base-ztest-alternative-resolve-enum';\n* import structFactory from '@stdlib/array-struct-factory';\n* import Float64Array from '@stdlib/array-float64';\n* import scalar2ndarray from '@stdlib/ndarray-from-scalar';\n* import ndarray from '@stdlib/ndarray-ctor';\n*\n* var opts = {\n*     'dtype': 'float64'\n* };\n*\n* // Define a one-dimensional input ndarray:\n* var xbuf = new Float64Array( [ 1.0, 3.0, 4.0, 2.0 ] );\n* var x = new ndarray( opts.dtype, xbuf, [ 4 ], [ 1 ], 0, 'row-major' );\n*\n* // Specify the alternative hypothesis:\n* var alt = scalar2ndarray( resolveEnum( 'two-sided' ), {\n*     'dtype': 'int8'\n* });\n*\n* // Specify the significance level:\n* var alpha = scalar2ndarray( 0.05, opts );\n*\n* // Specify the mean value under the null hypothesis:\n* var mu = scalar2ndarray( 0.0, opts );\n*\n* // Specify the known standard deviation:\n* var sigma = scalar2ndarray( 1.0, opts );\n*\n* // Create a zero-dimensional results ndarray:\n* var ResultsArray = structFactory( Float64Results );\n* var out = new ndarray( Float64Results, new ResultsArray( 1 ), [], [ 0 ], 0, 'row-major' );\n*\n* // Perform a Z-test:\n* var v = dztest( [ x, out, alt, alpha, mu, sigma ] );\n* // returns <ResultsArray>\n*\n* console.log( v.get().toString() );\n*/\nfunction dztest( arrays ) {\n\tvar alpha;\n\tvar sigma;\n\tvar alt;\n\tvar mu;\n\tvar x;\n\tvar y;\n\n\tx = arrays[ 0 ];\n\ty = ndarraylike2scalar( arrays[ 1 ] );\n\n\talt = ndarraylike2scalar( arrays[ 2 ] );\n\talpha = ndarraylike2scalar( arrays[ 3 ] );\n\tmu = ndarraylike2scalar( arrays[ 4 ] );\n\tsigma = ndarraylike2scalar( arrays[ 5 ] );\n\n\tstrided( numelDimension( x, 0 ), alt, alpha, mu, sigma, getData( x ), getStride( x, 0 ), getOffset( x ), y ); // eslint-disable-line max-len\n\n\treturn arrays[ 1 ];\n}\n\n\n// EXPORTS //\n\nexport default dztest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numelDimension from '@stdlib/ndarray-base-numel-dimension';\nimport getStride from '@stdlib/ndarray-base-stride';\nimport getOffset from '@stdlib/ndarray-base-offset';\nimport getData from '@stdlib/ndarray-base-data-buffer';\nimport ndarraylike2scalar from '@stdlib/ndarray-base-ndarraylike2scalar';\nimport { ndarray as strided } from '@stdlib/stats-strided-dztest2';\n\n\n// MAIN //\n\n/**\n* Computes a two-sample Z-test for two one-dimensional double-precision floating-point ndarrays.\n*\n* ## Notes\n*\n* -   The function expects the following ndarrays in order:\n*\n*     -   first one-dimensional input ndarray.\n*     -   second one-dimensional input ndarray.\n*     -   a zero-dimensional output ndarray containing a results object.\n*     -   a zero-dimensional ndarray specifying the alternative hypothesis.\n*     -   a zero-dimensional ndarray specifying the significance level.\n*     -   a zero-dimensional ndarray specifying the difference in means under the null hypothesis.\n*     -   a zero-dimensional ndarray specifying the known standard deviation of the first one-dimensional input ndarray.\n*     -   a zero-dimensional ndarray specifying the known standard deviation of the second one-dimensional input ndarray.\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing ndarrays\n* @returns {ndarrayLike} output ndarray\n*\n* @example\n* import Float64Results from '@stdlib/stats-base-ztest-two-sample-results-float64';\n* import resolveEnum from '@stdlib/stats-base-ztest-alternative-resolve-enum';\n* import structFactory from '@stdlib/array-struct-factory';\n* import Float64Array from '@stdlib/array-float64';\n* import scalar2ndarray from '@stdlib/ndarray-from-scalar';\n* import ndarray from '@stdlib/ndarray-ctor';\n*\n* var opts = {\n*     'dtype': 'float64'\n* };\n*\n* // Define one-dimensional input ndarrays:\n* var xbuf = new Float64Array( [ 4.0, 4.0, 6.0, 6.0, 5.0 ] );\n* var x = new ndarray( opts.dtype, xbuf, [ 5 ], [ 1 ], 0, 'row-major' );\n*\n* var ybuf = new Float64Array( [ 3.0, 3.0, 5.0, 7.0, 7.0 ] );\n* var y = new ndarray( opts.dtype, ybuf, [ 5 ], [ 1 ], 0, 'row-major' );\n*\n* // Specify the alternative hypothesis:\n* var alt = scalar2ndarray( resolveEnum( 'two-sided' ), {\n*     'dtype': 'int8'\n* });\n*\n* // Specify the significance level:\n* var alpha = scalar2ndarray( 0.05, opts );\n*\n* // Specify the difference in means under the null hypothesis:\n* var diff = scalar2ndarray( 0.0, opts );\n*\n* // Specify the known standard deviations:\n* var sigmax = scalar2ndarray( 1.0, opts );\n* var sigmay = scalar2ndarray( 2.0, opts );\n*\n* // Create a zero-dimensional results ndarray:\n* var ResultsArray = structFactory( Float64Results );\n* var out = new ndarray( Float64Results, new ResultsArray( 1 ), [], [ 0 ], 0, 'row-major' );\n*\n* // Perform a Z-test:\n* var v = dztest2( [ x, y, out, alt, alpha, diff, sigmax, sigmay ] );\n* // returns <ResultsArray>\n*\n* console.log( v.get().toString() );\n*/\nfunction dztest2( arrays ) {\n\tvar sigmax;\n\tvar sigmay;\n\tvar alpha;\n\tvar diff;\n\tvar alt;\n\tvar out;\n\tvar x;\n\tvar y;\n\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\tout = ndarraylike2scalar( arrays[ 2 ] );\n\n\talt = ndarraylike2scalar( arrays[ 3 ] );\n\talpha = ndarraylike2scalar( arrays[ 4 ] );\n\tdiff = ndarraylike2scalar( arrays[ 5 ] );\n\tsigmax = ndarraylike2scalar( arrays[ 6 ] );\n\tsigmay = ndarraylike2scalar( arrays[ 7 ] );\n\n\tstrided( numelDimension( x, 0 ), numelDimension( y, 0 ), alt, alpha, diff, sigmax, getData( x ), getStride( x, 0 ), getOffset( x ), sigmay, getData( y ), getStride( y, 0 ), getOffset( y ), out ); // eslint-disable-line max-len\n\n\treturn arrays[ 2 ];\n}\n\n\n// EXPORTS //\n\nexport default dztest2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numelDimension from '@stdlib/ndarray-base-numel-dimension';\nimport getStride from '@stdlib/ndarray-base-stride';\nimport getOffset from '@stdlib/ndarray-base-offset';\nimport getData from '@stdlib/ndarray-base-data-buffer';\nimport { ndarray as strided } from '@stdlib/stats-strided-max';\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a one-dimensional ndarray.\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing an input ndarray\n* @returns {number} maximum value\n*\n* @example\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var xbuf = [ 1.0, 3.0, 4.0, 2.0 ];\n* var x = new ndarray( 'generic', xbuf, [ 4 ], [ 1 ], 0, 'row-major' );\n*\n* var v = max( [ x ] );\n* // returns 4.0\n*/\nfunction max( arrays ) {\n\tvar x = arrays[ 0 ];\n\treturn strided( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default max;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numelDimension from '@stdlib/ndarray-base-numel-dimension';\nimport getStride from '@stdlib/ndarray-base-stride';\nimport getOffset from '@stdlib/ndarray-base-offset';\nimport getData from '@stdlib/ndarray-base-data-buffer';\nimport { ndarray as strided } from '@stdlib/stats-strided-max-by';\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a one-dimensional ndarray via a callback function.\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing an input ndarray\n* @param {Function} clbk - callback function\n* @param {*} [thisArg] - callback execution context\n* @returns {number} maximum value\n*\n* @example\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* var xbuf = [ 1.0, 3.0, 4.0, 2.0 ];\n* var x = new ndarray( 'generic', xbuf, [ 4 ], [ 1 ], 0, 'row-major' );\n*\n* var v = maxBy( [ x ], clbk );\n* // returns 8.0\n*/\nfunction maxBy( arrays, clbk, thisArg ) {\n\tvar x = arrays[ 0 ];\n\treturn strided( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ), wrapper, null ); // eslint-disable-line max-len\n\n\t/**\n\t* Invokes a provided callback.\n\t*\n\t* @private\n\t* @param {*} value - current array element\n\t* @param {NonNegativeInteger} aidx - current array element index\n\t* @param {NonNegativeInteger} sidx - current strided array element index\n\t* @param {Collection} arr - input array\n\t* @returns {*} result\n\t*/\n\tfunction wrapper( value, aidx ) {\n\t\treturn clbk.call( thisArg, value, aidx, x );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default maxBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numelDimension from '@stdlib/ndarray-base-numel-dimension';\nimport getStride from '@stdlib/ndarray-base-stride';\nimport getOffset from '@stdlib/ndarray-base-offset';\nimport getData from '@stdlib/ndarray-base-data-buffer';\nimport { ndarray as strided } from '@stdlib/stats-strided-min';\n\n\n// MAIN //\n\n/**\n* Computes the minimum value of a one-dimensional ndarray.\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing an input ndarray\n* @returns {number} minimum value\n*\n* @example\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var xbuf = [ 1.0, 3.0, 4.0, 2.0 ];\n* var x = new ndarray( 'generic', xbuf, [ 4 ], [ 1 ], 0, 'row-major' );\n*\n* var v = min( [ x ] );\n* // returns 1.0\n*/\nfunction min( arrays ) {\n\tvar x = arrays[ 0 ];\n\treturn strided( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default min;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numelDimension from '@stdlib/ndarray-base-numel-dimension';\nimport getStride from '@stdlib/ndarray-base-stride';\nimport getOffset from '@stdlib/ndarray-base-offset';\nimport getData from '@stdlib/ndarray-base-data-buffer';\nimport { ndarray as strided } from '@stdlib/stats-strided-min-by';\n\n\n// MAIN //\n\n/**\n* Computes the minimum value of a one-dimensional ndarray via a callback function.\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing an input ndarray\n* @param {Function} clbk - callback function\n* @param {*} [thisArg] - callback execution context\n* @returns {number} minimum value\n*\n* @example\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* var xbuf = [ 1.0, 3.0, 4.0, 2.0 ];\n* var x = new ndarray( 'generic', xbuf, [ 4 ], [ 1 ], 0, 'row-major' );\n*\n* var v = minBy( [ x ], clbk );\n* // returns 2.0\n*/\nfunction minBy( arrays, clbk, thisArg ) {\n\tvar x = arrays[ 0 ];\n\treturn strided( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ), wrapper, null ); // eslint-disable-line max-len\n\n\t/**\n\t* Invokes a provided callback.\n\t*\n\t* @private\n\t* @param {*} value - current array element\n\t* @param {NonNegativeInteger} aidx - current array element index\n\t* @param {NonNegativeInteger} sidx - current strided array element index\n\t* @param {Collection} arr - input array\n\t* @returns {*} result\n\t*/\n\tfunction wrapper( value, aidx ) {\n\t\treturn clbk.call( thisArg, value, aidx, x );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default minBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numelDimension from '@stdlib/ndarray-base-numel-dimension';\nimport getStride from '@stdlib/ndarray-base-stride';\nimport getOffset from '@stdlib/ndarray-base-offset';\nimport getData from '@stdlib/ndarray-base-data-buffer';\nimport { ndarray as strided } from '@stdlib/stats-strided-range';\n\n\n// MAIN //\n\n/**\n* Computes the range of a one-dimensional ndarray.\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing an input ndarray\n* @returns {number} range\n*\n* @example\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var xbuf = [ 1.0, 3.0, 4.0, 2.0 ];\n* var x = new ndarray( 'generic', xbuf, [ 4 ], [ 1 ], 0, 'row-major' );\n*\n* var v = range( [ x ] );\n* // returns 3.0\n*/\nfunction range( arrays ) {\n\tvar x = arrays[ 0 ];\n\treturn strided( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default range;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numelDimension from '@stdlib/ndarray-base-numel-dimension';\nimport getStride from '@stdlib/ndarray-base-stride';\nimport getOffset from '@stdlib/ndarray-base-offset';\nimport getData from '@stdlib/ndarray-base-data-buffer';\nimport { ndarray as strided } from '@stdlib/stats-strided-scumax';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative maximum value of a one-dimensional single-precision floating-point ndarray.\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing an input ndarray and an output ndarray\n* @returns {ndarrayLike} output ndarray\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var xbuf = new Float32Array( [ 1.0, 3.0, 4.0, 2.0 ] );\n* var x = new ndarray( 'float32', xbuf, [ 4 ], [ 1 ], 0, 'row-major' );\n*\n* var ybuf = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\n* var y = new ndarray( 'float32', xbuf, [ 4 ], [ 1 ], 0, 'row-major' );\n*\n* var v = scumax( [ x, y ] );\n* // returns <ndarray>\n*\n* var bool = ( v === y );\n* // returns true\n*\n* var arr = ndarray2array( v );\n* // returns [ 1.0, 3.0, 4.0, 4.0 ]\n*/\nfunction scumax( arrays ) {\n\tvar x = arrays[ 0 ];\n\tvar y = arrays[ 1 ];\n\tstrided( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scumax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numelDimension from '@stdlib/ndarray-base-numel-dimension';\nimport getStride from '@stdlib/ndarray-base-stride';\nimport getOffset from '@stdlib/ndarray-base-offset';\nimport getData from '@stdlib/ndarray-base-data-buffer';\nimport { ndarray as strided } from '@stdlib/stats-strided-scumin';\n\n\n// MAIN //\n\n/**\n* Computes the cumulative minimum value of a one-dimensional single-precision floating-point ndarray.\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing an input ndarray and an output ndarray\n* @returns {ndarrayLike} output ndarray\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var xbuf = new Float32Array( [ 1.0, 3.0, 4.0, 2.0 ] );\n* var x = new ndarray( 'float32', xbuf, [ 4 ], [ 1 ], 0, 'row-major' );\n*\n* var ybuf = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\n* var y = new ndarray( 'float32', xbuf, [ 4 ], [ 1 ], 0, 'row-major' );\n*\n* var v = scumin( [ x, y ] );\n* // returns <ndarray>\n*\n* var bool = ( v === y );\n* // returns true\n*\n* var arr = ndarray2array( v );\n* // returns [ 1.0, 1.0, 1.0, 1.0 ]\n*/\nfunction scumin( arrays ) {\n\tvar x = arrays[ 0 ];\n\tvar y = arrays[ 1 ];\n\tstrided( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ), getData( y ), getStride( y, 0 ), getOffset( y ) ); // eslint-disable-line max-len\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default scumin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numelDimension from '@stdlib/ndarray-base-numel-dimension';\nimport getStride from '@stdlib/ndarray-base-stride';\nimport getOffset from '@stdlib/ndarray-base-offset';\nimport getData from '@stdlib/ndarray-base-data-buffer';\nimport { ndarray as strided } from '@stdlib/stats-strided-smax';\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a one-dimensional single-precision floating-point ndarray.\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing an input ndarray\n* @returns {number} maximum value\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var xbuf = new Float32Array( [ 1.0, 3.0, 4.0, 2.0 ] );\n* var x = new ndarray( 'float32', xbuf, [ 4 ], [ 1 ], 0, 'row-major' );\n*\n* var v = smax( [ x ] );\n* // returns 4.0\n*/\nfunction smax( arrays ) {\n\tvar x = arrays[ 0 ];\n\treturn strided( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default smax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numelDimension from '@stdlib/ndarray-base-numel-dimension';\nimport getStride from '@stdlib/ndarray-base-stride';\nimport getOffset from '@stdlib/ndarray-base-offset';\nimport getData from '@stdlib/ndarray-base-data-buffer';\nimport { ndarray as strided } from '@stdlib/stats-strided-smin';\n\n\n// MAIN //\n\n/**\n* Computes the minimum value of a one-dimensional single-precision floating-point ndarray.\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing an input ndarray\n* @returns {number} minimum value\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var xbuf = new Float32Array( [ 1.0, 3.0, 4.0, 2.0 ] );\n* var x = new ndarray( 'float32', xbuf, [ 4 ], [ 1 ], 0, 'row-major' );\n*\n* var v = smin( [ x ] );\n* // returns 1.0\n*/\nfunction smin( arrays ) {\n\tvar x = arrays[ 0 ];\n\treturn strided( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default smin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numelDimension from '@stdlib/ndarray-base-numel-dimension';\nimport getStride from '@stdlib/ndarray-base-stride';\nimport getOffset from '@stdlib/ndarray-base-offset';\nimport getData from '@stdlib/ndarray-base-data-buffer';\nimport { ndarray as strided } from '@stdlib/stats-strided-srange';\n\n\n// MAIN //\n\n/**\n* Computes the range of a one-dimensional single-precision floating-point ndarray.\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing an input ndarray\n* @returns {number} range\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var xbuf = new Float32Array( [ 1.0, 3.0, 4.0, 2.0 ] );\n* var x = new ndarray( 'float32', xbuf, [ 4 ], [ 1 ], 0, 'row-major' );\n*\n* var v = srange( [ x ] );\n* // returns 3.0\n*/\nfunction srange( arrays ) {\n\tvar x = arrays[ 0 ];\n\treturn strided( numelDimension( x, 0 ), getData( x ), getStride( x, 0 ), getOffset( x ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default srange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numelDimension from '@stdlib/ndarray-base-numel-dimension';\nimport getStride from '@stdlib/ndarray-base-stride';\nimport getOffset from '@stdlib/ndarray-base-offset';\nimport getData from '@stdlib/ndarray-base-data-buffer';\nimport ndarraylike2scalar from '@stdlib/ndarray-base-ndarraylike2scalar';\nimport { ndarray as strided } from '@stdlib/stats-strided-sztest';\n\n\n// MAIN //\n\n/**\n* Computes a one-sample Z-test for a one-dimensional single-precision floating-point ndarray.\n*\n* ## Notes\n*\n* -   The function expects the following ndarrays in order:\n*\n*     -   a one-dimensional input ndarray.\n*     -   a zero-dimensional output ndarray containing a results object.\n*     -   a zero-dimensional ndarray specifying the alternative hypothesis.\n*     -   a zero-dimensional ndarray specifying the significance level.\n*     -   a zero-dimensional ndarray specifying the mean under the null hypothesis.\n*     -   a zero-dimensional ndarray specifying the known standard deviation.\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing ndarrays\n* @returns {ndarrayLike} output ndarray\n*\n* @example\n* import Float32Results from '@stdlib/stats-base-ztest-one-sample-results-float32';\n* import resolveEnum from '@stdlib/stats-base-ztest-alternative-resolve-enum';\n* import structFactory from '@stdlib/array-struct-factory';\n* import Float32Array from '@stdlib/array-float32';\n* import scalar2ndarray from '@stdlib/ndarray-from-scalar';\n* import ndarray from '@stdlib/ndarray-ctor';\n*\n* var opts = {\n*     'dtype': 'float32'\n* };\n*\n* // Define a one-dimensional input ndarray:\n* var xbuf = new Float32Array( [ 1.0, 3.0, 4.0, 2.0 ] );\n* var x = new ndarray( opts.dtype, xbuf, [ 4 ], [ 1 ], 0, 'row-major' );\n*\n* // Specify the alternative hypothesis:\n* var alt = scalar2ndarray( resolveEnum( 'two-sided' ), {\n*     'dtype': 'int8'\n* });\n*\n* // Specify the significance level:\n* var alpha = scalar2ndarray( 0.05, opts );\n*\n* // Specify the mean value under the null hypothesis:\n* var mu = scalar2ndarray( 0.0, opts );\n*\n* // Specify the known standard deviation:\n* var sigma = scalar2ndarray( 1.0, opts );\n*\n* // Create a zero-dimensional results ndarray:\n* var ResultsArray = structFactory( Float32Results );\n* var out = new ndarray( Float32Results, new ResultsArray( 1 ), [], [ 0 ], 0, 'row-major' );\n*\n* // Perform a Z-test:\n* var v = sztest( [ x, out, alt, alpha, mu, sigma ] );\n* // returns <ResultsArray>\n*\n* console.log( v.get().toString() );\n*/\nfunction sztest( arrays ) {\n\tvar alpha;\n\tvar sigma;\n\tvar alt;\n\tvar mu;\n\tvar x;\n\tvar y;\n\n\tx = arrays[ 0 ];\n\ty = ndarraylike2scalar( arrays[ 1 ] );\n\n\talt = ndarraylike2scalar( arrays[ 2 ] );\n\talpha = ndarraylike2scalar( arrays[ 3 ] );\n\tmu = ndarraylike2scalar( arrays[ 4 ] );\n\tsigma = ndarraylike2scalar( arrays[ 5 ] );\n\n\tstrided( numelDimension( x, 0 ), alt, alpha, mu, sigma, getData( x ), getStride( x, 0 ), getOffset( x ), y ); // eslint-disable-line max-len\n\n\treturn arrays[ 1 ];\n}\n\n\n// EXPORTS //\n\nexport default sztest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numelDimension from '@stdlib/ndarray-base-numel-dimension';\nimport getStride from '@stdlib/ndarray-base-stride';\nimport getOffset from '@stdlib/ndarray-base-offset';\nimport getData from '@stdlib/ndarray-base-data-buffer';\nimport ndarraylike2scalar from '@stdlib/ndarray-base-ndarraylike2scalar';\nimport { ndarray as strided } from '@stdlib/stats-strided-sztest2';\n\n\n// MAIN //\n\n/**\n* Computes a two-sample Z-test for two one-dimensional single-precision floating-point ndarrays.\n*\n* ## Notes\n*\n* -   The function expects the following ndarrays in order:\n*\n*     -   first one-dimensional input ndarray.\n*     -   second one-dimensional input ndarray.\n*     -   a zero-dimensional output ndarray containing a results object.\n*     -   a zero-dimensional ndarray specifying the alternative hypothesis.\n*     -   a zero-dimensional ndarray specifying the significance level.\n*     -   a zero-dimensional ndarray specifying the difference in means under the null hypothesis.\n*     -   a zero-dimensional ndarray specifying the known standard deviation of the first one-dimensional input ndarray.\n*     -   a zero-dimensional ndarray specifying the known standard deviation of the second one-dimensional input ndarray.\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing ndarrays\n* @returns {ndarrayLike} output ndarray\n*\n* @example\n* import Float32Results from '@stdlib/stats-base-ztest-two-sample-results-float32';\n* import resolveEnum from '@stdlib/stats-base-ztest-alternative-resolve-enum';\n* import structFactory from '@stdlib/array-struct-factory';\n* import Float32Array from '@stdlib/array-float32';\n* import scalar2ndarray from '@stdlib/ndarray-from-scalar';\n* import ndarray from '@stdlib/ndarray-ctor';\n*\n* var opts = {\n*     'dtype': 'float32'\n* };\n*\n* // Define one-dimensional input ndarrays:\n* var xbuf = new Float32Array( [ 4.0, 4.0, 6.0, 6.0, 5.0 ] );\n* var x = new ndarray( opts.dtype, xbuf, [ 5 ], [ 1 ], 0, 'row-major' );\n*\n* var ybuf = new Float32Array( [ 3.0, 3.0, 5.0, 7.0, 7.0 ] );\n* var y = new ndarray( opts.dtype, ybuf, [ 5 ], [ 1 ], 0, 'row-major' );\n*\n* // Specify the alternative hypothesis:\n* var alt = scalar2ndarray( resolveEnum( 'two-sided' ), {\n*     'dtype': 'int8'\n* });\n*\n* // Specify the significance level:\n* var alpha = scalar2ndarray( 0.05, opts );\n*\n* // Specify the difference in means under the null hypothesis:\n* var diff = scalar2ndarray( 0.0, opts );\n*\n* // Specify the known standard deviations:\n* var sigmax = scalar2ndarray( 1.0, opts );\n* var sigmay = scalar2ndarray( 2.0, opts );\n*\n* // Create a zero-dimensional results ndarray:\n* var ResultsArray = structFactory( Float32Results );\n* var out = new ndarray( Float32Results, new ResultsArray( 1 ), [], [ 0 ], 0, 'row-major' );\n*\n* // Perform a Z-test:\n* var v = sztest2( [ x, y, out, alt, alpha, diff, sigmax, sigmay ] );\n* // returns <ResultsArray>\n*\n* console.log( v.get().toString() );\n*/\nfunction sztest2( arrays ) {\n\tvar sigmax;\n\tvar sigmay;\n\tvar alpha;\n\tvar diff;\n\tvar alt;\n\tvar out;\n\tvar x;\n\tvar y;\n\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\tout = ndarraylike2scalar( arrays[ 2 ] );\n\n\talt = ndarraylike2scalar( arrays[ 3 ] );\n\talpha = ndarraylike2scalar( arrays[ 4 ] );\n\tdiff = ndarraylike2scalar( arrays[ 5 ] );\n\tsigmax = ndarraylike2scalar( arrays[ 6 ] );\n\tsigmay = ndarraylike2scalar( arrays[ 7 ] );\n\n\tstrided( numelDimension( x, 0 ), numelDimension( y, 0 ), alt, alpha, diff, sigmax, getData( x ), getStride( x, 0 ), getOffset( x ), sigmay, getData( y ), getStride( y, 0 ), getOffset( y ), out ); // eslint-disable-line max-len\n\n\treturn arrays[ 2 ];\n}\n\n\n// EXPORTS //\n\nexport default sztest2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numelDimension from '@stdlib/ndarray-base-numel-dimension';\nimport getStride from '@stdlib/ndarray-base-stride';\nimport getOffset from '@stdlib/ndarray-base-offset';\nimport getData from '@stdlib/ndarray-base-data-buffer';\nimport ndarraylike2scalar from '@stdlib/ndarray-base-ndarraylike2scalar';\nimport { ndarray as strided } from '@stdlib/stats-strided-ztest';\n\n\n// MAIN //\n\n/**\n* Computes a one-sample Z-test for a one-dimensional ndarray.\n*\n* ## Notes\n*\n* -   The function expects the following ndarrays in order:\n*\n*     -   a one-dimensional input ndarray.\n*     -   a zero-dimensional output ndarray containing a results object.\n*     -   a zero-dimensional ndarray specifying the alternative hypothesis.\n*     -   a zero-dimensional ndarray specifying the significance level.\n*     -   a zero-dimensional ndarray specifying the mean under the null hypothesis.\n*     -   a zero-dimensional ndarray specifying the known standard deviation.\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing ndarrays\n* @returns {ndarrayLike} output ndarray\n*\n* @example\n* import Float64Results from '@stdlib/stats-base-ztest-one-sample-results-float64';\n* import resolveEnum from '@stdlib/stats-base-ztest-alternative-resolve-enum';\n* import structFactory from '@stdlib/array-struct-factory';\n* import scalar2ndarray from '@stdlib/ndarray-from-scalar';\n* import ndarray from '@stdlib/ndarray-ctor';\n*\n* var opts = {\n*     'dtype': 'generic'\n* };\n*\n* // Define a one-dimensional input ndarray:\n* var xbuf = [ 1.0, 3.0, 4.0, 2.0 ];\n* var x = new ndarray( opts.dtype, xbuf, [ 4 ], [ 1 ], 0, 'row-major' );\n*\n* // Specify the alternative hypothesis:\n* var alt = scalar2ndarray( resolveEnum( 'two-sided' ), {\n*     'dtype': 'int8'\n* });\n*\n* // Specify the significance level:\n* var alpha = scalar2ndarray( 0.05, opts );\n*\n* // Specify the mean value under the null hypothesis:\n* var mu = scalar2ndarray( 0.0, opts );\n*\n* // Specify the known standard deviation:\n* var sigma = scalar2ndarray( 1.0, opts );\n*\n* // Create a zero-dimensional results ndarray:\n* var ResultsArray = structFactory( Float64Results );\n* var out = new ndarray( Float64Results, new ResultsArray( 1 ), [], [ 0 ], 0, 'row-major' );\n*\n* // Perform a Z-test:\n* var v = ztest( [ x, out, alt, alpha, mu, sigma ] );\n* // returns <ResultsArray>\n*\n* console.log( v.get().toString() );\n*/\nfunction ztest( arrays ) {\n\tvar alpha;\n\tvar sigma;\n\tvar alt;\n\tvar mu;\n\tvar x;\n\tvar y;\n\n\tx = arrays[ 0 ];\n\ty = ndarraylike2scalar( arrays[ 1 ] );\n\n\talt = ndarraylike2scalar( arrays[ 2 ] );\n\talpha = ndarraylike2scalar( arrays[ 3 ] );\n\tmu = ndarraylike2scalar( arrays[ 4 ] );\n\tsigma = ndarraylike2scalar( arrays[ 5 ] );\n\n\tstrided( numelDimension( x, 0 ), alt, alpha, mu, sigma, getData( x ), getStride( x, 0 ), getOffset( x ), y ); // eslint-disable-line max-len\n\n\treturn arrays[ 1 ];\n}\n\n\n// EXPORTS //\n\nexport default ztest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numelDimension from '@stdlib/ndarray-base-numel-dimension';\nimport getStride from '@stdlib/ndarray-base-stride';\nimport getOffset from '@stdlib/ndarray-base-offset';\nimport getData from '@stdlib/ndarray-base-data-buffer';\nimport ndarraylike2scalar from '@stdlib/ndarray-base-ndarraylike2scalar';\nimport { ndarray as strided } from '@stdlib/stats-strided-ztest2';\n\n\n// MAIN //\n\n/**\n* Computes a two-sample Z-test for two one-dimensional ndarrays.\n*\n* ## Notes\n*\n* -   The function expects the following ndarrays in order:\n*\n*     -   first one-dimensional input ndarray.\n*     -   second one-dimensional input ndarray.\n*     -   a zero-dimensional output ndarray containing a results object.\n*     -   a zero-dimensional ndarray specifying the alternative hypothesis.\n*     -   a zero-dimensional ndarray specifying the significance level.\n*     -   a zero-dimensional ndarray specifying the difference in means under the null hypothesis.\n*     -   a zero-dimensional ndarray specifying the known standard deviation of the first one-dimensional input ndarray.\n*     -   a zero-dimensional ndarray specifying the known standard deviation of the second one-dimensional input ndarray.\n*\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing ndarrays\n* @returns {ndarrayLike} output ndarray\n*\n* @example\n* import Float64Results from '@stdlib/stats-base-ztest-two-sample-results-float64';\n* import resolveEnum from '@stdlib/stats-base-ztest-alternative-resolve-enum';\n* import structFactory from '@stdlib/array-struct-factory';\n* import scalar2ndarray from '@stdlib/ndarray-from-scalar';\n* import ndarray from '@stdlib/ndarray-ctor';\n*\n* var opts = {\n*     'dtype': 'generic'\n* };\n*\n* // Define one-dimensional input ndarrays:\n* var xbuf = [ 4.0, 4.0, 6.0, 6.0, 5.0 ];\n* var x = new ndarray( opts.dtype, xbuf, [ 5 ], [ 1 ], 0, 'row-major' );\n*\n* var ybuf = [ 3.0, 3.0, 5.0, 7.0, 7.0 ];\n* var y = new ndarray( opts.dtype, ybuf, [ 5 ], [ 1 ], 0, 'row-major' );\n*\n* // Specify the alternative hypothesis:\n* var alt = scalar2ndarray( resolveEnum( 'two-sided' ), {\n*     'dtype': 'int8'\n* });\n*\n* // Specify the significance level:\n* var alpha = scalar2ndarray( 0.05, opts );\n*\n* // Specify the difference in means under the null hypothesis:\n* var diff = scalar2ndarray( 0.0, opts );\n*\n* // Specify the known standard deviations:\n* var sigmax = scalar2ndarray( 1.0, opts );\n* var sigmay = scalar2ndarray( 2.0, opts );\n*\n* // Create a zero-dimensional results ndarray:\n* var ResultsArray = structFactory( Float64Results );\n* var out = new ndarray( Float64Results, new ResultsArray( 1 ), [], [ 0 ], 0, 'row-major' );\n*\n* // Perform a Z-test:\n* var v = ztest2( [ x, y, out, alt, alpha, diff, sigmax, sigmay ] );\n* // returns <ResultsArray>\n*\n* console.log( v.get().toString() );\n*/\nfunction ztest2( arrays ) {\n\tvar sigmax;\n\tvar sigmay;\n\tvar alpha;\n\tvar diff;\n\tvar alt;\n\tvar out;\n\tvar x;\n\tvar y;\n\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\tout = ndarraylike2scalar( arrays[ 2 ] );\n\n\talt = ndarraylike2scalar( arrays[ 3 ] );\n\talpha = ndarraylike2scalar( arrays[ 4 ] );\n\tdiff = ndarraylike2scalar( arrays[ 5 ] );\n\tsigmax = ndarraylike2scalar( arrays[ 6 ] );\n\tsigmay = ndarraylike2scalar( arrays[ 7 ] );\n\n\tstrided( numelDimension( x, 0 ), numelDimension( y, 0 ), alt, alpha, diff, sigmax, getData( x ), getStride( x, 0 ), getOffset( x ), sigmay, getData( y ), getStride( y, 0 ), getOffset( y ), out ); // eslint-disable-line max-len\n\n\treturn arrays[ 2 ];\n}\n\n\n// EXPORTS //\n\nexport default ztest2;\n"],"names":["main","Object","defineProperty","isNumber","value","zeros","n","i","out","zeroPad","str","width","right","negative","pad","length","startsWithMinus","substr","lowercase","String","prototype","toLowerCase","uppercase","toUpperCase","formatInteger","token","base","specifier","arg","parseInt","isFinite","Error","toString","precision","padRight","sign","alternate","call","charAt","abs","Math","replace","RE_EXP_POS_DIGITS","RE_EXP_NEG_DIGITS","RE_ONLY_DIGITS","RE_DIGITS_BEFORE_EXP","RE_TRAILING_PERIOD_ZERO","RE_PERIOD_ZERO_EXP","RE_ZERO_BEFORE_EXP","formatDouble","digits","f","parseFloat","toExponential","toFixed","toPrecision","spaces","fromCharCode","isArray","Array","isnan","initialize","flags","mapping","formatInterpolate","tokens","hasPeriod","flag","num","pos","j","TypeError","padZeros","indexOf","arguments","maxWidth","substring","RE","parse","match","formatTokenize","content","prev","exec","slice","lastIndex","push","format","args","tokenize","interpolate","apply","objectProtoype","toStr","defineGetter","__defineGetter__","defineSetter","__defineSetter__","lookupGetter","__lookupGetter__","lookupSetter","__lookupSetter__","err","hasDefinePropertySupport","builtin","obj","prop","descriptor","hasValue","hasGet","hasSet","__proto__","get","set","defineProperty$1","setReadOnly","configurable","enumerable","writable","normalizeIndex","idx","max","ndims","x","shape","copy","len","numelDimension","dim","N","d","RangeError","sh","copyIndexed","getShape","setNonEnumerableReadOnly","shape2strides","order","s","columnmajor","rowmajor","ROW_MAJOR","stride","ord","st","strides","getStrides","offset","o","strides2offset","data","FLOAT64_PINF","Number","POSITIVE_INFINITY","isPositiveZero","PINF","cumax","strideX","y","strideY","ix","iy","v","offsetX","offsetY","main$d","FLOAT64_NINF","NEGATIVE_INFINITY","isNegativeZero","NINF","cumin","min","stride2offset","dcumax","dcumin","dmax","NaN","dmin","drange","ndarray","TYPE","isAccessorArray","GETTERS","complex128","arr","complex64","default","getter","dtype","float64","float32","int32","int16","int8","uint32","uint16","uint8","uint8c","generic","FLG","Symbol","hasToStringTagSupport","toStringTag","has","hasOwnProperty","hasOwnProp","property","Sym","toStrTag","hasToStringTag","isOwn","tag","nativeClass","main$b","isObjectLike","isBuffer","_isBuffer","constructor","reFunctionName","predicate","arrayfun","RE_FUNCTION_NAME","constructorName","name","ctor","REGEXP","ctor2dtypes","Float32Array","Float64Array","Int16Array","Int32Array","Int8Array","Uint16Array","Uint32Array","Uint8Array","Uint8ClampedArray","Complex64Array","Complex128Array","hasFloat64Array","bool","GlobalFloat64Array","hasFloat64ArraySupport","Float64Array$1","hasFloat32Array","GlobalFloat32Array","hasFloat32ArraySupport","Float32Array$1","hasUint32Array","UINT32_MAX","GlobalUint32Array","hasUint32ArraySupport","Uint32Array$1","hasInt32Array","GlobalInt32Array","INT32_MAX","hasInt32ArraySupport","Int32Array$1","hasUint16Array","GlobalUint16Array","UINT16_MAX","hasUint16ArraySupport","Uint16Array$1","hasInt16Array","GlobalInt16Array","INT16_MAX","hasInt16ArraySupport","Int16Array$1","hasUint8Array","GlobalUint8Array","UINT8_MAX","hasUint8ArraySupport","Uint8Array$1","hasUint8ClampedArray","GlobalUint8ClampedArray","hasUint8ClampedArraySupport","Uint8ClampedArray$1","hasInt8Array","GlobalInt8Array","INT8_MAX","hasInt8ArraySupport","Int8Array$1","test","isPrimitive","isObject","floor","isInteger","isInt","valueOf","isNonNegativeInteger","MAX_ARRAY_LENGTH","isArrayLikeObject","MAX_LENGTH","MAX_TYPED_ARRAY_LENGTH","isCollection","hasArrayBuffer","ArrayBuffer","isArrayBuffer","isString","isBoolean","Bool","Boolean","self","window","globalThis","root","codegen","Function","GlobalThis","Self","Win","getGlobal","nodeList","document","childNodes","typedarray","ctorName","type","isFunction","typeOf","Complex128","real","imag","this","re","im","fround","FLOAT32_VIEW","f32","Complex64","float64ToFloat32","isComplexLike","isEven","BYTES_PER_ELEMENT","isComplex64Array","isComplex128Array","hasIteratorSymbolSupport","iterator","IteratorSymbol","setNonEnumerableReadOnlyAccessor","realf","z","imagf","reinterpret","buffer","byteOffset","fromIterator","it","next","done","HAS_ITERATOR_SYMBOL","isComplexArray","_length","_buffer","isComplexArrayConstructor","getComplex64","buf","nargs","fromArray","reinterpret64","reinterpret128","byteLength","ITERATOR_SYMBOL","src","thisArg","clbk","tmp","flg","accessorGetter","fromIteratorMap","target","start","copyWithin","iter","entries","end","fcn","searchElement","fromIndex","separator","sep","join","outbuf","reducer","initialValue","acc","sbuf","outlen","begin","index","getComplex128","CTORS","DTYPES","NTYPES","ctor2dtype","ndarraylike2scalar","getData","dt","resolveGetter","getOffset","keys","isArguments","bool$6","detect","hasArgumentsClass","isNan","isEnumerableProperty","propertyIsEnumerable","hasStringEnumBug","isEnum","isArguments$1","isConstructorPrototype","w","hasAutomationEqualityBug","k","win","EXCLUDED_KEYS","check","HAS_BUILTIN","skipConstructor","skipPrototype","isFcn","p","HAS_ENUM_PROTO_BUG","HAS_NON_ENUM_PROPS_BUG","HAS_WINDOW","error","NON_ENUMERABLE","getProto","Obj","getPrototypeOf","proto","getProto$1","objectPrototype","isPlainObject","isPrototypeOf","key","ownProps","enumerated","less","greater","DATA","enumeration","hash","opts","val","allowDupes","duplicates","objectKeys","objectInverse","ENUM","resolve","t","alternative","str2enum","enum2str","uint16view","sqrt","ctors","IS_LITTLE_ENDIAN","HIGH$7","isLittleEndian","FLOAT64_VIEW","UINT32_VIEW","getHighWord","HIGH","HIGH$5","FLOAT64_EXPONENT_BIAS","LN2_HI","LN2_LO","TWO54","ONE_THIRD","HIGH_SIGNIFICAND_MASK","HIGH_MAX_NORMAL_EXP","HIGH_MIN_NORMAL_EXP","HIGH_BIASED_EXP_0","ln","hfsq","hx","t2","t1","R","BIAS","high","setHighWord","polyvalP","polyvalQ","Y1","Y2","Y3","Y4","Y5","erfinv","ax","q","g","r","s1","s2","rationalFcnR1","rationalFcnR2","rationalFcnR3","rationalFcnR4","rationalFcnR5","wrap","factory","mu","sigma","A","B","constantFunction","ceil","trunc","FLOAT64_MAX_BASE2_EXPONENT","FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL","FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL","isInfinite","LOW","FLOAT64_HIGH_WORD_SIGN_MASK","FLOAT64_HIGH_WORD_ABS_MASK","indices$3","indices","toWords","assign","indices$1","fromWords","low","WORDS","FLOAT64_SMALLEST_NORMAL","SCALAR","normalize","FLOAT64_HIGH_WORD_EXPONENT_MASK","TWO52_INV","CLEAR_EXP_MASK","FRAC","ldexp","frac","exp","m","hy","EXP_MASK","floatExp","MIN_SUBNORMAL_EXPONENT","ABS_MASK","SIGN_MASK","MAX_EXPONENT","MAX_SUBNORMAL_EXPONENT","LOG2_E","OVERFLOW","UNDERFLOW","NEARZERO","NEG_NEARZERO","hi","lo","c","expmulti","LOW$1","TINY","SMALL","ERX","PPC","QQC","PAC","QAC","RAC","SAC","RBC","SBC","erfc","polyvalPP","polyvalQQ","polyvalPA","polyvalQA","polyvalRA","polyvalSA","polyvalRB","polyvalSB","setLowWord","denom","degenerate","BLOCKSIZE","dsumpw","s0","s3","s4","s5","s6","s7","M","sum","dapxsumpw","alpha","dmeanpn","dmean","normalCDF","cdf","normalQuantile","quantile","WORKSPACE","dztest","pValue","stderr","stat","alt","resolveStr","rejected","statistic","ci","nullValue","sd","dztest2","NX","NY","diff","sigmax","sigmay","xmean","ymean","SETTERS","setter","arraylike2object","accessorProtocol","accessors","accessorSetter","xbuf","maxBy","minBy","range","isnanf","isPositiveZerof","scumax","isNegativeZerof","scumin","smax","smin","srange","ssumpw","sapxsumpw","smeanpn","smean","sztest","sztest2","gsumpw","gapxsumpw","meanpn","mean","ztest","ztest2","ns","arrays","strided","getStride","aidx"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456]}